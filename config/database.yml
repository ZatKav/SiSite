# SQLite version 3.x
#   gem install sqlite3
#
#   Ensure the SQLite 3 gem is defined in your Gemfile
#   gem 'sqlite3'
development:
  adapter: sqlite3
  database: db/development.sqlite3
  pool: 5
  timeout: 5000

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  adapter: sqlite3
  database: db/test.sqlite3
  pool: 5
  timeout: 5000

production:
  adapter: sqlite3
  database: db/production.sqlite3
  pool: 5
  timeout: 5000


'@------------------------------------------------------
1

'  I N F O
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'
'	FRIENDS LIFE DORKING TEST AUTOMATION TEAM
'	11/05/2011











'	S C R I P T																			
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'@   A c q u i r e   t a s k   c o r e   p a r a m e t e r s

	'@ initialize an object from a user-defined class
	Set env = new clsDisconnectedRecordSet

	'@ add an array of function references (handlers in Event Handling section) to objects' event objects (events)
	'@ each event object is a collection of function refferences with an ability to be executed (fired)
	env.onCreate.addHandler array("logMethodToTxt")
	env.onAdd.addHandler array ("logMethodToTxt", "logErrorAsApplicationEvent", "quitScriptOnError")

	'@ create recordset headers and add first record to recordset (values to headers) (number of values has to match the number of headers as there is a direct relation between them)
	env.create array ("HOST_NAME", "PROJECT_ROOT_PATH", "BASELINE")
	env.add array (createObject ("WScript.Network").ComputerName, createObject ("WScript.Shell").Environment ("USER") ("AF_PROJECT_ROOT_PATH"), inputbox ("baseline", "source ripper", "current"))

	set fso = createObject ("scripting.fileSystemObject") 	'@ initialize fso object to access file system methods (buildPath)
	'@ Construct project source workspace layout
	strReleasePath = fso.buildPath (env.object ("PROJECT_ROOT_PATH").value, "source")
	strReleasePath = fso.buildPath (strReleasePath, env.object ("BASELINE").value)


'@   C r e a t e   t a s k   p a r a m e t e r  l a y o u t   o b j e c t

	set layout = new clsDisconnectedRecordSet

	'@ add an array of function references (handlers in Event Handling section) to objects' event objects (events)
	'@ each event object is a collection of function refferences with an ability to be executed (fired)
	layout.onCreate.addHandler array ("logMethodToTxt")
	layout.onAdd.addHandler array ("logMethodToTxt", "logErrorAsApplicationEvent", "quitScriptOnError")

	'@ create recordset headers, and empty record
	layout.create array ("PROJECT_SOURCE_WORKSPACE_PATH", "TEST_AREA_ACTION_PACK_LOCATION", "QC_URL", "QC_DOMAIN", "QC_PROJECT", "QC_USER", "QC_PASSWORD")
	layout.add array (strReleasePath, _
				fso.buildPath ( strReleasePath, "actions" ), _
				inputbox ("QC url", "source ripper", "http://sdora255/qcbin/"), _
				inputbox ("domain", "source ripper", "CROSS_BUSINESS_FUNCTION"), _
				inputbox ("project", "source ripper", "Test_Automation"), _
				inputbox ("user", "source ripper", "macise"), _
				inputbox ("password", "source ripper", ""))


'@	C r e a t  e   p r o j e c t   s o u r c e   w o r k s p a c e   m i s s i n g   f o l d e r s

	set fs = new clsFileSystem
	fs.onCreateFolder.addHandler array ("logMethodToTxt", "logErrorAsApplicationEvent", "quitScriptOnError")

	'~ fs.moveFolder layout.object ("PROJECT_SOURCE_WORKSPACE_PATH").value, layout.object ("PROJECT_SOURCE_WORKSPACE_PATH").value &"-"& month(now) & day(now) & hour (now) & minute(now)
	
	if not fso.folderExists (layout.object ("PROJECT_SOURCE_WORKSPACE_PATH").value) then : fs.createFolder (layout.object ("PROJECT_SOURCE_WORKSPACE_PATH").value)
	if not fso.folderExists (layout.object ("TEST_AREA_ACTION_PACK_LOCATION").value) then : fs.createFolder (layout.object ("TEST_AREA_ACTION_PACK_LOCATION").value)


'@   L a u n c h   Q T P

	'@ initialize an object from a user-defined class
	set qtApp = new clsQuickTestApplication

	'@ add an array of function references (handlers in Event Handling section) to objects' event objects (events)
	'@ each event object is a collection of function refferences with an ability to be executed (fired)
	qtApp.onOpen.addHandler array ("logMethodToTxt", "logErrorAsApplicationEvent", "quitScriptOnError")
	qtApp.onConnect.addHandler array("logMethodToTxt", "logErrorAsApplicationEvent", "quitScriptOnError")
	qtApp.onSaveTestFromQCBaseline.addHandler array ("logMethodToTxt")
	qtApp.onGetBaselineTestList.addHandler array ("logMethodToTxt")
	
	'@ RE-open QTP
	qtApp.close : qtApp.open


'@  C o n n e c t   t o   Q C   R e p o s i t o r y

	'@ connect active QTP session to QC project specified in the scheduled record of the scheduler
	qtApp.connect layout.object ("QC_URL").value, layout.object ("QC_DOMAIN").value, layout.object("QC_PROJECT").value,_
								layout.object("QC_USER").value, layout.object("QC_PASSWORD").value, False


	qtApp.saveTestFromQCBaseline qtApp.getBaselineTestList ("Subject\POC"), "Libraries\POC", env.object ("BASELINE").value, layout.object ("TEST_AREA_ACTION_PACK_LOCATION").value

	qtApp.close




'@                                      U S E R - D E F I N E D   C L A S S E S

Class clsFileSystem

	Public onMoveFolder, fso, onCreateFolder
	Private strCurrentMethod_, strMoveFolder_, strCreateFolder_

	private sub class_initialize ()
		set fso = createobject("scripting.filesystemobject")
		set onMoveFolder = new clsEvents                      '@ create event object (each event object is a collection of function refferences with an ability to be executed (fired))
		set onCreateFolder = new clsEvents                      '@ create event object (each event object is a collection of function refferences with an ability to be executed (fired))
	end sub

	private sub class_terminate ()
		set fso = nothing
	end sub

	public property get properties ()
		set dictProperties = createObject ("scripting.dictionary")
		dictProperties.add "method", strCurrentMethod_
		dictProperties.add "moveFolder", strMoveFolder_
		dictProperties.add "createFolder", strCreateFolder_
		set properties = dictProperties
	end property

	public sub moveFolder (strFolderToMove, strFolderNew)
		strCurrentMethod_ = "moveFolder"            '@ note the method that will be executed - for logging
		strMoveFolder_ = strFolderToMove & vbNewLine & strFolderNew
		on error resume next
		'fso.moveFolder strFolderToMove, strFolderNew
		fso.copyFolder strFolderToMove, strFolderNew
		fso.deleteFolder strFolderToMove, true
		onMoveFolder.fire Me
	end sub

	public sub createFolder (strFolderToCreate)
		strCurrentMethod_ = "createFolder"            '@ note the method that will be executed - for logging
		strCreateFolder_ = strFolderToCreate
		on error resume next
		fso.createFolder strFolderToCreate
		
		onCreateFolder.fire Me
	end sub

End Class


'@   D i s c o n n e c t e d   R e c o r d s e t   C l a s s   c l s D i s c o n n e c t e d R e c o r d S e t

Class clsDisconnectedRecordSet

	'@ declare variables that will be accessed from the global script
	Public object, onAdd, onCreate

	'@ declare variables that will only be used within the class
	Private strCurrentMethod_, arrHeaders_, strValues_, arrValues_

	'@ this function runs each time object is initialized from this class
	Private Sub Class_Initialize ()

		set object =  createObject ("ADODB.RecordSet") '@ create an object that will be an interface to Recordset class of ADODB library (COM)
		set onAdd = new clsEvents                      '@ create event object (each event object is a collection of function refferences with an ability to be executed (fired))
	set onCreate = new clsEvents                      '@ create event object (each event object is a collection of function refferences with an ability to be executed (fired))

	End Sub

	'@ this function runs each time the object is released (script stops running or object set to nothing)
	Private Sub Class_Terminate ()

		on error resume next '@ switch off the WSH error handling (in case when the object is released before the connection to DB is made)
		object.close         '@ close a recordset

	End Sub

	'@ a class property, that collects most important object properties and class variables into one object - for logging
	Public Property Get properties ()
	on error resume next
		set dictProperties = createObject ("scripting.dictionary")
		dictProperties.add "method", strCurrentMethod_
		dictProperties.add "create", join (arrHeaders_, vbNewLine)
		dictProperties.add "add", join (arrValues_, vbNewLine)
		set properties = dictProperties

	End Property

	'@ set up a disconnected recordset with array of fields and pre-set (constant) field parameters
	Public Sub create ( arrHeaders )

		on error resume next     '@ switch off WSH error handling (custom error handling will be used)
		strCurrentMethod_ = "create"            '@ note the method that will be executed - for logging
		arrHeaders_ = arrHeaders '@ note the array of recordset headers as an internal variable
		const FIELD_TYPE = 200   '@ numeric value for a recordset field (string type)
		const MAX_CHAR = 1024    '@ recordset field size
		'@ add fields to recordset with pre-set parameters
		For Each strHeader in arrHeaders_
			object.fields.append strHeader, FIELD_TYPE, MAX_CHAR
		Next
		object.Open                                               '@ open a pre-defined recordset
	onCreate.fire Me

	End Sub

	'@ add a new record of values to recordset
	Public Sub add ( arrValues )

		on error resume next                 '@ switch off WSH error handling (custom error handling will be used)
		strCurrentMethod_ = "add"            '@ note the method that will be executed - for logging
		arrValues_ = arrValues
		object.AddNew arrHeaders_, arrValues '@ add a new record of values to a pre-set array of recordset fields
		onAdd.fire Me                        '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)

	End Sub

End Class


'@   Q t p   C l a s s   c l s Q u i c k T e st A p p l i c a t i o n


Class clsQuickTestApplication

	'@ declare variables that will be accessed from the global script
	Public object, onAddCodeToAction, onOpen, onConnect, onRun, onSaveTestFromQCBaseline, onGetBaselineTestList

	'@ declare variables that will only be used within the class
	Private strCurrentMethod_, strConnect_, strSaveTestFromQCBaseline_, strGetBaselineTestList_

	'@ this function runs each time object is initialized from this class
	Private Sub Class_Initialize ()

		'@ create event objects (each event object is a collection of function refferences with an ability to be executed (fired))
		set onAddCodeToAction = new clsEvents
		set onOpen = new clsEvents
		set onConnect = new clsEvents
		set onRun = new clsEvents
		set onSaveTestFromQCBaseline = new clsEvents
		set onGetBaselineTestList = new clsEvents

	End Sub

	'@ a class property, that collects most important object properties and class variables into one object - for logging
	Public Property Get properties ()

		set dictProperties = createObject ("scripting.dictionary")
		dictProperties.add "method", strCurrentMethod_
		dictProperties.add "open", ""
		dictProperties.add "connect", strConnect_
		dictProperties.add "saveTestFromQCBaseline", strSaveTestFromQCBaseline_
		dictProperties.add "getBaselineTestList", strGetBaselineTestList_
		set properties = dictProperties

	End Property

	'@ launch QTP
	Public Sub open ()

		strCurrentMethod_ = "open"                          '@ note the method that will be executed - for logging
		on error resume next                                '@ switch off WSH error handling (custom error handling will be used)
		set object = createObject ("QuickTest.Application") '@ create an object that will be an interface to Application class of QuickTest library (COM)
		object.Launch                                       '@ launch application
		object.Visible = TRUE                               '@ make application UI visible
		onOpen.fire Me                                      '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)

	End Sub

	'@ force close QTP
	Public Sub close ()

		on error resume next '@ switch off WSH error handling (custom error handling will be used)
		object.quit          '@ quit application
		wscript.sleep 2000   '@ allow 2 seconds before checking if application is closed
		'@ kill all qtp related processes if they are still in the process list
		for each objProcess in getObject ("winmgmts:").InstancesOf ("Win32_process")
			if objProcess.name = "QTPro.exe" or objProcess.name = "QTReport.exe" then : objProcess.terminate
		next

	End Sub

	'@ initiate a connection between QTP and QC
	Public Sub connect (strUrl, strDomain, strProject, strUserName, strPassword, blnEncrypted)

		strCurrentMethod_ = "connect"                                                                     '@ note the method that will be executed - for logging
		strConnect_ = strUrl & vbNewLine & strDomain & vbNewLine &  strProject & vbNewLine &  strUserName & vbNewLine &  strPassword & vbNewLine &  blnEncrypted
		on error resume next                                                                              '@ switch off WSH error handling (custom error handling will be used)
		if object.TDConnection.IsConnected then : object.TDConnection.disconnect
		object.TDConnection.connect strUrl, strDomain, strProject, strUserName, strPassword, blnEncrypted '@ connect to QC project
		onConnect.fire Me                                                                                 '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)

	End Sub

	public function getBaselineTestList (strTestPlanPath)
		strCurrentMethod_ = "getBaselineTestList"
		strGetBaselineTestList_ = strTestPlanPath

		reDim arrTempTests (-1)

		on error resume next
		set fldPoc = qtApp.object.TDConnection.TDOTA.TreeManager.nodeByPath (strTestPlanPath)

		for each tes in fldPoc.testFactory.newlist("")
			strGetBaselineTestList_ = strGetBaselineTestList_ & vbNewLine & tes.name
			reDim preserve arrTempTests (uBound (arrTempTests) +1)
			arrTempTests (uBound (arrTempTests)) = strTestPlanPath &"\"& tes.name
		next

		strGetBaselineTestList_ = strGetBaselineTestList_ & vbNewLine & join (arrTempTests, vbNewLine)
		getBaselineTestList = arrTempTests

		onGetBaselineTestList.fire Me
	end function

	'@ get qc source to FS
	public sub saveTestFromQCBaseline (arrTests, strLibrary, strBaseline, strDestination)

		strCurrentMethod_ = "saveTestFromQCBaseline"
		strSaveTestFromQCBaseline_ = strLibrary & vbNewLine & strBaseline & vbNewLine & strDestination & vbNewLine & join (arrTests, vbNewLine)

		on error resume next

		for each tes in arrTests
			if strBaseline = "current" then : qtApp.object.Open "[QualityCenter] "& tes, true, false :_
				else : qtApp.object.OpenTestFromBaseline "[QualityCenter] "& tes, strLibrary, strBaseline, false
			saveTest strDestination
		next

		onSaveTestFromQCBaseline.fire Me
		
	end sub

	public sub saveTest (strDestination)
		qtApp.object.Test.SaveAs  strDestination &"\"& qtApp.object.Test.name, false, false
	end sub

End Class


'@   E v e n t s   Cl a s s   c l s E v e n t s


Class clsEvents

	'@ declare variables that will only be used within the class
	Private arrHandlers_ ()

	'@ this function runs each time object is initialized from this class
	Private Sub Class_Initialize ()

		ReDim arrHandlers_ (-1) '@ initiate a dynamic array with no elements in it

	End Sub

	'@ add an array of handler function raferences to local storage array
	Public Sub addHandler ( arrFunctionNames )

		'@ iterate through the array of function names
		for each strFunctionName in arrFunctionNames
			ReDim Preserve arrHandlers_ ( UBound ( arrHandlers_ ) +1)                 '@ add an emty element to local storage array
			Set arrHandlers_ ( UBound ( arrHandlers_ ) ) = GetRef ( strFunctionName ) '@ set a reference of the current function name to the last added element
		next

	End Sub

	'@ execute the handler functions
	Public Sub fire ( args )

		'@ run the handlers stored in local array one by one
		for each refHandler in arrHandlers_
			refHandler args
		next

	End Sub

End Class



'@                                      E V E N T   H A N D L I N G


'@   E r r o r   H a n d l e r   c h e c k I f E m p t y

'@ check if any of the current recordset fields are empty
Sub checkIfEmpty ( objCaller )

	for each objField in objCaller.object.fields
		if objField.value = "" Then
			on error resume next                                             '@ switch off WSH error handling (custom error handling will be used)
			err.raise 1, , "the required field "& objField.name &" is empty" '@ raise a user error if empty field found
		end if
	next

End Sub


'@   E r r o r   H a n d l e r   Q u i t S c r i p t O n E r r o r

'@ quit the script in case an error was raised (either in one of the user defined objects, or in handler functions, that are meant to be checkpoints)
Sub quitScriptOnError ( objCaller )

	if err.number <> 0 then : wscript.quit

End Sub


'@   L o g   H a n d l e r   l o g C a l le r P r op e r t i e s A s A p p l i ca t i o n E v e n t

'@ log caller properties to Application Events log
Sub logCallerPropertiesAsApplicationEvent ( objCaller )

	const EVNT_TYPE = 2                                       '@ warning type of an event
	set dictProperties = objCaller.properties
	strMsg = TypeName ( objCaller ) & vbNewLine
	'@ get caller property names and their current values
	for each strProperty in dictProperties.keys
		strMsg = strMsg & vbNewLine & strProperty &": "& dictProperties.Item ( strProperty )
	next
	createobject ("WScript.Shell").LogEvent EVNT_TYPE, strMsg '@ send the message to Application Events log

End Sub


'@   L o g   H a n d l er   l o g E r r o r A s A p p l i c a t i o n E v e n t

'@ log err object details to Application Events log
Sub logErrorAsApplicationEvent ( objCaller )

	const EVNT_TYPE = 2                                                                                            '@ warning type of an event
	if err.number = 0 then : exit sub                                                                              '@ check if there is a raised error, if not - exit procedure
	strMsg = TypeName ( objCaller ) & vbNewLine & objCaller.properties () ("method") & vbNewLine & err.description '@ create the message to be logged
	createobject ("WScript.Shell").LogEvent EVNT_TYPE, strMsg                                                      '@ send the message to Application Events log

End Sub


'@   L o g   H a n d l er

'@ log methods to txt
Sub logMethodToTxt (objCaller)

	const READ = 1, WRITE = 2, APPEND = 8
	
	set fso = createobject ("scripting.filesystemobject")
	set file = fso.OpenTextFile (fso.buildPath (createobject ("wscript.shell").CurrentDirectory, createObject ("WScript.Network").ComputerName &"-"& wscript.scriptname &".html"), APPEND, true)

	if err.number <> 0 then : file.writeline " <table><tr class='err'>"& err.description  &"</tr></table>"
	
	file.writeline "<table>"
	file.writeline "<tr>"
	file.write "<td class='date'>" : file.write now : file.write "</td>"
	file.write "<td class='class'>" : file.write typeName (objCaller) : file.write "</td>"
	file.write "<td class='method'>" : file.write objCaller.properties () ("method") : file.write "</td>"
	file.write "<td class='content'>" : file.write replace (objCaller.properties () (objCaller.properties () ("method")), vbNewLine, "<br />")  : file.write "</td>"
	file.writeline "</tr>"
	file.writeline "</table>"
	file.writeline "<link rel='stylesheet' type='text/css' href='mystyle.css' />"
	
End Sub



'@-------------------------------------------------------------
'@2

'  I N F O
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'
'	FRIENDS LIFE DORKING TEST AUTOMATION TEAM
'	11/05/2011











'	S C R I P T																			
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'@   G e t   f r a m e w o r k   c o r e   p a r a m e t e r s

	Set rsProjectParameters = new clsRecordSet '@ initialize an RS object from a user-defined class
	'@ add an array of function references (handlers in Event Handling section) to objects' event objects (events)
	'@ each event object is a collection of function refferences with an ability to be executed (fired)
	rsProjectParameters.onAddRecord.addHandler array ("logEventToHtml", _
										"quitScriptOnError")
	rsProjectParameters.onAddRecord.addHandler array ("raiseErrorForEmptyFieldValue", _
										"logEventToHtml", _
										"quitScriptOnError")

	rsProjectParameters.addFields array ("HOST_NAME", _
								"PROJECT_ROOT_PATH", _
                                "PROJECT_DB_NAME")
	rsProjectParameters.open ""
	'@ add first record to recordset (values to headers) (number of values has to match the number of headers as there is a direct relation between them)

	rsProjectParameters.addRecord rsProjectParameters.listHeaders, array (createObject ("WScript.Network").ComputerName, _
													createObject ("WScript.Shell").Environment ("USER") ("AF_PROJECT_ROOT_PATH"), _
                                                    createObject ("WScript.Shell").Environment ("USER") ("PROJECT_DB_NAME"))



'@   C o m b i n e   p a t h   l o g i c   i n t o   l a y o u t   r e c o r d s e t

	set rsProjectLayout = new clsRecordSet
	rsProjectLayout.onAddFields.addHandler array ("logEventToHtml")
	rsProjectLayout.onAddRecord.addHandler array ("logEventToHtml", _
										"quitScriptOnError")
	rsProjectLayout.onUpdateField.addHandler array ("logEventToHtml")

	'@ create recordset headers, and empty record
	rsProjectLayout.addFields array ("PROJECT_DATABASE_PATH", _
							"PROJECT_TEST_ENVIRONMENT_SPEC_PATH", _
							"PROJECT_SOURCE_WORKSPACE_PATH", _
							"PROJECT_BUILD_WORKSPACE_PATH", _
							"SOURCE_BASELINE_PATH", _
							"BUILD_BASELINE_PATH", _
							"ACTION_VAULT_BASELINE_PATH", _
							"INPUT_DATABASE_BASELINE_PATH", _
							"TEST_TEMPLATE_BASELINE_PATH", _
							"TEST_TEMPLATE_SHARED_REPOSITORY_VAULT_PATH", _
							"TEST_TEMPLATE_FUNCTION_LIBRARY_VAULT_PATH", _
							"TEST_TEMPLATE_RECOVERY_SCENARIO_VAULT_PATH", _
							"TEST_VAULT_BASELINE_PATH", _
							"TEST_NAME",_
							"TEST_PATH",_
							"TEST_SHARED_REPOSITORY_VAULT_PATH", _
							"TEST_FUNCTION_LIBRARY_VAULT_PATH", _
							"TEST_RECOVERY_SCENARIO_VAULT_PATH")
	rsProjectLayout.open ""
	rsProjectLayout.addRecord rsProjectLayout.listHeaders, array ("", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"")

	set fs = new clsFileSystem
	fs.onDeleteFolder.addHandler array ("logEventToHtml", _
								"quitOnPermissionDeniedError")
	fs.onCreateFolder.addHandler array ("logEventToHtml", _
								"quitScriptOnError")
	fs.onCopyFile.addHandler array ("logEventToHtml")

	rsProjectLayout.updateField "PROJECT_DATABASE_PATH", fs.object.buildPath (rsProjectParameters.object ("PROJECT_ROOT_PATH").value, _
                                rsProjectParameters.object ("PROJECT_DB_NAME").value)



'@   R e t r i e v e   t e s t   d e f i n i t i o n   r e c o r d s   f r o m   p r o j e c t   d a t a b a s e

	set rsTestDefinition = new clsRecordSet
	rsTestDefinition.onConnect.addHandler array ("logEventToHtml", _
									"quitScriptOnError")
	rsTestDefinition.onOpen.addHandler array ("logEventToHtml", _
									"quitScriptOnError")
	rsTestDefinition.onOpen.addHandler array ("raiseErrorForEmptyRecordset", _
									"quitScriptOnError")
	rsTestDefinition.onOpen.addHandler array ("updateTestDefinitionRecordStatus")
	rsTestDefinition.onupdateField.addHandler array ("logEventToHtml", _
										"quitScriptOnError")

	'@ connect to scheduler and get a recordset with the first record that matches the conditional statement
	rsTestDefinition.connect rsProjectLayout.object ("PROJECT_DATABASE_PATH").value
	rsTestDefinition.open "SELECT STATUS, "+_
						"ENVIRONMENT, "+_
						"RELEASE, "+_
						"CASE, "+_
						"SCENARIO, "+_
						"SHARED_DATA, "+_
						"HOST, "+_
						"ITERATIONS "+_
					"FROM B_DEFINITIONS "+_
					"WHERE HOST='"& rsProjectParameters.object ("HOST_NAME").value &"' "+_
						"AND STATUS='generate';"


while not rsTestDefinition.object.eof '@ iterate for each returned record


'@   C o n s t r  u c t   p r o j e c t   w o r k s p a c e   p a t h   m a p

	rsProjectLayout.updateField "PROJECT_TEST_ENVIRONMENT_SPEC_PATH", fs.object.buildPath (rsProjectParameters.object ("PROJECT_ROOT_PATH").value, "environment.xml")

	rsProjectLayout.updateField "PROJECT_SOURCE_WORKSPACE_PATH", fs.object.buildPath (rsProjectParameters.object ("PROJECT_ROOT_PATH").value, "source")
	rsProjectLayout.updateField "SOURCE_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("PROJECT_SOURCE_WORKSPACE_PATH"), rsTestDefinition.object ("RELEASE").value)
	rsProjectLayout.updateField "ACTION_VAULT_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("SOURCE_BASELINE_PATH").value, "actions")
	rsProjectLayout.updateField "TEST_TEMPLATE_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("SOURCE_BASELINE_PATH").value, "template")
	rsProjectLayout.updateField "TEST_TEMPLATE_SHARED_REPOSITORY_VAULT_PATH", fs.object.buildPath (rsProjectLayout.object ("TEST_TEMPLATE_BASELINE_PATH").value, "Shared Repositories")
	rsProjectLayout.updateField "TEST_TEMPLATE_FUNCTION_LIBRARY_VAULT_PATH", fs.object.buildPath (rsProjectLayout.object ("TEST_TEMPLATE_BASELINE_PATH").value, "Function Libraries")
	rsProjectLayout.updateField "TEST_TEMPLATE_RECOVERY_SCENARIO_VAULT_PATH", fs.object.buildPath (rsProjectLayout.object ("TEST_TEMPLATE_BASELINE_PATH").value, "Recovery Scenarios")
	rsProjectLayout.updateField "INPUT_DATABASE_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("SOURCE_BASELINE_PATH").value, "input.mdb")

	rsProjectLayout.updateField "PROJECT_BUILD_WORKSPACE_PATH", fs.object.buildPath (rsProjectParameters.object ("PROJECT_ROOT_PATH").value, "build")
	rsProjectLayout.updateField "BUILD_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("PROJECT_BUILD_WORKSPACE_PATH").value, rsTestDefinition.object ("RELEASE").value)
	rsProjectLayout.updateField "TEST_VAULT_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("BUILD_BASELINE_PATH").value, "tests")
	rsProjectLayout.updateField "TEST_NAME", replace (rsTestDefinition.object ("ENVIRONMENT").value, "\", ".") &_
									"-"& rsTestDefinition.object ("CASE").value &"."& rsTestDefinition.object ("SCENARIO").value &"-"& rsTestDefinition.object ("ITERATIONS").value
	rsProjectLayout.updateField "TEST_PATH", fs.object.buildPath (rsProjectLayout.object ("TEST_VAULT_BASELINE_PATH").value, rsProjectLayout.object ("TEST_NAME").value)
	rsProjectLayout.updateField "TEST_SHARED_REPOSITORY_VAULT_PATH", fs.object.buildPath (rsProjectLayout.object ("TEST_PATH").value, "Shared Repositories")
	rsProjectLayout.updateField "TEST_FUNCTION_LIBRARY_VAULT_PATH", fs.object.buildPath (rsProjectLayout.object ("TEST_PATH").value, "Function Libraries")
	rsProjectLayout.updateField "TEST_RECOVERY_SCENARIO_VAULT_PATH", fs.object.buildPath (rsProjectLayout.object ("TEST_PATH").value, "Recovery Scenarios")

	fs.deleteFolder rsProjectLayout.object ("TEST_PATH").value


'@   C h e c k   T e s t   S c e n a r i o   r e c o r d s e t 
	'@Check all keywords in TC table are present by retrieving all the orphan records from the keywords table

	set rsScenarioCheck = new clsRecordSet
	rsScenarioCheck.onConnect.addHandler array ("logEventToHtml", _
								"quitScriptOnError")
	rsScenarioCheck.onOpen.addHandler array ("logEventToHtml", _
								"quitScriptOnError", _
								"raiseErrorForAnyRecords", _
								"logEventToHtml", _
								"quitScriptOnError")

	rsScenarioCheck.connect rsProjectLayout.object ("PROJECT_DATABASE_PATH").value '@ connect to scheduler with a different object

	rsScenarioCheck.open "SELECT " & rsTestDefinition.object ("CASE").value & "." & rsTestDefinition.object ("SCENARIO").value & _
					" FROM " & rsTestDefinition.object ("CASE").value &_ 
					" WHERE " & rsTestDefinition.object ("CASE").value &"." & rsTestDefinition.object ("SCENARIO").value & _
					" NOT IN ( SELECT " & rsTestDefinition.object ("CASE").value & "_components.keyword FROM " & rsTestDefinition.object ("CASE").value &"_components)"



'@   R e t r i e v e   t e s t   s c e n a r i o   r e c o r d s e t

	set rsScenarios = new clsRecordSet
	rsScenarios.onConnect.addHandler array ("logEventToHtml", _
								"quitScriptOnError")
	rsScenarios.onOpen.addHandler array ("logEventToHtml", _
								"quitScriptOnError", _
								"raiseErrorForEmptyRecordset", _
								"logEventToHtml", _
								"quitScriptOnError")

	rsScenarios.connect rsProjectLayout.object ("PROJECT_DATABASE_PATH").value '@ connect to scheduler with a different object

	'@ get a recordset with the scheduled scenario workflow
	rsScenarios.open "SELECT "& rsTestDefinition.object ("CASE").value &"."& rsTestDefinition.object ("SCENARIO").value &", "& rsTestDefinition.object ("CASE").value &"_components.*" &_
					"FROM "& rsTestDefinition.object ("CASE").value &"_components "&_
					"INNER JOIN "& rsTestDefinition.object ("CASE").value &_
					" ON "& rsTestDefinition.object ("CASE").value &"_components.keyword = "& rsTestDefinition.object ("CASE").value &"."& rsTestDefinition.object ("SCENARIO").value &_
					" ORDER BY "& rsTestDefinition.object ("CASE").value &"."& "id;"
	'@ "select test, action, data from components where keyword in (select "& rsTestDefinition.object ("SCENARIO").value &" from "& rsTestDefinition.object ("TESTSET").value &");"



'@   L o a d   t e s t   e n v i r o n m e n t   c o n f i g u r a t i o n   x m l   n o d e

	set xmlEnvironment = new clsXmlDom 
	xmlEnvironment.onOpen.addHandler array ("logEventToHtml", _
									"quitScriptOnError")
	xmlEnvironment.onSetElement.addHandler array ("logEventToHtml", _
										"quitScriptOnError")

	xmlEnvironment.open rsProjectLayout.object ("PROJECT_TEST_ENVIRONMENT_SPEC_PATH").value '@ load environment config xml into initiated object
	xmlEnvironment.setElement rsTestDefinition.object ("ENVIRONMENT").value '@ find specified subset of the environment config xml


'@   L a u n c h   Q T P

	set qtApp = new clsQuickTestApplication
	qtApp.onOpen.addHandler array ("logEventToHtml", _
							"quitScriptOnError")
	qtApp.onOpenTest.addHandler array ("logEventToHtml")
	qtApp.onAddCodeToAction.addHandler array ("logEventToHtml")
	qtApp.onGenerateEnvironmentConfigurationCode.addHandler array ("logEventToHtml")
	qtApp.onGenerateWorkflowExecutionCode.addHandler array ("logEventToHtml")
	qtApp.onImportSheet.addHandler array ("logEventToHtml")
	qtApp.onSaveTest.addHandler array ("logEventToHtml")
    'qtApp.onGetAction.addHandler array ("raiseErrorForMissingAction", _
     '                                   "logEventToHtml", _
      '                                  "quitScriptOnError")
    '@It takes a long time to log all the actions individually that may or may not be present, it is currently commented out
    'qtApp.onGetAction.addHandler array ("quitScriptOnError")
    '@But if there is an issue, it can be put back in by commenting the line above and uncommenting the lines below
    qtApp.onGetAction.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")

	qtApp.close : qtApp.open '@ RE-open QTP



'@   R e t r i e v e   A T A A   c o d e


arrTestActions = rsScenarios.object.getRows (,, array ("test", "action"))

set dictTestActions = createObject ("scripting.dictionary")

for idxTest = 0 to uBound (arrTestActions, 2)
      if not dictTestActions.exists (arrTestActions (0, idxTest)) then : dictTestActions.add arrTestActions (0, idxTest), createObject ("scripting.dictionary")
      dictTestActions.item (arrTestActions (0, idxTest)).add cstr (idxTest), arrTestActions (1, idxTest)
next

reDim arrScripts (UBound (arrTestActions, 2))

for each strTest in dictTestActions.keys
    qtApp.opentest fs.object.buildPath (rsProjectLayout.object ("ACTION_VAULT_BASELINE_PATH").value, strTest)
    for each strActionIndex in dictTestActions.item (strTest).keys
        '@Log action name we are looking for
        arrScripts (cint (strActionIndex)) = qtApp.getAction( strTest, strActionIndex )
        'arrScripts (cint (strActionIndex)) = qtApp.object.Test.Actions.Item (dictTestActions.item (strTest).item (strActionIndex)).getScript
    next
next


	'ReDim arrScripts (-1)
	'while not rsScenarios.object.EOF
	'	qtApp.opentest fs.object.buildPath (rsProjectLayout.object ("ACTION_VAULT_BASELINE_PATH").value, rsScenarios.object ("TEST").value)
	'	ReDim Preserve arrScripts (UBound (arrScripts) +1)
	'	arrScripts (UBound (arrScripts)) = qtApp.object.Test.Actions.Item (rsScenarios.object ("ACTION").value).getScript
	'	rsScenarios.object.movenext
	'wend

	rsScenarios.object.moveFirst


'@   G e n e r a t e   a u t o m a t e d   t e s t

	'@ Recreate project build workspace in case it does not exist
	if not fs.object.folderExists (rsProjectLayout.object ("PROJECT_BUILD_WORKSPACE_PATH").value) then : fs.createFolder (rsProjectLayout.object ("PROJECT_BUILD_WORKSPACE_PATH").value)
	if not fs.object.folderExists (rsProjectLayout.object ("BUILD_BASELINE_PATH").value) then : fs.createFolder (rsProjectLayout.object ("BUILD_BASELINE_PATH").value)
	if not fs.object.folderExists (rsProjectLayout.object ("TEST_VAULT_BASELINE_PATH").value) then : fs.createFolder (rsProjectLayout.object ("TEST_VAULT_BASELINE_PATH").value)


	'@ Open project test template and save as a new test under required build baseline
	'@Check it is not read only by performing an operation that errors for read only tests
	'@You cannot save the test down as a new test immediately and still reset the actionparameterdefinitions below
	'@I do not know why, but it just doesn't work. You're welcome to try
    blnReadOnly = true
	intCount = 0
	Do while blnReadOnly
		qtApp.openTest rsProjectLayout.object ("TEST_TEMPLATE_BASELINE_PATH").value	
		on error resume next
		qtApp.object.test.actions.item ("c_workflow").objectRepositories.removeAll
		If Err.Number = 0 Then
			blnReadOnly = false
		Else
			WScript.Sleep (10000)
		End If
		intCount = intCount + 1
		If intCount = 100 Then
			msgBox("Template opened read only 100 times")
			WScript.quit
		End If
	Loop

	'@ Set shared data and iteration parameters
    	If isNull (rsTestDefinition.object ("SHARED_DATA").value) then : rsTestDefinition.object ("SHARED_DATA").value = ""
	qtApp.object.test.actions.item ("b_prerequisites").actionparameterdefinitions.item ("SharedDataPath").DefaultValue = fs.object.buildPath (rsProjectLayout.object ("TEST_VAULT_BASELINE_PATH").value, "shared.mdb")
	qtApp.object.test.actions.item ("d_postrequisites").actionparameterdefinitions.item ("SharedDataPath").DefaultValue = fs.object.buildPath (rsProjectLayout.object ("TEST_VAULT_BASELINE_PATH").value, "shared.mdb")
	qtApp.object.test.actions.item ("b_prerequisites").actionparameterdefinitions.item ("SharedData").DefaultValue = rsTestDefinition.object ("SHARED_DATA").value
	qtApp.object.test.actions.item ("b_prerequisites").actionparameterdefinitions.item ("Iterations").DefaultValue = rsTestDefinition.object ("ITERATIONS").value

	qtApp.object.test.actions.item ("c_workflow").objectRepositories.removeAll

    '@Save again
	qtApp.saveTest rsProjectLayout.object ("TEST_PATH").value
	if not fs.object.folderExists (rsProjectLayout.object ("TEST_SHARED_REPOSITORY_VAULT_PATH").value) then : fs.createFolder (rsProjectLayout.object ("TEST_SHARED_REPOSITORY_VAULT_PATH").value)
	fs.object.copyFolder rsProjectLayout.object ("TEST_TEMPLATE_FUNCTION_LIBRARY_VAULT_PATH").value, rsProjectLayout.object ("TEST_FUNCTION_LIBRARY_VAULT_PATH").value, true
	fs.object.copyFolder rsProjectLayout.object ("TEST_TEMPLATE_RECOVERY_SCENARIO_VAULT_PATH").value, rsProjectLayout.object ("TEST_RECOVERY_SCENARIO_VAULT_PATH").value, true

	'@ Add test environment initialization code
	qtApp.addCodeToAction 1, qtApp.generateEnvironmentConfigurationCode (xmlEnvironment.activeElement) '@ generate QTP code from supplied xml node and add it to action

	'@ Generate test iteration data rows (Global sheet)
	qtApp.object.test.dataTable.globalSheet.addParameter "ITERATION", ""
	for idx = 1 to rsTestDefinition.object ("ITERATIONS").value
		qtApp.object.test.datatable.globalSheet.setCurrentRow idx
		qtApp.object.test.datatable.value ("ITERATION") = idx
	next
	'@ Create a recorset to retrieve test data for each action mentioned in test scenario
	set rsTestData = new clsRecordSet
	rsTestData.onConnect.addHandler array ("logEventToHtml", _
								"quitScriptOnError")
	rsTestData.onOpen.addHandler array ("logEventToHtml", _
								"quitScriptOnError")
	rsTestData.onExport.addHandler array ("logEventToHtml", _
								"quitScriptOnError")

	rsTestData.connect rsProjectLayout.object ("INPUT_DATABASE_BASELINE_PATH").value
	'@ Add action workflow to test
	idx = 1
	while not rsScenarios.object.EOF
		set objNewAction = qtApp.object.Test.Actions.Item("c_workflow").AddNewAction (idx &"_"& rsScenarios.object ("ACTION").value, "description", arrScripts (idx -1), true, 2)

		fs.copyFile fs.object.buildPath (rsProjectLayout.object ("TEST_TEMPLATE_SHARED_REPOSITORY_VAULT_PATH").value, "rep"& rsScenarios.object ("TEST").value &".tsr"), fs.object.buildPath (rsProjectLayout.object ("TEST_SHARED_REPOSITORY_VAULT_PATH").value, "rep"& rsScenarios.object ("TEST").value &".tsr")

		if fs.object.fileExists (fs.object.buildPath (rsProjectLayout.object ("TEST_SHARED_REPOSITORY_VAULT_PATH").value, "rep"& rsScenarios.object ("TEST").value &".tsr")) then : _
			objNewAction.objectRepositories.Add "Shared Repositories\rep"& rsScenarios.object ("TEST").value &".tsr"

		if isNull (rsScenarios.object ("REPORTS").value) then : rsScenarios.object ("REPORTS").value = ""
		if isNull (rsScenarios.object ("SHARED_DATA").value) then : rsScenarios.object ("SHARED_DATA").value = ""
		objNewAction.ActionParameterDefinitions.add "Reports", "define which report functions will be executed", 0, 0, rsScenarios.object ("REPORTS").value
		objNewAction.ActionParameterDefinitions.add "SharedData", "specify runtime sql to retrieve shared test data", 0, 0, rsScenarios.object ("SHARED_DATA").value
		str = qtApp.object.Test.Actions.Item("c_workflow").getScript

		if not rsScenarios.object ("INPUT_DATA").value = empty then
			rsTestData.open  rsScenarios.object ("INPUT_DATA").value
			if rsScenarios.object ("ITERATION_MODE").value = "TEST" then : rt = rsTestDefinition.object ("ITERATIONS").value
			if rsScenarios.object ("ITERATION_MODE").value = "ACTION" then : rt = rsTestData.object.recordCount : qtApp.object.Test.Actions.Item("c_workflow").setScript strReverse (replace (strReverse (str), "noitaretIeno", "snoitaretIlla", 1, 1))
			rsTestData.export  rt, fs.object.buildPath (rsProjectLayout.object ("TEST_PATH").value, rsScenarios.object ("ACTION") &" ["&  rsScenarios.object ("TEST")  &"].csv")
			qtApp.importSheet idx &"_"& rsScenarios.object ("ACTION"), fs.object.buildPath (qtApp.object.test.environment.value ("TestDir"), rsScenarios.object ("ACTION") &" ["&  rsScenarios.object ("TEST")  &"].csv")
			rsTestData.object.close
		end if
		rsScenarios.object.movenext

		idx = idx+1
	wend

	qtApp.object.test.save
	rsTestDefinition.updateField "STATUS", now
	qtApp.close

	rsTestDefinition.object.movenext
wend










'	U S E R - D E F I N E D   C L A S S E S													
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'@   C o n n e c t e d   R e c o r d s e t   C l a s s   c l s R e c o r d S e t

Class clsRecordSet

    '@ declare variables that will be accessed from the global script
    Public object, onConnect, onOpen, onupdateField, onAddRecord, onExport, onAddFields
    
    '@ declare variables that will only be used within the class
    Private strCurrentMethod_, arrHeaders_, strConnect_, strOpen_, strupdateField_, strAddRecord_, strExport_, strAddFields_
    
    '@ this function runs each time object is initialized from this class
    Private Sub Class_Initialize ()
        set object =  createObject ("ADODB.RecordSet") '@ create an object that will be an interface to Recordset class of ADODB library (COM)
        '@ create event objects (each event object is a collection of function refferences with an ability to be executed (fired))
        set onConnect = new clsHandlers
        set onOpen = new clsHandlers
        set onupdateField = new clsHandlers
        set onAddRecord = new clsHandlers
        set onExport = new clsHandlers
        set onAddFields = new clsHandlers
    End Sub
    
    '@ this function runs each time the object  is released
    Private Sub Class_Terminate ()
        on error resume next '@ switch off the WSH error handling (in case when the object is released before the connection to DB is made)
        object.close         '@ close a recordset
    End Sub
    
    '@ a class property, that collects most important object properties and class variables into one object - for logging
    Public Property Get properties ()
        set dictProperties = createObject ("scripting.dictionary")
        dictProperties.add "method", strCurrentMethod_
        dictProperties.add "connect", strConnect_
        dictProperties.add "open", strOpen_
        dictProperties.add "updateField", strupdateField_
        dictProperties.add "addRecord", strAddRecord_
        dictProperties.add "export", strExport_
        dictProperties.add "addFields", strAddFields_
        set properties = dictProperties
    End Property
    
    '@ set recordset connection to DB
    Public Sub connect (strDataBaseFullPath)
        strCurrentMethod_ = "connect" '@ note the method that will be executed - for logging
        strConnect_ = strDataBaseFullPath
        on error resume next '@ switch off WSH error handling (custom error handling will be used)
		object.ActiveConnection = "Provider = Microsoft.Jet.OLEDB.4.0; Data Source = "& strDataBaseFullPath '@ set DB connection string, that automatically creates the connection object
		onConnect.fire Me '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End sub

    '@ open a recordset by executing an sql query
    Public Sub open (strSql)
        strCurrentMethod_ = "open" '@ note the method that will be executed - for logging
        strOpen_ = strSql
        on error resume next '@ switch off WSH error handling (custom error handling will be used)
            '@ set recordset parameters before openning it (these parameters are properties of ADODB Recordset class and can be found in MSDN for reference)
            object.cursorType = 3 '@ a static cursor allowing forward and backward scrolling of a fixed, unchangeable set of records
            object.lockType = 3 '@ multiple users can modify the data which is not locked until updateField method is called
            object.open strSql '@ return (open) a recordset by executing SQL
            onOpen.fire Me '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End Sub
    
    '@ updateField a recordset field with new value
    Public Sub updateField (strField, strNewValue)
        strCurrentMethod_ = "updateField"
        strupdateField_ = strField & vbNewLine & strNewValue
        on error resume next
            object (strField) = strNewValue '@ assign new value to a field
            object.update '@ updateField a recordset (save)
            onupdateField.fire Me
    End Sub
    
    '@ add a new record of values to recordset
    Public Sub addRecord (arrHeaders, arrValues)
        strCurrentMethod_ = "addRecord"
        on error resume next
            strAddRecord_ = join (arrHeaders, vbNewLine) & vbNewLine & vbNewLine & join (arrValues, vbNewLine)
            object.AddNew arrHeaders, arrValues '@ add a new record of values to a pre-set array of recordset fields
            onAddRecord.fire Me
    End Sub

    public sub export (intIterations, strFilePath)
        strCurrentMethod_ = "export"
        strExport_ = intIterations & vbNewLine & strFilePath
        set myFile = createObject ("scripting.FileSystemObject").createTextFile (strFilePath)
        myFile.WriteLine join (listHeaders, vbTab)
        a = intIterations \ object.recordCount
        b = intIterations mod object.recordCount
        for i = 1 to a
            myFile.Write object.getString (2,, vbTab,, "")
            object.moveFirst
        next
        if b <> 0 then : myFile.WriteLine object.getString (2, b, vbTab,, "")
        myFile.Close
        onExport.fire me
    end sub

    public function listHeaders ()
        ReDim arrHeaders (-1)
        for each field in object.fields
            Redim Preserve arrHeaders (UBound (arrHeaders) +1)
            arrHeaders (UBound(arrHeaders)) = field.name
        next
        listHeaders = arrHeaders
    end function

    public function listValues ()
        ReDim arrValues (-1)
        for each fld in object.Fields
            ReDim preserve arrValues (UBound (arrValues) +1)
            arrValues (UBound (arrValues)) = fld.value
        next
    listValues = arrValues
    end function

    '@ set up a disconnected recordset with array of fields and pre-set (constant) field parameters
    public Sub addFields (arrHeaders)
        strCurrentMethod_ = "addFields"
        strAddFields_ = arrHeaders '@ note the array of recordset headers as an internal variable
        const FIELD_TYPE = 200 '@ numeric value for a recordset field (string type)
        const MAX_CHAR = 1024 '@ recordset field size
        on error resume next
            '@ add fields to recordset with pre-set parameters
            For Each strHeader in arrHeaders
                object.fields.append strHeader, FIELD_TYPE, MAX_CHAR
            Next
            onAddFields.fire Me
    end Sub

End Class


'@   X m l   C l a s s   c l s X m l D o m

Class clsXmlDom

	'@ declare variables that will be accessed from the global script
	Public object, activeElement, onSetElement, onOpen

	'@ declare variables that will only be used within the class
	Private strCurrentMethod_, strOpen_, strSetElement_

	'@ this function runs each time object is initialized from this class
	Private Sub Class_Initialize ()
		set object = createobject ("Microsoft.XMLDOM") '@ create an object that will be an interface to XMLDOM class of Microsoft library (COM)
		set onOpen = new clsHandlers 		'@ create event objects (each event object is a collection of function refferences with an ability to be executed (fired))
		set onSetElement = new clsHandlers 		'@ create event objects (each event object is a collection of function refferences with an ability to be executed (fired))
	End Sub

	'@ a class property, that collects most important object properties and class variables into one object - for logging
	Public Property Get properties ()
		set dictProperties = createObject ("scripting.dictionary")
		dictProperties.add "method", strCurrentMethod_
		dictProperties.add "open", strOpen_
		dictProperties.add "setElement", strSetElement_
		set properties = dictProperties
	End Property

	'@ follow the specified sequence of tags (array) and set activeElement property to the last found (no parent tag needed)
	Public Sub setElement ( strTagPath )
		strCurrentMethod_ = "setElement"         '@ note the method that will be executed - for logging
		strSetElement_ = strTagPath
		on error resume next                  '@ switch off WSH error handling (custom error handling will be used)
		arrTagPath = split (strTagPath, "\")
		set activeElement = object.FirstChild '@ set the parent tag as it is not the part of the path
		for each strTag in arrTagPath '@ iterate through the array path of tag names and re-set activeElement property with each new found
			set activeElement = activeElement.GetElementsByTagName ( strTag ).item (0)
		next
		onSetElement.fire Me                  '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
	End Sub

	'@ load an XML file into an XMLDOM object
	Public Sub open ( strFilePath )
		strCurrentMethod_ = "open" '@ note the method that will be executed - for logging
		strOpen_ = strFilePath
		on error resume next       '@ switch off WSH error handling (custom error handling will be used)
		object.async = false       '@ means that the data load must be completed before the caller gets the control back
		object.load strFilePath    '@ load an xml file
		onOpen.fire Me             '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
	End Sub

End Class


'@   Q t p   C l a s s   c l s Q u i c k T e st A p p l i c a t i o n

Class clsQuickTestApplication

	'@ declare variables that will be accessed from the global script
	Public object, onAddCodeToAction, onOpen, onConnect, onRun, onSetFolders, onGenerateEnvironmentConfigurationCode, onGenerateWorkflowExecutionCode, onOpenTest, onSaveTest, onImportSheet, onGetAction

	'@ declare variables that will only be used within the class
	Private strCurrentMethod_, strConnect_, strAddCodeToAction_, strSetFolders_, strGenerateEnvironmentConfigurationCode_, strOpenTest_, strSaveTest_, strImportSheet_, strGetAction_

	'@ this function runs each time object is initialized from this class
	Private Sub Class_Initialize ()
		'@ create event objects (each event object is a collection of function refferences with an ability to be executed (fired))
		set onAddCodeToAction = new clsHandlers
		set onOpen = new clsHandlers
		set onConnect = new clsHandlers
		set onRun = new clsHandlers
		set onSetFolders = new clsHandlers
		set onGenerateEnvironmentConfigurationCode = new clsHandlers
		set onGenerateWorkflowExecutionCode = new clsHandlers
		set onOpenTest = new clsHandlers
		set onSaveTest = new clsHandlers
		set onImportSheet = new clsHandlers
        Set onGetAction = new clsHandlers
	End Sub

	'@ a class property, that collects most important object properties and class variables into one object - for logging
	Public Property Get properties ()
		set dictProperties = createObject ("scripting.dictionary")
		dictProperties.add "method", strCurrentMethod_
		dictProperties.add "open", strOpen_
		dictProperties.add "connect", strConnect_
		dictProperties.add "setFolders", strSetFolders_
		dictProperties.add "addCodeToAction", strAddCodeToAction_
		dictproperties.add "generateEnvironmentConfigurationCode", strGenerateEnvironmentConfigurationCode_
		dictProperties.add "openTest", strOpenTest_
		dictProperties.add "saveTest", strSaveTest_
		dictProperties.add "importSheet", strImportSheet_
        dictProperties.add "getAction", strGetAction_
		set properties = dictProperties
	End Property

	'@ launch QTP
	Public Sub open ()
		strCurrentMethod_ = "open"                          '@ note the method that will be executed - for logging
		on error resume next                                '@ switch off WSH error handling (custom error handling will be used)
		set object = createObject ("QuickTest.Application") '@ create an object that will be an interface to Application class of QuickTest library (COM)
		object.Launch                                       '@ launch application
		object.Visible = TRUE                               '@ make application UI visible
		onOpen.fire Me                                      '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
	End Sub

	'@ force close QTP
	Public Sub close ()
		strCurrentMethod_ = "close"
		on error resume next '@ switch off WSH error handling (custom error handling will be used)
		object.quit          '@ quit application
		wscript.sleep 2000   '@ allow 2 seconds before checking if application is closed
		'@ kill all qtp related processes if they are still in the process list
		for each objProcess in getObject ("winmgmts:").InstancesOf ("Win32_process")
			if objProcess.name = "QTPro.exe" or objProcess.name = "QTReport.exe" then : objProcess.terminate
		next
	End Sub

	'@ initiate a connection between QTP and QC
	Public Sub connect (strUrl, strDomain, strProject, strUserName, strPassword, blnEncrypted)
		strCurrentMethod_ = "connect"                                                                     '@ note the method that will be executed - for logging
		strConnect_ = strUrl & vbNewLine & strDomain & vbNewLine &  strProject & vbNewLine &  strUserName & vbNewLine &  strPassword & vbNewLine &  blnEncrypted
		on error resume next                                                                              '@ switch off WSH error handling (custom error handling will be used)
		if object.TDConnection.IsConnected then : object.TDConnection.disconnect
		object.TDConnection.connect strUrl, strDomain, strProject, strUserName, strPassword, blnEncrypted '@ connect to QC project
		onConnect.fire Me                                                                                 '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
	End Sub

	'@ add any string to an action by action index
	Public Sub addCodeToAction ( intActionIndex, strCode )
		strCurrentMethod_ = "addCodeToAction"                   '@ note the method that will be executed - for logging
		strAddCodeToAction_ =  intActionIndex & vbNewLine & strCode
		on error resume next                                    '@ switch off WSH error handling (custom error handling will be used)
		object.Test.Actions( intActionIndex ).setScript object.Test.Actions( intActionIndex ).getScript & vbNewLine & strCode '@ set code to action
		onAddCodeToAction.fire Me                               '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
	End Sub

	'@ add an array of lookup folders to QTP options
	Public Sub setFolders ( arrFolderPaths )
		strCurrentMethod_ = "setFolders"                   '@ note the method that will be executed - for logging
		strSetFolders_ = join(arrFolderPaths, vbNewLine)
		on error resume next     '@ switch off WSH error handling (custom error handling will be used)
		object.folders.removeAll '@ clear pre-set folder list
		'@ add folder paths to the list one by one
		for each strPath in arrFolderPaths
			object.folders.add( strPath )
		next
		onSetFolders.fire Me
	End Sub

	'@ combine data received from environment xml with QTP statements to get an Environment variable setup code
	Public Function generateEnvironmentConfigurationCode ( objEnvironmentSettingsNode )
		strCurrentMethod_ = "generateEnvironmentConfigurationCode"                   '@ note the method that will be executed - for logging
		strGenerateEnvironmentConfigurationCode_ = objEnvironmentSettingsNode.nodeName
		generateEnvironmentConfigurationCode = ""      '@ return an empty string on error
		on error resume next                           '@ switch off WSH error handling (custom error handling will be used)
		'@ add a new line of code for each child node
		for each xmlEnvSetting in objEnvironmentSettingsNode.ChildNodes
			strCode = strCode &"Environment.Value ( "& Chr(34) & xmlEnvSetting.nodeName & Chr(34) &" ) = "& Chr(34) & xmlEnvSetting.text & Chr(34) & vbNewLine
		next
		generateEnvironmentConfigurationCode = strCode '@ pass the result back to caller
		onGenerateEnvironmentConfigurationCode.fire Me
	End Function


	Public Function generateWorkflowExecutionCode ( objScenarioRecordset )
		strCurrentMethod_ = "generateWorkflowExecutionCode"                   '@ note the method that will be executed - for logging
		generateWorkflowExecutionCode = ""
			on error resume next
			objScenarioRecordset.movefirst
			while not objScenarioRecordset.EOF
'Chr(34) & rsTestDefinition.object ("STARTROW").value &"-"& rsTestDefinition.object ("ENDROW").value & Chr(34)
				strCode = strCode & "loadAndRunAction "& Chr(34) & objScenarioRecordset ("test") & Chr(34) &", "& Chr(34) & objScenarioRecordset ("action") & Chr(34) &", "& 0 & vbNewLine '&", "& _
									'Chr(34) & objScenarioRecordset ("data") & Chr(34) &", "& Chr (34) & replace ( rsProjectParameters.object ("DATABASE_CON_STRING").value, "Data Source=", "Data Source="& rsProjectLayout.object ("TEST_INPUT_DATABASE_PATH").value ) & Chr (34) & vbNewLine
				objScenarioRecordset.movenext
		wend

		objScenarioRecordset.moveFirst
		generateWorkflowExecutionCode = strCode
		onGenerateWorkflowExecutionCode.fire Me
	End Function
	

	Public sub run ( strResultsLocation, strTDRunName, lngTDTestInstance, strTDTestSet )
		strCurrentMethod_ = "run"
		set qtResultsopt = createObject ("quickTest.runResultsOptions")
		qtResultsopt.resultsLocation = strResultsLocation
		object.test.run qtResultsopt
		onRun.fire Me
	End sub

	Public sub openTest (strPath)
		strCurrentMethod_ = "openTest"
		strOpenTest_ = strPath
		on error resume next
		object.open strPath, false, false
		onOpenTest.fire me
	End sub

	public sub saveTest (strDestination)
		strCurrentMethod_ = "saveTest"
		strSaveTest_ = strDestination
		on error resume next
		qtApp.object.Test.SaveAs  strDestination, false, false
		onSaveTest.fire me
	end sub

	public sub importSheet (strLocalSheetName, strFileFullPath)
		strCurrentMethod_ = "importSheet"
		strImportSheet_ = strLocalSheetName & vbNewLine & strFileFullPath
		on error resume next
		object.test.datatable.AddSheet strLocalSheetName
		qtApp.object.test.dataTable.importSheet strFileFullPath, 1, strLocalSheetName
		onImportSheet.fire me
	end sub

    Public Function getAction ( strTest, strActionIndex )
        strCurrentMethod_ = "getAction"
        strGetAction_ = dictTestActions.item (strTest).item (strActionIndex)
		on error resume next
        getAction = qtApp.object.Test.Actions.Item (dictTestActions.item (strTest).item (strActionIndex)).getScript
    	onGetAction.fire me
    End Function

End Class


'@   C u s t o m   F i l e   S y s t e m   O b j e c t   C l a s s

Class clsFileSystem

	Public onMoveFolder, object, onCreateFolder, onDeleteFolder, onCopyFile
	Private strCurrentMethod_, strMoveFolder_, strCreateFolder_, strDeleteFolder_, strCopyFile_

	private sub class_initialize ()
		set object = createobject("scripting.filesystemobject")
		set onMoveFolder = new clsHandlers '@ create event object (each event object is a collection of function refferences with an ability to be executed (fired))
		set onCreateFolder = new clsHandlers                      
		set onDeleteFolder = new clsHandlers
		set onCopyFile = new clsHandlers
	end sub

	private sub class_terminate ()
		set object = nothing
	end sub

	public property get properties ()
		set dictProperties = createObject ("scripting.dictionary")
		dictProperties.add "method", strCurrentMethod_
		dictProperties.add "moveFolder", strMoveFolder_
		dictProperties.add "createFolder", strCreateFolder_
		dictProperties.add "deleteFolder", strDeleteFolder_
		dictProperties.add "copyFile", strCopyFile_
		set properties = dictProperties
	end property

	public sub moveFolder (strFolderToMove, strFolderNew)
		strCurrentMethod_ = "moveFolder"            '@ note the method that will be executed - for logging
		strMoveFolder_ = strFolderToMove & vbNewLine & strFolderNew
		on error resume next
		'fs.object.moveFolder strFolderToMove, strFolderNew
		object.copyFolder strFolderToMove, strFolderNew
		object.deleteFolder strFolderToMove, true
		onMoveFolder.fire Me
	end sub

	public sub copyFile (strFileToCopy, strFileNew)
		strCurrentMethod_ = "copyFile"            '@ note the method that will be executed - for logging
		strCopyFile_ = strFileToCopy & vbNewLine & strFileNew
		on error resume next
		'fs.object.moveFolder strFolderToMove, strFolderNew
		object.copyFile strFileToCopy, strFileNew
		onCopyFile.fire Me
	end sub

	public sub createFolder (strFolderToCreate)
		strCurrentMethod_ = "createFolder"            '@ note the method that will be executed - for logging
		strCreateFolder_ = strFolderToCreate
		on error resume next
		object.createFolder strFolderToCreate
		
		onCreateFolder.fire Me
	end sub

	public sub deleteFolder (strFolderToDelete)
		strCurrentMethod_ = "deleteFolder"           
		strDeleteFolder_ = strFolderToDelete
		on error resume next
		object.deleteFolder strFolderToDelete
		
		onDeleteFolder.fire Me
	end sub

	

End Class


'@   E v e n t s   Cl a s s   c l s E v e n t s

Class clsHandlers

	'@ declare variables that will only be used within the class
	Private arrHandlers_ ()

	'@ this function runs each time object is initialized from this class
	Private Sub Class_Initialize ()
		ReDim arrHandlers_ (-1) '@ initiate a dynamic array with no elements in it
	End Sub

	'@ add an array of handler function raferences to local storage array
	Public Sub addHandler ( arrFunctionNames )
		'@ iterate through the array of function names
		for each strFunctionName in arrFunctionNames
			ReDim Preserve arrHandlers_ ( UBound ( arrHandlers_ ) +1)                 '@ add an emty element to local storage array
			Set arrHandlers_ ( UBound ( arrHandlers_ ) ) = GetRef ( strFunctionName ) '@ set a reference of the current function name to the last added element
		next
	End Sub

	'@ execute the handler functions
	Public Sub fire ( args )
		'@ run the handlers stored in local array one by one
		for each refHandler in arrHandlers_
			refHandler args
		next
	End Sub

End Class










'@	E V E N T   H A N D L E R S
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'@   E r r o r   H a n d l e r s

'@ quit the script in case an error was raised (either in one of the user defined objects, or in handler functions, that are meant to be checkpoints)
Sub quitScriptOnError (objCaller)
	if err.number <> 0 then : wscript.quit
End Sub

'@ check if any of the current recordset fields are empty and raise error if so
Sub raiseErrorForEmptyFieldValue (objCaller)
	for each objField in objCaller.object.fields
		if objField.value = "" Then
			on error resume next              
			err.raise 1, , "the required field "& objField.name &" is empty"
		end if
	next
End Sub

'@ check if raised error is due denied permissions
Sub quitOnPermissionDeniedError (objCaller)
	if err.description = "Permission denied" then : wscript.quit
End Sub

'@ check if current recordset is empty
Sub raiseErrorForEmptyRecordset (objCaller)
	'@ switch off WSH error handling (custom error handling will be used) and raise a user error if no records found
	if objCaller.object.recordCount = 0 then : on error resume next : err.raise 1, , "no scheduled records found"
End sub

'@ check if current recordset is empty
Sub raiseErrorForAnyRecords (objCaller)
	'@ switch off WSH error handling (custom error handling will be used) and raise a user error if no records found
	if objCaller.object.recordCount <> 0 then : on error resume next : err.raise 1, , "I found some orphan records, which are in your test case table, but the keyword isn't available, table name below  "
End sub

'@ check if current recordset is empty
Sub raiseErrorForMissingAction (objCaller)
	'@Raise an error if one is already present. Workaround for bizarre VBScript failing
	if err.number <> 0 then : on error resume next : err.raise 1, , "One of the actions is not in the containing script"
End sub

'@ log methods to txt
Sub logEventToHtml (objCaller)
	const READ = 1, WRITE = 2, APPEND = 8
	
	set fso = createobject ("scripting.filesystemobject")
	set file = fs.object.OpenTextFile (fs.object.buildPath (createobject ("wscript.shell").CurrentDirectory, createObject ("WScript.Network").ComputerName &"-"& wscript.scriptname &".html"), APPEND, true)

	if err.number <> 0 then : file.writeline " <table><tr class='err'>"& err.description  &"</tr></table>"
	
	file.writeline "<table>"
	file.writeline "<tr>"
	file.write "<td class='date'>" : file.write now : file.write "</td>"
	file.write "<td class='class'>" : file.write typeName (objCaller) : file.write "</td>"
	file.write "<td class='method'>" : file.write objCaller.properties () ("method") : file.write "</td>"
	file.write "<td class='content'>" : file.write replace (objCaller.properties () (objCaller.properties () ("method")), vbNewLine, "<br />")  : file.write "</td>"
	file.writeline "</tr>"
	file.writeline "</table>"
	file.writeline "<link rel='stylesheet' type='text/css' href='mystyle.css' />"
End Sub


'@   L o g   H a n d l e r s

'@ log caller properties to Application Events log
Sub logCallerPropertiesAsApplicationEvent (objCaller)
	const EVNT_TYPE = 2                                       '@ warning type of an event
	set dictProperties = objCaller.properties
	strMsg = TypeName ( objCaller ) & vbNewLine
	'@ get caller property names and their current values
	for each strProperty in dictProperties.keys
		strMsg = strMsg & vbNewLine & strProperty &": "& dictProperties.Item ( strProperty )
	next
	createobject ("WScript.Shell").LogEvent EVNT_TYPE, strMsg '@ send the message to Application Events log
End Sub

'@ log err object details to Application Events log
Sub logErrorAsApplicationEvent (objCaller)
	const EVNT_TYPE = 2                                                                                            '@ warning type of an event
	if err.number = 0 then : exit sub                                                                              '@ check if there is a raised error, if not - exit procedure
	strMsg = TypeName ( objCaller ) & vbNewLine & objCaller.properties () ("method") & vbNewLine & err.description '@ create the message to be logged
	createobject ("WScript.Shell").LogEvent EVNT_TYPE, strMsg                                                      '@ send the message to Application Events log
End Sub


'@ updateField status field of the scheduled recordset with current date and time
Sub updateTestDefinitionRecordStatus (objCaller)
	if typename ( objCaller ) = "clsRecordSet" Then : rsTestDefinition.updateField "STATUS", "selected" : exit sub
	if typename ( objCaller ) = "clsQuickTestApplication" and objCaller.properties ()("method") = "importSheet" Then : rsTestDefinition.updateField "STATUS", now
End Sub


'@------------------------------------------------
'@3

'  I N F O
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'
'	FRIENDS LIFE DORKING TEST AUTOMATION TEAM
'	11/05/2011











'	S C R I P T																			
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'@   G e t   f r a m e w o r k   c o r e   p a r a m e t e r s

	Set rsProjectParameters = new clsRecordSet '@ initialize an RS object from a user-defined class
	'@ add an array of function references (handlers in Event Handling section) to objects' event objects (events)
	'@ each event object is a collection of function refferences with an ability to be executed (fired)
	rsProjectParameters.onAddRecord.addHandler array ("logEventToHtml", _
										"quitScriptOnError")
	rsProjectParameters.onAddRecord.addHandler array ("raiseErrorForEmptyFieldValue", _
										"logEventToHtml", _
										"quitScriptOnError")

	rsProjectParameters.addFields array ("HOST_NAME", _
								"PROJECT_ROOT_PATH", _
                                "PROJECT_DB_NAME")
	rsProjectParameters.open ""
	'@ add first record to recordset (values to headers) (number of values has to match the number of headers as there is a direct relation between them)

	rsProjectParameters.addRecord rsProjectParameters.listHeaders, array (createObject ("WScript.Network").ComputerName, _
													createObject ("WScript.Shell").Environment ("USER") ("AF_PROJECT_ROOT_PATH"), _
                                                    createObject ("WScript.Shell").Environment ("USER") ("PROJECT_DB_NAME"))



'@   C o m b i n e   p a t h   l o g i c   i n t o   l a y o u t   r e c o r d s e t

	set rsProjectLayout = new clsRecordSet
	rsProjectLayout.onAddFields.addHandler array ("logEventToHtml")
	rsProjectLayout.onAddRecord.addHandler array ("logEventToHtml", _
										"quitScriptOnError")
	rsProjectLayout.onUpdateField.addHandler array ("logEventToHtml")

	'@ create recordset headers, and empty record
	rsProjectLayout.addFields array ("PROJECT_DATABASE_PATH", _
							"PROJECT_TEST_ENVIRONMENT_SPEC_PATH", _
							"PROJECT_SOURCE_WORKSPACE_PATH", _
							"PROJECT_BUILD_WORKSPACE_PATH", _
							"SOURCE_BASELINE_PATH", _
							"BUILD_BASELINE_PATH", _
							"ACTION_VAULT_BASELINE_PATH", _
							"INPUT_DATABASE_BASELINE_PATH", _
							"TEST_TEMPLATE_BASELINE_PATH", _
							"TEST_TEMPLATE_SHARED_REPOSITORY_VAULT_PATH", _
							"TEST_TEMPLATE_FUNCTION_LIBRARY_VAULT_PATH", _
							"TEST_TEMPLATE_RECOVERY_SCENARIO_VAULT_PATH", _
							"TEST_VAULT_BASELINE_PATH", _
							"TEST_NAME",_
							"TEST_PATH",_
							"TEST_SHARED_REPOSITORY_VAULT_PATH", _
							"TEST_FUNCTION_LIBRARY_VAULT_PATH", _
							"TEST_RECOVERY_SCENARIO_VAULT_PATH")
	rsProjectLayout.open ""
	rsProjectLayout.addRecord rsProjectLayout.listHeaders, array ("", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"", _
												"")

	set fs = new clsFileSystem
	fs.onDeleteFolder.addHandler array ("logEventToHtml", _
								"quitOnPermissionDeniedError")
	fs.onCreateFolder.addHandler array ("logEventToHtml", _
								"quitScriptOnError")
	fs.onCopyFile.addHandler array ("logEventToHtml")

	rsProjectLayout.updateField "PROJECT_DATABASE_PATH", fs.object.buildPath (rsProjectParameters.object ("PROJECT_ROOT_PATH").value, _
                                rsProjectParameters.object ("PROJECT_DB_NAME").value)



'@   R e t r i e v e   t e s t   d e f i n i t i o n   r e c o r d s   f r o m   p r o j e c t   d a t a b a s e

	set rsTestDefinition = new clsRecordSet
	rsTestDefinition.onConnect.addHandler array ("logEventToHtml", _
									"quitScriptOnError")
	rsTestDefinition.onOpen.addHandler array ("logEventToHtml", _
									"quitScriptOnError")
	rsTestDefinition.onOpen.addHandler array ("raiseErrorForEmptyRecordset", _
									"quitScriptOnError")
	rsTestDefinition.onOpen.addHandler array ("updateTestDefinitionRecordStatus")
	rsTestDefinition.onupdateField.addHandler array ("logEventToHtml", _
										"quitScriptOnError")

	'@ connect to scheduler and get a recordset with the first record that matches the conditional statement
	rsTestDefinition.connect rsProjectLayout.object ("PROJECT_DATABASE_PATH").value
	rsTestDefinition.open "SELECT STATUS, "+_
						"ENVIRONMENT, "+_
						"RELEASE, "+_
						"CASE, "+_
						"SCENARIO, "+_
						"SHARED_DATA, "+_
						"HOST, "+_
						"ITERATIONS "+_
					"FROM B_DEFINITIONS "+_
					"WHERE HOST='"& rsProjectParameters.object ("HOST_NAME").value &"' "+_
						"AND STATUS='generate';"


while not rsTestDefinition.object.eof '@ iterate for each returned record


'@   C o n s t r  u c t   p r o j e c t   w o r k s p a c e   p a t h   m a p

	rsProjectLayout.updateField "PROJECT_TEST_ENVIRONMENT_SPEC_PATH", fs.object.buildPath (rsProjectParameters.object ("PROJECT_ROOT_PATH").value, "environment.xml")

	rsProjectLayout.updateField "PROJECT_SOURCE_WORKSPACE_PATH", fs.object.buildPath (rsProjectParameters.object ("PROJECT_ROOT_PATH").value, "source")
	rsProjectLayout.updateField "SOURCE_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("PROJECT_SOURCE_WORKSPACE_PATH"), rsTestDefinition.object ("RELEASE").value)
	rsProjectLayout.updateField "ACTION_VAULT_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("SOURCE_BASELINE_PATH").value, "actions")
	rsProjectLayout.updateField "TEST_TEMPLATE_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("SOURCE_BASELINE_PATH").value, "template")
	rsProjectLayout.updateField "TEST_TEMPLATE_SHARED_REPOSITORY_VAULT_PATH", fs.object.buildPath (rsProjectLayout.object ("TEST_TEMPLATE_BASELINE_PATH").value, "Shared Repositories")
	rsProjectLayout.updateField "TEST_TEMPLATE_FUNCTION_LIBRARY_VAULT_PATH", fs.object.buildPath (rsProjectLayout.object ("TEST_TEMPLATE_BASELINE_PATH").value, "Function Libraries")
	rsProjectLayout.updateField "TEST_TEMPLATE_RECOVERY_SCENARIO_VAULT_PATH", fs.object.buildPath (rsProjectLayout.object ("TEST_TEMPLATE_BASELINE_PATH").value, "Recovery Scenarios")
	rsProjectLayout.updateField "INPUT_DATABASE_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("SOURCE_BASELINE_PATH").value, "input.mdb")

	rsProjectLayout.updateField "PROJECT_BUILD_WORKSPACE_PATH", fs.object.buildPath (rsProjectParameters.object ("PROJECT_ROOT_PATH").value, "build")
	rsProjectLayout.updateField "BUILD_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("PROJECT_BUILD_WORKSPACE_PATH").value, rsTestDefinition.object ("RELEASE").value)
	rsProjectLayout.updateField "TEST_VAULT_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("BUILD_BASELINE_PATH").value, "tests")
	rsProjectLayout.updateField "TEST_NAME", replace (rsTestDefinition.object ("ENVIRONMENT").value, "\", ".") &_
									"-"& rsTestDefinition.object ("CASE").value &"."& rsTestDefinition.object ("SCENARIO").value &"-"& rsTestDefinition.object ("ITERATIONS").value
	rsProjectLayout.updateField "TEST_PATH", fs.object.buildPath (rsProjectLayout.object ("TEST_VAULT_BASELINE_PATH").value, rsProjectLayout.object ("TEST_NAME").value)
	rsProjectLayout.updateField "TEST_SHARED_REPOSITORY_VAULT_PATH", fs.object.buildPath (rsProjectLayout.object ("TEST_PATH").value, "Shared Repositories")
	rsProjectLayout.updateField "TEST_FUNCTION_LIBRARY_VAULT_PATH", fs.object.buildPath (rsProjectLayout.object ("TEST_PATH").value, "Function Libraries")
	rsProjectLayout.updateField "TEST_RECOVERY_SCENARIO_VAULT_PATH", fs.object.buildPath (rsProjectLayout.object ("TEST_PATH").value, "Recovery Scenarios")

	fs.deleteFolder rsProjectLayout.object ("TEST_PATH").value


'@   C h e c k   T e s t   S c e n a r i o   r e c o r d s e t 
	'@Check all keywords in TC table are present by retrieving all the orphan records from the keywords table

	set rsScenarioCheck = new clsRecordSet
	rsScenarioCheck.onConnect.addHandler array ("logEventToHtml", _
								"quitScriptOnError")
	rsScenarioCheck.onOpen.addHandler array ("logEventToHtml", _
								"quitScriptOnError", _
								"raiseErrorForAnyRecords", _
								"logEventToHtml", _
								"quitScriptOnError")

	rsScenarioCheck.connect rsProjectLayout.object ("PROJECT_DATABASE_PATH").value '@ connect to scheduler with a different object

	rsScenarioCheck.open "SELECT " & rsTestDefinition.object ("CASE").value & "." & rsTestDefinition.object ("SCENARIO").value & _
					" FROM " & rsTestDefinition.object ("CASE").value &_ 
					" WHERE " & rsTestDefinition.object ("CASE").value &"." & rsTestDefinition.object ("SCENARIO").value & _
					" NOT IN ( SELECT " & rsTestDefinition.object ("CASE").value & "_components.keyword FROM " & rsTestDefinition.object ("CASE").value &"_components)"



'@   R e t r i e v e   t e s t   s c e n a r i o   r e c o r d s e t

	set rsScenarios = new clsRecordSet
	rsScenarios.onConnect.addHandler array ("logEventToHtml", _
								"quitScriptOnError")
	rsScenarios.onOpen.addHandler array ("logEventToHtml", _
								"quitScriptOnError", _
								"raiseErrorForEmptyRecordset", _
								"logEventToHtml", _
								"quitScriptOnError")

	rsScenarios.connect rsProjectLayout.object ("PROJECT_DATABASE_PATH").value '@ connect to scheduler with a different object

	'@ get a recordset with the scheduled scenario workflow
	rsScenarios.open "SELECT "& rsTestDefinition.object ("CASE").value &"."& rsTestDefinition.object ("SCENARIO").value &", "& rsTestDefinition.object ("CASE").value &"_components.*" &_
					"FROM "& rsTestDefinition.object ("CASE").value &"_components "&_
					"INNER JOIN "& rsTestDefinition.object ("CASE").value &_
					" ON "& rsTestDefinition.object ("CASE").value &"_components.keyword = "& rsTestDefinition.object ("CASE").value &"."& rsTestDefinition.object ("SCENARIO").value &_
					" ORDER BY "& rsTestDefinition.object ("CASE").value &"."& "id;"
	'@ "select test, action, data from components where keyword in (select "& rsTestDefinition.object ("SCENARIO").value &" from "& rsTestDefinition.object ("TESTSET").value &");"



'@   L o a d   t e s t   e n v i r o n m e n t   c o n f i g u r a t i o n   x m l   n o d e

	set xmlEnvironment = new clsXmlDom 
	xmlEnvironment.onOpen.addHandler array ("logEventToHtml", _
									"quitScriptOnError")
	xmlEnvironment.onSetElement.addHandler array ("logEventToHtml", _
										"quitScriptOnError")

	xmlEnvironment.open rsProjectLayout.object ("PROJECT_TEST_ENVIRONMENT_SPEC_PATH").value '@ load environment config xml into initiated object
	xmlEnvironment.setElement rsTestDefinition.object ("ENVIRONMENT").value '@ find specified subset of the environment config xml


'@   L a u n c h   Q T P

	set qtApp = new clsQuickTestApplication
	qtApp.onOpen.addHandler array ("logEventToHtml", _
							"quitScriptOnError")
	qtApp.onOpenTest.addHandler array ("logEventToHtml")
	qtApp.onAddCodeToAction.addHandler array ("logEventToHtml")
	qtApp.onGenerateEnvironmentConfigurationCode.addHandler array ("logEventToHtml")
	qtApp.onGenerateWorkflowExecutionCode.addHandler array ("logEventToHtml")
	qtApp.onImportSheet.addHandler array ("logEventToHtml")
	qtApp.onSaveTest.addHandler array ("logEventToHtml")
    'qtApp.onGetAction.addHandler array ("raiseErrorForMissingAction", _
     '                                   "logEventToHtml", _
      '                                  "quitScriptOnError")
    '@It takes a long time to log all the actions individually that may or may not be present, it is currently commented out
    'qtApp.onGetAction.addHandler array ("quitScriptOnError")
    '@But if there is an issue, it can be put back in by commenting the line above and uncommenting the lines below
    qtApp.onGetAction.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")

	qtApp.close : qtApp.open '@ RE-open QTP



'@   R e t r i e v e   A T A A   c o d e


arrTestActions = rsScenarios.object.getRows (,, array ("test", "action"))

set dictTestActions = createObject ("scripting.dictionary")

for idxTest = 0 to uBound (arrTestActions, 2)
      if not dictTestActions.exists (arrTestActions (0, idxTest)) then : dictTestActions.add arrTestActions (0, idxTest), createObject ("scripting.dictionary")
      dictTestActions.item (arrTestActions (0, idxTest)).add cstr (idxTest), arrTestActions (1, idxTest)
next

reDim arrScripts (UBound (arrTestActions, 2))

for each strTest in dictTestActions.keys
    qtApp.opentest fs.object.buildPath (rsProjectLayout.object ("ACTION_VAULT_BASELINE_PATH").value, strTest)
    for each strActionIndex in dictTestActions.item (strTest).keys
        '@Log action name we are looking for
        arrScripts (cint (strActionIndex)) = qtApp.getAction( strTest, strActionIndex )
        'arrScripts (cint (strActionIndex)) = qtApp.object.Test.Actions.Item (dictTestActions.item (strTest).item (strActionIndex)).getScript
    next
next


	'ReDim arrScripts (-1)
	'while not rsScenarios.object.EOF
	'	qtApp.opentest fs.object.buildPath (rsProjectLayout.object ("ACTION_VAULT_BASELINE_PATH").value, rsScenarios.object ("TEST").value)
	'	ReDim Preserve arrScripts (UBound (arrScripts) +1)
	'	arrScripts (UBound (arrScripts)) = qtApp.object.Test.Actions.Item (rsScenarios.object ("ACTION").value).getScript
	'	rsScenarios.object.movenext
	'wend

	rsScenarios.object.moveFirst


'@   G e n e r a t e   a u t o m a t e d   t e s t

	'@ Recreate project build workspace in case it does not exist
	if not fs.object.folderExists (rsProjectLayout.object ("PROJECT_BUILD_WORKSPACE_PATH").value) then : fs.createFolder (rsProjectLayout.object ("PROJECT_BUILD_WORKSPACE_PATH").value)
	if not fs.object.folderExists (rsProjectLayout.object ("BUILD_BASELINE_PATH").value) then : fs.createFolder (rsProjectLayout.object ("BUILD_BASELINE_PATH").value)
	if not fs.object.folderExists (rsProjectLayout.object ("TEST_VAULT_BASELINE_PATH").value) then : fs.createFolder (rsProjectLayout.object ("TEST_VAULT_BASELINE_PATH").value)


	'@ Open project test template and save as a new test under required build baseline
	'@Check it is not read only by performing an operation that errors for read only tests
	'@You cannot save the test down as a new test immediately and still reset the actionparameterdefinitions below
	'@I do not know why, but it just doesn't work. You're welcome to try
    blnReadOnly = true
	intCount = 0
	Do while blnReadOnly
		qtApp.openTest rsProjectLayout.object ("TEST_TEMPLATE_BASELINE_PATH").value	
		on error resume next
		qtApp.object.test.actions.item ("c_workflow").objectRepositories.removeAll
		If Err.Number = 0 Then
			blnReadOnly = false
		Else
			WScript.Sleep (10000)
		End If
		intCount = intCount + 1
		If intCount = 100 Then
			msgBox("Template opened read only 100 times")
			WScript.quit
		End If
	Loop

	'@ Set shared data and iteration parameters
    	If isNull (rsTestDefinition.object ("SHARED_DATA").value) then : rsTestDefinition.object ("SHARED_DATA").value = ""
	qtApp.object.test.actions.item ("b_prerequisites").actionparameterdefinitions.item ("SharedDataPath").DefaultValue = fs.object.buildPath (rsProjectLayout.object ("TEST_VAULT_BASELINE_PATH").value, "shared.mdb")
	qtApp.object.test.actions.item ("d_postrequisites").actionparameterdefinitions.item ("SharedDataPath").DefaultValue = fs.object.buildPath (rsProjectLayout.object ("TEST_VAULT_BASELINE_PATH").value, "shared.mdb")
	qtApp.object.test.actions.item ("b_prerequisites").actionparameterdefinitions.item ("SharedData").DefaultValue = rsTestDefinition.object ("SHARED_DATA").value
	qtApp.object.test.actions.item ("b_prerequisites").actionparameterdefinitions.item ("Iterations").DefaultValue = rsTestDefinition.object ("ITERATIONS").value

	qtApp.object.test.actions.item ("c_workflow").objectRepositories.removeAll

    '@Save again
	qtApp.saveTest rsProjectLayout.object ("TEST_PATH").value
	if not fs.object.folderExists (rsProjectLayout.object ("TEST_SHARED_REPOSITORY_VAULT_PATH").value) then : fs.createFolder (rsProjectLayout.object ("TEST_SHARED_REPOSITORY_VAULT_PATH").value)
	fs.object.copyFolder rsProjectLayout.object ("TEST_TEMPLATE_FUNCTION_LIBRARY_VAULT_PATH").value, rsProjectLayout.object ("TEST_FUNCTION_LIBRARY_VAULT_PATH").value, true
	fs.object.copyFolder rsProjectLayout.object ("TEST_TEMPLATE_RECOVERY_SCENARIO_VAULT_PATH").value, rsProjectLayout.object ("TEST_RECOVERY_SCENARIO_VAULT_PATH").value, true

	'@ Add test environment initialization code
	qtApp.addCodeToAction 1, qtApp.generateEnvironmentConfigurationCode (xmlEnvironment.activeElement) '@ generate QTP code from supplied xml node and add it to action

	'@ Generate test iteration data rows (Global sheet)
	qtApp.object.test.dataTable.globalSheet.addParameter "ITERATION", ""
	for idx = 1 to rsTestDefinition.object ("ITERATIONS").value
		qtApp.object.test.datatable.globalSheet.setCurrentRow idx
		qtApp.object.test.datatable.value ("ITERATION") = idx
	next
	'@ Create a recorset to retrieve test data for each action mentioned in test scenario
	set rsTestData = new clsRecordSet
	rsTestData.onConnect.addHandler array ("logEventToHtml", _
								"quitScriptOnError")
	rsTestData.onOpen.addHandler array ("logEventToHtml", _
								"quitScriptOnError")
	rsTestData.onExport.addHandler array ("logEventToHtml", _
								"quitScriptOnError")

	rsTestData.connect rsProjectLayout.object ("INPUT_DATABASE_BASELINE_PATH").value
	'@ Add action workflow to test
	idx = 1
	while not rsScenarios.object.EOF
		set objNewAction = qtApp.object.Test.Actions.Item("c_workflow").AddNewAction (idx &"_"& rsScenarios.object ("ACTION").value, "description", arrScripts (idx -1), true, 2)

		fs.copyFile fs.object.buildPath (rsProjectLayout.object ("TEST_TEMPLATE_SHARED_REPOSITORY_VAULT_PATH").value, "rep"& rsScenarios.object ("TEST").value &".tsr"), fs.object.buildPath (rsProjectLayout.object ("TEST_SHARED_REPOSITORY_VAULT_PATH").value, "rep"& rsScenarios.object ("TEST").value &".tsr")

		if fs.object.fileExists (fs.object.buildPath (rsProjectLayout.object ("TEST_SHARED_REPOSITORY_VAULT_PATH").value, "rep"& rsScenarios.object ("TEST").value &".tsr")) then : _
			objNewAction.objectRepositories.Add "Shared Repositories\rep"& rsScenarios.object ("TEST").value &".tsr"

		if isNull (rsScenarios.object ("REPORTS").value) then : rsScenarios.object ("REPORTS").value = ""
		if isNull (rsScenarios.object ("SHARED_DATA").value) then : rsScenarios.object ("SHARED_DATA").value = ""
		objNewAction.ActionParameterDefinitions.add "Reports", "define which report functions will be executed", 0, 0, rsScenarios.object ("REPORTS").value
		objNewAction.ActionParameterDefinitions.add "SharedData", "specify runtime sql to retrieve shared test data", 0, 0, rsScenarios.object ("SHARED_DATA").value
		str = qtApp.object.Test.Actions.Item("c_workflow").getScript

		if not rsScenarios.object ("INPUT_DATA").value = empty then
			rsTestData.open  rsScenarios.object ("INPUT_DATA").value
			if rsScenarios.object ("ITERATION_MODE").value = "TEST" then : rt = rsTestDefinition.object ("ITERATIONS").value
			if rsScenarios.object ("ITERATION_MODE").value = "ACTION" then : rt = rsTestData.object.recordCount : qtApp.object.Test.Actions.Item("c_workflow").setScript strReverse (replace (strReverse (str), "noitaretIeno", "snoitaretIlla", 1, 1))
			rsTestData.export  rt, fs.object.buildPath (rsProjectLayout.object ("TEST_PATH").value, rsScenarios.object ("ACTION") &" ["&  rsScenarios.object ("TEST")  &"].csv")
			qtApp.importSheet idx &"_"& rsScenarios.object ("ACTION"), fs.object.buildPath (qtApp.object.test.environment.value ("TestDir"), rsScenarios.object ("ACTION") &" ["&  rsScenarios.object ("TEST")  &"].csv")
			rsTestData.object.close
		end if
		rsScenarios.object.movenext

		idx = idx+1
	wend

	qtApp.object.test.save
	rsTestDefinition.updateField "STATUS", now
	qtApp.close

	rsTestDefinition.object.movenext
wend










'	U S E R - D E F I N E D   C L A S S E S													
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'@   C o n n e c t e d   R e c o r d s e t   C l a s s   c l s R e c o r d S e t

Class clsRecordSet

    '@ declare variables that will be accessed from the global script
    Public object, onConnect, onOpen, onupdateField, onAddRecord, onExport, onAddFields
    
    '@ declare variables that will only be used within the class
    Private strCurrentMethod_, arrHeaders_, strConnect_, strOpen_, strupdateField_, strAddRecord_, strExport_, strAddFields_
    
    '@ this function runs each time object is initialized from this class
    Private Sub Class_Initialize ()
        set object =  createObject ("ADODB.RecordSet") '@ create an object that will be an interface to Recordset class of ADODB library (COM)
        '@ create event objects (each event object is a collection of function refferences with an ability to be executed (fired))
        set onConnect = new clsHandlers
        set onOpen = new clsHandlers
        set onupdateField = new clsHandlers
        set onAddRecord = new clsHandlers
        set onExport = new clsHandlers
        set onAddFields = new clsHandlers
    End Sub
    
    '@ this function runs each time the object  is released
    Private Sub Class_Terminate ()
        on error resume next '@ switch off the WSH error handling (in case when the object is released before the connection to DB is made)
        object.close         '@ close a recordset
    End Sub
    
    '@ a class property, that collects most important object properties and class variables into one object - for logging
    Public Property Get properties ()
        set dictProperties = createObject ("scripting.dictionary")
        dictProperties.add "method", strCurrentMethod_
        dictProperties.add "connect", strConnect_
        dictProperties.add "open", strOpen_
        dictProperties.add "updateField", strupdateField_
        dictProperties.add "addRecord", strAddRecord_
        dictProperties.add "export", strExport_
        dictProperties.add "addFields", strAddFields_
        set properties = dictProperties
    End Property
    
    '@ set recordset connection to DB
    Public Sub connect (strDataBaseFullPath)
        strCurrentMethod_ = "connect" '@ note the method that will be executed - for logging
        strConnect_ = strDataBaseFullPath
        on error resume next '@ switch off WSH error handling (custom error handling will be used)
		object.ActiveConnection = "Provider = Microsoft.Jet.OLEDB.4.0; Data Source = "& strDataBaseFullPath '@ set DB connection string, that automatically creates the connection object
		onConnect.fire Me '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End sub

    '@ open a recordset by executing an sql query
    Public Sub open (strSql)
        strCurrentMethod_ = "open" '@ note the method that will be executed - for logging
        strOpen_ = strSql
        on error resume next '@ switch off WSH error handling (custom error handling will be used)
            '@ set recordset parameters before openning it (these parameters are properties of ADODB Recordset class and can be found in MSDN for reference)
            object.cursorType = 3 '@ a static cursor allowing forward and backward scrolling of a fixed, unchangeable set of records
            object.lockType = 3 '@ multiple users can modify the data which is not locked until updateField method is called
            object.open strSql '@ return (open) a recordset by executing SQL
            onOpen.fire Me '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End Sub
    
    '@ updateField a recordset field with new value
    Public Sub updateField (strField, strNewValue)
        strCurrentMethod_ = "updateField"
        strupdateField_ = strField & vbNewLine & strNewValue
        on error resume next
            object (strField) = strNewValue '@ assign new value to a field
            object.update '@ updateField a recordset (save)
            onupdateField.fire Me
    End Sub
    
    '@ add a new record of values to recordset
    Public Sub addRecord (arrHeaders, arrValues)
        strCurrentMethod_ = "addRecord"
        on error resume next
            strAddRecord_ = join (arrHeaders, vbNewLine) & vbNewLine & vbNewLine & join (arrValues, vbNewLine)
            object.AddNew arrHeaders, arrValues '@ add a new record of values to a pre-set array of recordset fields
            onAddRecord.fire Me
    End Sub

    public sub export (intIterations, strFilePath)
        strCurrentMethod_ = "export"
        strExport_ = intIterations & vbNewLine & strFilePath
        set myFile = createObject ("scripting.FileSystemObject").createTextFile (strFilePath)
        myFile.WriteLine join (listHeaders, vbTab)
        a = intIterations \ object.recordCount
        b = intIterations mod object.recordCount
        for i = 1 to a
            myFile.Write object.getString (2,, vbTab,, "")
            object.moveFirst
        next
        if b <> 0 then : myFile.WriteLine object.getString (2, b, vbTab,, "")
        myFile.Close
        onExport.fire me
    end sub

    public function listHeaders ()
        ReDim arrHeaders (-1)
        for each field in object.fields
            Redim Preserve arrHeaders (UBound (arrHeaders) +1)
            arrHeaders (UBound(arrHeaders)) = field.name
        next
        listHeaders = arrHeaders
    end function

    public function listValues ()
        ReDim arrValues (-1)
        for each fld in object.Fields
            ReDim preserve arrValues (UBound (arrValues) +1)
            arrValues (UBound (arrValues)) = fld.value
        next
    listValues = arrValues
    end function

    '@ set up a disconnected recordset with array of fields and pre-set (constant) field parameters
    public Sub addFields (arrHeaders)
        strCurrentMethod_ = "addFields"
        strAddFields_ = arrHeaders '@ note the array of recordset headers as an internal variable
        const FIELD_TYPE = 200 '@ numeric value for a recordset field (string type)
        const MAX_CHAR = 1024 '@ recordset field size
        on error resume next
            '@ add fields to recordset with pre-set parameters
            For Each strHeader in arrHeaders
                object.fields.append strHeader, FIELD_TYPE, MAX_CHAR
            Next
            onAddFields.fire Me
    end Sub

End Class


'@   X m l   C l a s s   c l s X m l D o m

Class clsXmlDom

	'@ declare variables that will be accessed from the global script
	Public object, activeElement, onSetElement, onOpen

	'@ declare variables that will only be used within the class
	Private strCurrentMethod_, strOpen_, strSetElement_

	'@ this function runs each time object is initialized from this class
	Private Sub Class_Initialize ()
		set object = createobject ("Microsoft.XMLDOM") '@ create an object that will be an interface to XMLDOM class of Microsoft library (COM)
		set onOpen = new clsHandlers 		'@ create event objects (each event object is a collection of function refferences with an ability to be executed (fired))
		set onSetElement = new clsHandlers 		'@ create event objects (each event object is a collection of function refferences with an ability to be executed (fired))
	End Sub

	'@ a class property, that collects most important object properties and class variables into one object - for logging
	Public Property Get properties ()
		set dictProperties = createObject ("scripting.dictionary")
		dictProperties.add "method", strCurrentMethod_
		dictProperties.add "open", strOpen_
		dictProperties.add "setElement", strSetElement_
		set properties = dictProperties
	End Property

	'@ follow the specified sequence of tags (array) and set activeElement property to the last found (no parent tag needed)
	Public Sub setElement ( strTagPath )
		strCurrentMethod_ = "setElement"         '@ note the method that will be executed - for logging
		strSetElement_ = strTagPath
		on error resume next                  '@ switch off WSH error handling (custom error handling will be used)
		arrTagPath = split (strTagPath, "\")
		set activeElement = object.FirstChild '@ set the parent tag as it is not the part of the path
		for each strTag in arrTagPath '@ iterate through the array path of tag names and re-set activeElement property with each new found
			set activeElement = activeElement.GetElementsByTagName ( strTag ).item (0)
		next
		onSetElement.fire Me                  '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
	End Sub

	'@ load an XML file into an XMLDOM object
	Public Sub open ( strFilePath )
		strCurrentMethod_ = "open" '@ note the method that will be executed - for logging
		strOpen_ = strFilePath
		on error resume next       '@ switch off WSH error handling (custom error handling will be used)
		object.async = false       '@ means that the data load must be completed before the caller gets the control back
		object.load strFilePath    '@ load an xml file
		onOpen.fire Me             '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
	End Sub

End Class


'@   Q t p   C l a s s   c l s Q u i c k T e st A p p l i c a t i o n

Class clsQuickTestApplication

	'@ declare variables that will be accessed from the global script
	Public object, onAddCodeToAction, onOpen, onConnect, onRun, onSetFolders, onGenerateEnvironmentConfigurationCode, onGenerateWorkflowExecutionCode, onOpenTest, onSaveTest, onImportSheet, onGetAction

	'@ declare variables that will only be used within the class
	Private strCurrentMethod_, strConnect_, strAddCodeToAction_, strSetFolders_, strGenerateEnvironmentConfigurationCode_, strOpenTest_, strSaveTest_, strImportSheet_, strGetAction_

	'@ this function runs each time object is initialized from this class
	Private Sub Class_Initialize ()
		'@ create event objects (each event object is a collection of function refferences with an ability to be executed (fired))
		set onAddCodeToAction = new clsHandlers
		set onOpen = new clsHandlers
		set onConnect = new clsHandlers
		set onRun = new clsHandlers
		set onSetFolders = new clsHandlers
		set onGenerateEnvironmentConfigurationCode = new clsHandlers
		set onGenerateWorkflowExecutionCode = new clsHandlers
		set onOpenTest = new clsHandlers
		set onSaveTest = new clsHandlers
		set onImportSheet = new clsHandlers
        Set onGetAction = new clsHandlers
	End Sub

	'@ a class property, that collects most important object properties and class variables into one object - for logging
	Public Property Get properties ()
		set dictProperties = createObject ("scripting.dictionary")
		dictProperties.add "method", strCurrentMethod_
		dictProperties.add "open", strOpen_
		dictProperties.add "connect", strConnect_
		dictProperties.add "setFolders", strSetFolders_
		dictProperties.add "addCodeToAction", strAddCodeToAction_
		dictproperties.add "generateEnvironmentConfigurationCode", strGenerateEnvironmentConfigurationCode_
		dictProperties.add "openTest", strOpenTest_
		dictProperties.add "saveTest", strSaveTest_
		dictProperties.add "importSheet", strImportSheet_
        dictProperties.add "getAction", strGetAction_
		set properties = dictProperties
	End Property

	'@ launch QTP
	Public Sub open ()
		strCurrentMethod_ = "open"                          '@ note the method that will be executed - for logging
		on error resume next                                '@ switch off WSH error handling (custom error handling will be used)
		set object = createObject ("QuickTest.Application") '@ create an object that will be an interface to Application class of QuickTest library (COM)
		object.Launch                                       '@ launch application
		object.Visible = TRUE                               '@ make application UI visible
		onOpen.fire Me                                      '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
	End Sub

	'@ force close QTP
	Public Sub close ()
		strCurrentMethod_ = "close"
		on error resume next '@ switch off WSH error handling (custom error handling will be used)
		object.quit          '@ quit application
		wscript.sleep 2000   '@ allow 2 seconds before checking if application is closed
		'@ kill all qtp related processes if they are still in the process list
		for each objProcess in getObject ("winmgmts:").InstancesOf ("Win32_process")
			if objProcess.name = "QTPro.exe" or objProcess.name = "QTReport.exe" then : objProcess.terminate
		next
	End Sub

	'@ initiate a connection between QTP and QC
	Public Sub connect (strUrl, strDomain, strProject, strUserName, strPassword, blnEncrypted)
		strCurrentMethod_ = "connect"                                                                     '@ note the method that will be executed - for logging
		strConnect_ = strUrl & vbNewLine & strDomain & vbNewLine &  strProject & vbNewLine &  strUserName & vbNewLine &  strPassword & vbNewLine &  blnEncrypted
		on error resume next                                                                              '@ switch off WSH error handling (custom error handling will be used)
		if object.TDConnection.IsConnected then : object.TDConnection.disconnect
		object.TDConnection.connect strUrl, strDomain, strProject, strUserName, strPassword, blnEncrypted '@ connect to QC project
		onConnect.fire Me                                                                                 '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
	End Sub

	'@ add any string to an action by action index
	Public Sub addCodeToAction ( intActionIndex, strCode )
		strCurrentMethod_ = "addCodeToAction"                   '@ note the method that will be executed - for logging
		strAddCodeToAction_ =  intActionIndex & vbNewLine & strCode
		on error resume next                                    '@ switch off WSH error handling (custom error handling will be used)
		object.Test.Actions( intActionIndex ).setScript object.Test.Actions( intActionIndex ).getScript & vbNewLine & strCode '@ set code to action
		onAddCodeToAction.fire Me                               '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
	End Sub

	'@ add an array of lookup folders to QTP options
	Public Sub setFolders ( arrFolderPaths )
		strCurrentMethod_ = "setFolders"                   '@ note the method that will be executed - for logging
		strSetFolders_ = join(arrFolderPaths, vbNewLine)
		on error resume next     '@ switch off WSH error handling (custom error handling will be used)
		object.folders.removeAll '@ clear pre-set folder list
		'@ add folder paths to the list one by one
		for each strPath in arrFolderPaths
			object.folders.add( strPath )
		next
		onSetFolders.fire Me
	End Sub

	'@ combine data received from environment xml with QTP statements to get an Environment variable setup code
	Public Function generateEnvironmentConfigurationCode ( objEnvironmentSettingsNode )
		strCurrentMethod_ = "generateEnvironmentConfigurationCode"                   '@ note the method that will be executed - for logging
		strGenerateEnvironmentConfigurationCode_ = objEnvironmentSettingsNode.nodeName
		generateEnvironmentConfigurationCode = ""      '@ return an empty string on error
		on error resume next                           '@ switch off WSH error handling (custom error handling will be used)
		'@ add a new line of code for each child node
		for each xmlEnvSetting in objEnvironmentSettingsNode.ChildNodes
			strCode = strCode &"Environment.Value ( "& Chr(34) & xmlEnvSetting.nodeName & Chr(34) &" ) = "& Chr(34) & xmlEnvSetting.text & Chr(34) & vbNewLine
		next
		generateEnvironmentConfigurationCode = strCode '@ pass the result back to caller
		onGenerateEnvironmentConfigurationCode.fire Me
	End Function


	Public Function generateWorkflowExecutionCode ( objScenarioRecordset )
		strCurrentMethod_ = "generateWorkflowExecutionCode"                   '@ note the method that will be executed - for logging
		generateWorkflowExecutionCode = ""
			on error resume next
			objScenarioRecordset.movefirst
			while not objScenarioRecordset.EOF
'Chr(34) & rsTestDefinition.object ("STARTROW").value &"-"& rsTestDefinition.object ("ENDROW").value & Chr(34)
				strCode = strCode & "loadAndRunAction "& Chr(34) & objScenarioRecordset ("test") & Chr(34) &", "& Chr(34) & objScenarioRecordset ("action") & Chr(34) &", "& 0 & vbNewLine '&", "& _
									'Chr(34) & objScenarioRecordset ("data") & Chr(34) &", "& Chr (34) & replace ( rsProjectParameters.object ("DATABASE_CON_STRING").value, "Data Source=", "Data Source="& rsProjectLayout.object ("TEST_INPUT_DATABASE_PATH").value ) & Chr (34) & vbNewLine
				objScenarioRecordset.movenext
		wend

		objScenarioRecordset.moveFirst
		generateWorkflowExecutionCode = strCode
		onGenerateWorkflowExecutionCode.fire Me
	End Function
	

	Public sub run ( strResultsLocation, strTDRunName, lngTDTestInstance, strTDTestSet )
		strCurrentMethod_ = "run"
		set qtResultsopt = createObject ("quickTest.runResultsOptions")
		qtResultsopt.resultsLocation = strResultsLocation
		object.test.run qtResultsopt
		onRun.fire Me
	End sub

	Public sub openTest (strPath)
		strCurrentMethod_ = "openTest"
		strOpenTest_ = strPath
		on error resume next
		object.open strPath, false, false
		onOpenTest.fire me
	End sub

	public sub saveTest (strDestination)
		strCurrentMethod_ = "saveTest"
		strSaveTest_ = strDestination
		on error resume next
		qtApp.object.Test.SaveAs  strDestination, false, false
		onSaveTest.fire me
	end sub

	public sub importSheet (strLocalSheetName, strFileFullPath)
		strCurrentMethod_ = "importSheet"
		strImportSheet_ = strLocalSheetName & vbNewLine & strFileFullPath
		on error resume next
		object.test.datatable.AddSheet strLocalSheetName
		qtApp.object.test.dataTable.importSheet strFileFullPath, 1, strLocalSheetName
		onImportSheet.fire me
	end sub

    Public Function getAction ( strTest, strActionIndex )
        strCurrentMethod_ = "getAction"
        strGetAction_ = dictTestActions.item (strTest).item (strActionIndex)
		on error resume next
        getAction = qtApp.object.Test.Actions.Item (dictTestActions.item (strTest).item (strActionIndex)).getScript
    	onGetAction.fire me
    End Function

End Class


'@   C u s t o m   F i l e   S y s t e m   O b j e c t   C l a s s

Class clsFileSystem

	Public onMoveFolder, object, onCreateFolder, onDeleteFolder, onCopyFile
	Private strCurrentMethod_, strMoveFolder_, strCreateFolder_, strDeleteFolder_, strCopyFile_

	private sub class_initialize ()
		set object = createobject("scripting.filesystemobject")
		set onMoveFolder = new clsHandlers '@ create event object (each event object is a collection of function refferences with an ability to be executed (fired))
		set onCreateFolder = new clsHandlers                      
		set onDeleteFolder = new clsHandlers
		set onCopyFile = new clsHandlers
	end sub

	private sub class_terminate ()
		set object = nothing
	end sub

	public property get properties ()
		set dictProperties = createObject ("scripting.dictionary")
		dictProperties.add "method", strCurrentMethod_
		dictProperties.add "moveFolder", strMoveFolder_
		dictProperties.add "createFolder", strCreateFolder_
		dictProperties.add "deleteFolder", strDeleteFolder_
		dictProperties.add "copyFile", strCopyFile_
		set properties = dictProperties
	end property

	public sub moveFolder (strFolderToMove, strFolderNew)
		strCurrentMethod_ = "moveFolder"            '@ note the method that will be executed - for logging
		strMoveFolder_ = strFolderToMove & vbNewLine & strFolderNew
		on error resume next
		'fs.object.moveFolder strFolderToMove, strFolderNew
		object.copyFolder strFolderToMove, strFolderNew
		object.deleteFolder strFolderToMove, true
		onMoveFolder.fire Me
	end sub

	public sub copyFile (strFileToCopy, strFileNew)
		strCurrentMethod_ = "copyFile"            '@ note the method that will be executed - for logging
		strCopyFile_ = strFileToCopy & vbNewLine & strFileNew
		on error resume next
		'fs.object.moveFolder strFolderToMove, strFolderNew
		object.copyFile strFileToCopy, strFileNew
		onCopyFile.fire Me
	end sub

	public sub createFolder (strFolderToCreate)
		strCurrentMethod_ = "createFolder"            '@ note the method that will be executed - for logging
		strCreateFolder_ = strFolderToCreate
		on error resume next
		object.createFolder strFolderToCreate
		
		onCreateFolder.fire Me
	end sub

	public sub deleteFolder (strFolderToDelete)
		strCurrentMethod_ = "deleteFolder"           
		strDeleteFolder_ = strFolderToDelete
		on error resume next
		object.deleteFolder strFolderToDelete
		
		onDeleteFolder.fire Me
	end sub

	

End Class


'@   E v e n t s   Cl a s s   c l s E v e n t s

Class clsHandlers

	'@ declare variables that will only be used within the class
	Private arrHandlers_ ()

	'@ this function runs each time object is initialized from this class
	Private Sub Class_Initialize ()
		ReDim arrHandlers_ (-1) '@ initiate a dynamic array with no elements in it
	End Sub

	'@ add an array of handler function raferences to local storage array
	Public Sub addHandler ( arrFunctionNames )
		'@ iterate through the array of function names
		for each strFunctionName in arrFunctionNames
			ReDim Preserve arrHandlers_ ( UBound ( arrHandlers_ ) +1)                 '@ add an emty element to local storage array
			Set arrHandlers_ ( UBound ( arrHandlers_ ) ) = GetRef ( strFunctionName ) '@ set a reference of the current function name to the last added element
		next
	End Sub

	'@ execute the handler functions
	Public Sub fire ( args )
		'@ run the handlers stored in local array one by one
		for each refHandler in arrHandlers_
			refHandler args
		next
	End Sub

End Class










'@	E V E N T   H A N D L E R S
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'@   E r r o r   H a n d l e r s

'@ quit the script in case an error was raised (either in one of the user defined objects, or in handler functions, that are meant to be checkpoints)
Sub quitScriptOnError (objCaller)
	if err.number <> 0 then : wscript.quit
End Sub

'@ check if any of the current recordset fields are empty and raise error if so
Sub raiseErrorForEmptyFieldValue (objCaller)
	for each objField in objCaller.object.fields
		if objField.value = "" Then
			on error resume next              
			err.raise 1, , "the required field "& objField.name &" is empty"
		end if
	next
End Sub

'@ check if raised error is due denied permissions
Sub quitOnPermissionDeniedError (objCaller)
	if err.description = "Permission denied" then : wscript.quit
End Sub

'@ check if current recordset is empty
Sub raiseErrorForEmptyRecordset (objCaller)
	'@ switch off WSH error handling (custom error handling will be used) and raise a user error if no records found
	if objCaller.object.recordCount = 0 then : on error resume next : err.raise 1, , "no scheduled records found"
End sub

'@ check if current recordset is empty
Sub raiseErrorForAnyRecords (objCaller)
	'@ switch off WSH error handling (custom error handling will be used) and raise a user error if no records found
	if objCaller.object.recordCount <> 0 then : on error resume next : err.raise 1, , "I found some orphan records, which are in your test case table, but the keyword isn't available, table name below  "
End sub

'@ check if current recordset is empty
Sub raiseErrorForMissingAction (objCaller)
	'@Raise an error if one is already present. Workaround for bizarre VBScript failing
	if err.number <> 0 then : on error resume next : err.raise 1, , "One of the actions is not in the containing script"
End sub

'@ log methods to txt
Sub logEventToHtml (objCaller)
	const READ = 1, WRITE = 2, APPEND = 8
	
	set fso = createobject ("scripting.filesystemobject")
	set file = fs.object.OpenTextFile (fs.object.buildPath (createobject ("wscript.shell").CurrentDirectory, createObject ("WScript.Network").ComputerName &"-"& wscript.scriptname &".html"), APPEND, true)

	if err.number <> 0 then : file.writeline " <table><tr class='err'>"& err.description  &"</tr></table>"
	
	file.writeline "<table>"
	file.writeline "<tr>"
	file.write "<td class='date'>" : file.write now : file.write "</td>"
	file.write "<td class='class'>" : file.write typeName (objCaller) : file.write "</td>"
	file.write "<td class='method'>" : file.write objCaller.properties () ("method") : file.write "</td>"
	file.write "<td class='content'>" : file.write replace (objCaller.properties () (objCaller.properties () ("method")), vbNewLine, "<br />")  : file.write "</td>"
	file.writeline "</tr>"
	file.writeline "</table>"
	file.writeline "<link rel='stylesheet' type='text/css' href='mystyle.css' />"
End Sub


'@   L o g   H a n d l e r s

'@ log caller properties to Application Events log
Sub logCallerPropertiesAsApplicationEvent (objCaller)
	const EVNT_TYPE = 2                                       '@ warning type of an event
	set dictProperties = objCaller.properties
	strMsg = TypeName ( objCaller ) & vbNewLine
	'@ get caller property names and their current values
	for each strProperty in dictProperties.keys
		strMsg = strMsg & vbNewLine & strProperty &": "& dictProperties.Item ( strProperty )
	next
	createobject ("WScript.Shell").LogEvent EVNT_TYPE, strMsg '@ send the message to Application Events log
End Sub

'@ log err object details to Application Events log
Sub logErrorAsApplicationEvent (objCaller)
	const EVNT_TYPE = 2                                                                                            '@ warning type of an event
	if err.number = 0 then : exit sub                                                                              '@ check if there is a raised error, if not - exit procedure
	strMsg = TypeName ( objCaller ) & vbNewLine & objCaller.properties () ("method") & vbNewLine & err.description '@ create the message to be logged
	createobject ("WScript.Shell").LogEvent EVNT_TYPE, strMsg                                                      '@ send the message to Application Events log
End Sub


'@ updateField status field of the scheduled recordset with current date and time
Sub updateTestDefinitionRecordStatus (objCaller)
	if typename ( objCaller ) = "clsRecordSet" Then : rsTestDefinition.updateField "STATUS", "selected" : exit sub
	if typename ( objCaller ) = "clsQuickTestApplication" and objCaller.properties ()("method") = "importSheet" Then : rsTestDefinition.updateField "STATUS", now
End Sub



'@-------------------------------------
'@
'    I N F O
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'
'    FRIENDS LIFE DORKING TEST AUTOMATION TEAM
'    11/05/2011











'    S C R I P T                                                                            
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'@   G e t   f r a m e w o r k   c o r e   p a r a m e t e r s

    Set rsProjectParameters = new clsRecordSet '@ initialize an RS object from a user-defined class
    '@ add an array of function references (handlers in Event Handling section) to objects' event objects (events)
    '@ each event object is a collection of function refferences with an ability to be executed (fired)
    rsProjectParameters.onAddRecord.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")
    rsProjectParameters.onAddRecord.addHandler array ("raiseErrorForEmptyFieldValue", _
                                        "logEventToHtml", _
                                        "quitScriptOnError")

    rsProjectParameters.addFields array ("HOST_NAME", _
                                "PROJECT_ROOT_PATH", _
                                "PROJECT_DB_NAME")
    rsProjectParameters.open ""

    '@ add first record to recordset (values to headers) (number of values has to match the number of headers as there is a direct relation between them)
      rsProjectParameters.addRecord rsProjectParameters.listHeaders, array (createObject ("WScript.Network").ComputerName, _
													createObject ("WScript.Shell").Environment ("USER") ("AF_PROJECT_ROOT_PATH"), _
                                                    createObject ("WScript.Shell").Environment ("USER") ("PROJECT_DB_NAME"))



'@   C o m b i n e   p a t h   l o g i c   i n to   l a y o u t   r e co r d s e t

    set rsProjectLayout = new clsRecordSet
    rsProjectLayout.onAddFields.addHandler array ("logEventToHtml")
    rsProjectLayout.onAddRecord.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")
    rsProjectLayout.onUpdateField.addHandler array ("logEventToHtml")

    '@ create recordset headers, and empty record
    rsProjectLayout.addFields array ("PROJECT_DATABASE_PATH", _
                            "PROJECT_SOURCE_WORKSPACE_PATH", _
                            "PROJECT_BUILD_WORKSPACE_PATH", _
                            "SOURCE_BASELINE_PATH", _
                            "BUILD_BASELINE_PATH", _
                            "TEST_VAULT_BASELINE_PATH", _
                            "REPORT_VAULT_BASELINE_PATH",_
                            "REPORT_TEST_VAULT_PATH",_
                            "REPORT_PATH", _
                            "TEST_PATH")
    rsProjectLayout.open ""
    rsProjectLayout.addRecord rsProjectLayout.listHeaders, array ("", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "")

    set fs = new clsFileSystem
    fs.onCreateFolder.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")
    fs.onGetYearMonthDay.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")

    rsProjectLayout.updateField "PROJECT_DATABASE_PATH", fs.object.buildPath (rsProjectParameters.object ("PROJECT_ROOT_PATH").value, _
                                rsProjectParameters.object ("PROJECT_DB_NAME").value)



'@   R e t r i e v e   t e s t   s c h e d u l e   r e c o r d s   f r o m   p r o j e c t   d a t a b a s e

    set rsTestSchedule = new clsRecordSet
    rsTestSchedule.onConnect.addHandler array ("logEventToHtml", _
                                    "quitScriptOnError")
    rsTestSchedule.onOpen.addHandler array ("logEventToHtml", _
                                    "quitScriptOnError")
    rsTestSchedule.onOpen.addHandler array ("raiseErrorForEmptyRecordset", _
                                    "quitScriptOnError")
    rsTestSchedule.onOpen.addHandler array ("updateTestScheduleRecordStatus")
    rsTestSchedule.onupdateField.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")


    '@ connect to scheduler and get a recordset with the first record that matches the conditional statement
    rsTestSchedule.connect rsProjectLayout.object ("PROJECT_DATABASE_PATH").value
    rsTestSchedule.open "SELECT TOP 1 RELEASE, " +_ 
                                "TEST, " +_
                                "HOST, " +_
                                "TIME, " +_
                                "STATUS, " +_
                                "DEPENDENCY, " +_
								"QCTESTSETFOLDER, " +_
                                "QCTESTSET, " +_
                                "QCDOMAIN, " +_
                                "QCPROJECT " +_
                    "FROM A_SCHEDULE "+_
                    "WHERE HOST='"& rsProjectParameters.object ("HOST_NAME").value &"' "+_
                        "AND DATEDIFF(""n"", TIME, now()) < 500 "+_
                        "AND STATUS='run';"



'@   C h e c k   t h e   s t a t u s   o f   t h e   d e p e n d e n t   t e s t   a n d   q u i t   i f   n o t   p a s s e d


    '@Take the dependency text from selected record - which is a unique and relatively non-moving part of the test name
    '@If there is no dependency none of the searching is necessary, nor the objects

    If Not(IsNull(rsTestSchedule.object.fields("DEPENDENCY").Value)) Then
        strDependency  = rsTestSchedule.object.fields("DEPENDENCY").Value

        set rsTestDependency = new clsRecordSet
        rsTestDependency.onConnect.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")
        rsTestDependency.onOpen.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")
        rsTestDependency.connect rsProjectLayout.object ("PROJECT_DATABASE_PATH").value

        rsTestDependency.open "SELECT STATUS FROM A_SCHEDULE WHERE InStr(TEST, '" & strDependency & "') AND STATUS = 'Passed'"

        If rsTestDependency.object.recordcount = 0 Then 

            '@change test schedule record to waiting
            rsTestSchedule.updateField "STATUS", "waiting"

            '@Quit the script
            wscript.quit
        End If
    End If



'@   C o n s t r  u c t   p r o j e c t   w o r k s p a c e   p a t h   m a p

    rsProjectLayout.updateField "PROJECT_SOURCE_WORKSPACE_PATH", fs.object.buildPath (rsProjectParameters.object ("PROJECT_ROOT_PATH").value, "source")
    rsProjectLayout.updateField "SOURCE_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("PROJECT_SOURCE_WORKSPACE_PATH"), rsTestSchedule.object ("RELEASE").value)

    rsProjectLayout.updateField "PROJECT_BUILD_WORKSPACE_PATH", fs.object.buildPath (rsProjectParameters.object ("PROJECT_ROOT_PATH").value, "build")
    rsProjectLayout.updateField "BUILD_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("PROJECT_BUILD_WORKSPACE_PATH").value, rsTestSchedule.object ("RELEASE").value)

    rsProjectLayout.updateField "TEST_VAULT_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("BUILD_BASELINE_PATH").value, "tests")
    rsProjectLayout.updateField "REPORT_VAULT_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("BUILD_BASELINE_PATH").value, "reports")

    rsProjectLayout.updateField "REPORT_TEST_VAULT_PATH", fs.object.buildPath (rsProjectLayout.object ("REPORT_VAULT_BASELINE_PATH").value, rsTestSchedule.object ("TEST").value)
    rsProjectLayout.updateField "REPORT_PATH", fs.object.buildPath (rsProjectLayout.object ("REPORT_TEST_VAULT_PATH").value, CStr(fs.getYearMonthDay (now) & hour (now) & minute (now)))
    rsProjectLayout.updateField "TEST_PATH", fs.object.buildPath (rsProjectLayout.object ("TEST_VAULT_BASELINE_PATH").value, rsTestSchedule.object ("TEST").value)

'@   L a u n c h   Q T P

    set qtApp = new clsQuickTestApplication

    qtApp.onOpen.addHandler array ("logEventToHtml", _
                            "quitScriptOnError")
    qtApp.onOpenTest.addHandler array ("logEventToHtml")
    qtApp.onRun.addHandler array ("logEventToHtml", "updateTestScheduleRecordStatus")

    qtApp.close : qtApp.open



'@   R u n   t e s t

    '@ Create report vault path map if it does not exist
    if not fs.object.folderExists (rsProjectLayout.object ("REPORT_VAULT_BASELINE_PATH").value) then : fs.createFolder (rsProjectLayout.object ("REPORT_VAULT_BASELINE_PATH").value)
    if not fs.object.folderExists (rsProjectLayout.object ("REPORT_TEST_VAULT_PATH").value) then : fs.createFolder (rsProjectLayout.object ("REPORT_TEST_VAULT_PATH").value)
    if not fs.object.folderExists (rsProjectLayout.object ("REPORT_PATH").value) then : fs.createFolder (rsProjectLayout.object ("REPORT_PATH").value)

    '@ Open scheduled AT and run it
    qtApp.openTest rsProjectLayout.object ("TEST_PATH").value
    qtApp.run rsProjectLayout.object ("REPORT_PATH").value


'@   L o g    s c h e d u l e d   t e s t   r e c o  r d


    set rsLog = new clsRecordSet
    rsLog.onOpen.addHandler array ("logEventToHtml")
    rsLog.onAddRecord.addHandler array ("logEventToHtml")
    rsLog.onUpdateField.addHandler array ("logEventToHtml")

    rsLog.connect rsProjectLayout.object ("PROJECT_DATABASE_PATH").value
    rsLog.open "SELECT * FROM A_SCHEDULE_HISTORY"
    rsLog.addRecord rsTestSchedule.listHeaders, split (rsTestSchedule.object.GetString (, 1, ","), ",")
    rsLog.updateField "RESULTS", rsProjectLayout.object ("REPORT_PATH").value



'@   U p d a t e   Q u a l i t y   C e n t e r   w i t h   T e s t   R e s u l t 

'@   If project database table A_Schedule, QCTestSetFolderUpdate contains
'@   a value then update the test in Quality Center

    'If Not IsEmpty(rsLog.object ("QCTestSetFolder").value) Then
'        Set objUpdateTestResult = new clsQC
'        '@Not logging event as displays hardcoded password
'        objUpdateTestResult.onSubConnectToQC.addHandler array ("logEventToHtml", _
'                                              "quitScriptOnError")
'        objUpdateTestResult.onSubSetTestSet.addHandler array ("logEventToHtml", _
'                                              "quitScriptOnError")
'        objUpdateTestResult.onSubSetTest.addHandler array ("logEventToHtml", _
'                                              "quitScriptOnError")
'        objUpdateTestResult.onGetTestStatus.addHandler array ("logEventToHtml", _
'                                              "quitScriptOnError")
'        objUpdateTestResult.onSubInitialiseRunInQC.addHandler array ("logEventToHtml", _
'                                              "quitScriptOnError")
'        objUpdateTestResult.onSubUpdateQC.addHandler array ("logEventToHtml", _
'                                              "quitScriptOnError")
'        rsLog.object.fields("QCPROJECT").value = Replace(rsLog.object.fields("QCPROJECT").value, VBNewLine, "")
'        objUpdateTestResult.subConnectToQC "http://sdora255/qcbin", rsLog.object.fields("QCDOMAIN").value, "NGS_Release2", "kavang", "tnUmxjiW"
'
'        objUpdateTestResult.subSetTestSet rsLog.object.fields("QCTestSet").value, _
'                                          rsLog.object.fields("QCTestSetFolder").value
'
'        objUpdateTestResult.subSetTest rsLog.object.fields("TEST").value
'
'         objUpdateTestResult.subInitialiseRunInQC
'
'         objUpdateTestResult.subUpdateQC qtApp.object.test.lastRunResults.status
'   '     objUpdateTestResult.subUpdateQC "Passed"
'   '     objUpdateTestResult.subUpdateQC "Failed"
    'End If








'    U S E R - D E F I N E D   C L A S S E S                                                    
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'@   C o n n e c t e d   R e c o r d s e t   C l a s s   c l s C o n n e c t e d R e c o r d S e t

Class clsRecordSet

    '@ declare variables that will be accessed from the global script
    Public object, onConnect, onOpen, onupdateField, onAddRecord, onExport, onAddFields
    
    '@ declare variables that will only be used within the class
    Private strCurrentMethod_, arrHeaders_, strConnect_, strOpen_, strupdateField_, strAddRecord_, strExport_, strAddFields_
    
    '@ this function runs each time object is initialized from this class
    Private Sub Class_Initialize ()
        set object =  createObject ("ADODB.RecordSet") '@ create an object that will be an interface to Recordset class of ADODB library (COM)
        '@ create event objects (each event object is a collection of function refferences with an ability to be executed (fired))
        set onConnect = new clsHandlers
        set onOpen = new clsHandlers
        set onupdateField = new clsHandlers
        set onAddRecord = new clsHandlers
        set onExport = new clsHandlers
        set onAddFields = new clsHandlers
    End Sub
    
    '@ this function runs each time the object  is released
    Private Sub Class_Terminate ()
        on error resume next '@ switch off the WSH error handling (in case when the object is released before the connection to DB is made)
        object.close         '@ close a recordset
    End Sub
    
    '@ a class property, that collects most important object properties and class variables into one object - for logging
    Public Property Get properties ()
        set dictProperties = createObject ("scripting.dictionary")
        dictProperties.add "method", strCurrentMethod_
        dictProperties.add "connect", strConnect_
        dictProperties.add "open", strOpen_
        dictProperties.add "updateField", strupdateField_
        dictProperties.add "addRecord", strAddRecord_
        dictProperties.add "export", strExport_
        dictProperties.add "addFields", strAddFields_
        set properties = dictProperties
    End Property
    
    '@ set recordset connection to DB
    Public Sub connect (strDataBaseFullPath)
        strCurrentMethod_ = "connect" '@ note the method that will be executed - for logging
        strConnect_ = strDataBaseFullPath
        on error resume next '@ switch off WSH error handling (custom error handling will be used)
        object.ActiveConnection = "Provider = Microsoft.Jet.OLEDB.4.0; Data Source = "& strDataBaseFullPath '@ set DB connection string, that automatically creates the connection object
        onConnect.fire Me '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End sub

    '@ open a recordset by executing an sql query
    Public Sub open (strSql)
        strCurrentMethod_ = "open" '@ note the method that will be executed - for logging
        strOpen_ = strSql
        on error resume next '@ switch off WSH error handling (custom error handling will be used)
            '@ set recordset parameters before openning it (these parameters are properties of ADODB Recordset class and can be found in MSDN for reference)
            object.cursorType = 3 '@ a static cursor allowing forward and backward scrolling of a fixed, unchangeable set of records
            object.lockType = 3 '@ multiple users can modify the data which is not locked until updateField method is called
            object.open strSql '@ return (open) a recordset by executing SQL
            onOpen.fire Me '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End Sub
    
    '@ updateField a recordset field with new value
    Public Sub updateField (strField, strNewValue)
        strCurrentMethod_ = "updateField"
        strupdateField_ = strField & vbNewLine & strNewValue
        on error resume next
            object (strField) = strNewValue '@ assign new value to a field
            object.update '@ updateField a recordset (save)
            onupdateField.fire Me
    End Sub
    
    '@ add a new record of values to recordset
    Public Sub addRecord (arrHeaders, arrValues)
        strCurrentMethod_ = "addRecord"
        on error resume next
            strAddRecord_ = join (arrHeaders, vbNewLine) & vbNewLine & vbNewLine & join (arrValues, vbNewLine)
            object.AddNew arrHeaders, arrValues '@ add a new record of values to a pre-set array of recordset fields
            onAddRecord.fire Me
    End Sub

    public sub export (intIterations, strFilePath)
        strCurrentMethod_ = "export"
        strExport_ = intIterations & vbNewLine & strFilePath
        set myFile = createObject ("scripting.FileSystemObject").createTextFile (strFilePath)
        myFile.WriteLine join (listHeaders, vbTab)
        a = intIterations \ object.recordCount
        b = intIterations mod object.recordCount
        for i = 1 to a
            myFile.Write object.getString (2,, vbTab,, "")
            object.moveFirst
        next
        if b <> 0 then : myFile.WriteLine object.getString (2, b, vbTab,, "")
        myFile.Close
        onExport.fire me
    end sub

    public function listHeaders ()
        ReDim arrHeaders (-1)
        for each field in object.fields
            Redim Preserve arrHeaders (UBound (arrHeaders) +1)
            arrHeaders (UBound(arrHeaders)) = field.name
        next
        listHeaders = arrHeaders
    end function

    public function listValues ()
        ReDim arrValues (-1)
        for each fld in object.Fields
            ReDim preserve arrValues (UBound (arrValues) +1)
            arrValues (UBound (arrValues)) = fld.value
        next
    listValues = arrValues
    end function

    '@ set up a disconnected recordset with array of fields and pre-set (constant) field parameters
    public Sub addFields (arrHeaders)
        strCurrentMethod_ = "addFields"
        strAddFields_ = arrHeaders '@ note the array of recordset headers as an internal variable
        const FIELD_TYPE = 200 '@ numeric value for a recordset field (string type)
        const MAX_CHAR = 1024 '@ recordset field size
        on error resume next
            '@ add fields to recordset with pre-set parameters
            For Each strHeader in arrHeaders
                object.fields.append strHeader, FIELD_TYPE, MAX_CHAR
            Next
            onAddFields.fire Me
    end Sub

End Class


'@   Q t p   C l a s s   c l s Q u i c k T e st A p p l i c a t i o n

Class clsQuickTestApplication

    '@ declare variables that will be accessed from the global script
    Public object, onAddCodeToAction, onOpen, onConnect, onRun, onSetFolders, onGenerateEnvironmentConfigurationCode, onGenerateWorkflowExecutionCode, onOpenTest, onSaveTest, onImportSheet

    '@ declare variables that will only be used within the class
    Private strCurrentMethod_, strConnect_, strAddCodeToAction_, strSetFolders_, strGenerateEnvironmentConfigurationCode_, strOpenTest_, strSaveTest_, strImportSheet_, strRun_

    '@ this function runs each time object is initialized from this class
    Private Sub Class_Initialize ()
        '@ create event objects (each event object is a collection of function refferences with an ability to be executed (fired))
        set onAddCodeToAction = new clsHandlers
        set onOpen = new clsHandlers
        set onConnect = new clsHandlers
        set onRun = new clsHandlers
        set onSetFolders = new clsHandlers
        set onGenerateEnvironmentConfigurationCode = new clsHandlers
        set onGenerateWorkflowExecutionCode = new clsHandlers
        set onOpenTest = new clsHandlers
        set onSaveTest = new clsHandlers
        set onImportSheet = new clsHandlers
    End Sub

    '@ a class property, that collects most important object properties and class variables into one object - for logging
    Public Property Get properties ()
        set dictProperties = createObject ("scripting.dictionary")
        dictProperties.add "method", strCurrentMethod_
        dictProperties.add "open", strOpen_
        dictProperties.add "connect", strConnect_
        dictProperties.add "setFolders", strSetFolders_
        dictProperties.add "addCodeToAction", strAddCodeToAction_
        dictproperties.add "generateEnvironmentConfigurationCode", strGenerateEnvironmentConfigurationCode_
        dictProperties.add "openTest", strOpenTest_
        dictProperties.add "saveTest", strSaveTest_
        dictProperties.add "importSheet", strImportSheet_
        dictProperties.add "run", strRun_
        set properties = dictProperties
    End Property

    '@ launch QTP
    Public Sub open ()
        strCurrentMethod_ = "open"                          '@ note the method that will be executed - for logging
        on error resume next                                '@ switch off WSH error handling (custom error handling will be used)
        set object = createObject ("QuickTest.Application") '@ create an object that will be an interface to Application class of QuickTest library (COM)
'msgBox(Err.Description)
        object.Launch                                       '@ launch application
'msgBox(Err.Description)
        object.Visible = TRUE                               '@ make application UI visible
'msgBox(Err.Description)
        onOpen.fire Me                                      '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End Sub

    '@ force close QTP
    Public Sub close ()
        strCurrentMethod_ = "close"
        on error resume next '@ switch off WSH error handling (custom error handling will be used)
        object.quit          '@ quit application
        wscript.sleep 2000   '@ allow 2 seconds before checking if application is closed
        '@ kill all qtp related processes if they are still in the process list
        for each objProcess in getObject ("winmgmts:").InstancesOf ("Win32_process")
            if objProcess.name = "QTPro.exe" or objProcess.name = "QTReport.exe" then : objProcess.terminate
        next
    End Sub

    '@ initiate a connection between QTP and QC
    Public Sub connect (strUrl, strDomain, strProject, strUserName, strPassword, blnEncrypted)
        strCurrentMethod_ = "connect"                                                                     '@ note the method that will be executed - for logging
        strConnect_ = strUrl & vbNewLine & strDomain & vbNewLine &  strProject & vbNewLine &  strUserName & vbNewLine &  strPassword & vbNewLine &  blnEncrypted
        on error resume next                                                                              '@ switch off WSH error handling (custom error handling will be used)
        if object.TDConnection.IsConnected then : object.TDConnection.disconnect
        object.TDConnection.connect strUrl, strDomain, strProject, strUserName, strPassword, blnEncrypted '@ connect to QC project
        onConnect.fire Me                                                                                 '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End Sub

    '@ add any string to an action by action index
    Public Sub addCodeToAction ( intActionIndex, strCode )
        strCurrentMethod_ = "addCodeToAction"                   '@ note the method that will be executed - for logging
        strAddCodeToAction_ =  intActionIndex & vbNewLine & strCode
        on error resume next                                    '@ switch off WSH error handling (custom error handling will be used)
        object.Test.Actions( intActionIndex ).setScript object.Test.Actions( intActionIndex ).getScript & vbNewLine & strCode '@ set code to action
        onAddCodeToAction.fire Me                               '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End Sub

    '@ add an array of lookup folders to QTP options
    Public Sub setFolders ( arrFolderPaths )
        strCurrentMethod_ = "setFolders"                   '@ note the method that will be executed - for logging
        strSetFolders_ = join(arrFolderPaths, vbNewLine)
        on error resume next     '@ switch off WSH error handling (custom error handling will be used)
        object.folders.removeAll '@ clear pre-set folder list
        '@ add folder paths to the list one by one
        for each strPath in arrFolderPaths
            object.folders.add( strPath )
        next
        onSetFolders.fire Me
    End Sub

    '@ combine data received from environment xml with QTP statements to get an Environment variable setup code
    Public Function generateEnvironmentConfigurationCode ( objEnvironmentSettingsNode )
        strCurrentMethod_ = "generateEnvironmentConfigurationCode"                   '@ note the method that will be executed - for logging
        strGenerateEnvironmentConfigurationCode_ = objEnvironmentSettingsNode.nodeName
        generateEnvironmentConfigurationCode = ""      '@ return an empty string on error
        on error resume next                           '@ switch off WSH error handling (custom error handling will be used)
        '@ add a new line of code for each child node
        for each xmlEnvSetting in objEnvironmentSettingsNode.ChildNodes
            strCode = strCode &"Environment.Value ( "& Chr(34) & xmlEnvSetting.nodeName & Chr(34) &" ) = "& Chr(34) & xmlEnvSetting.text & Chr(34) & vbNewLine
        next
        generateEnvironmentConfigurationCode = strCode '@ pass the result back to caller
        onGenerateEnvironmentConfigurationCode.fire Me
    End Function


    Public Function generateWorkflowExecutionCode ( objScenarioRecordset )
        strCurrentMethod_ = "generateWorkflowExecutionCode"                   '@ note the method that will be executed - for logging
        generateWorkflowExecutionCode = ""
            on error resume next
            objScenarioRecordset.movefirst
            while not objScenarioRecordset.EOF
'Chr(34) & rsTestDefinition.object ("STARTROW").value &"-"& rsTestDefinition.object ("ENDROW").value & Chr(34)
                strCode = strCode & "loadAndRunAction "& Chr(34) & objScenarioRecordset ("test") & Chr(34) &", "& Chr(34) & objScenarioRecordset ("action") & Chr(34) &", "& 0 & vbNewLine '&", "& _
                                    'Chr(34) & objScenarioRecordset ("data") & Chr(34) &", "& Chr (34) & replace ( rsProjectParameters.object ("DATABASE_CON_STRING").value, "Data Source=", "Data Source="& rsProjectLayout.object ("TEST_INPUT_DATABASE_PATH").value ) & Chr (34) & vbNewLine
                objScenarioRecordset.movenext
        wend

        objScenarioRecordset.moveFirst
        generateWorkflowExecutionCode = strCode
        onGenerateWorkflowExecutionCode.fire Me
    End Function
    

    Public sub run (strResultsLocation)
        strCurrentMethod_ = "run"
        strRun_ = strResultsLocation
        on error resume next
        set qtResultsopt = createObject ("quickTest.runResultsOptions")
        qtResultsopt.resultsLocation = strResultsLocation
        object.test.run qtResultsopt
        onRun.fire Me
    End sub

    Public sub openTest (strPath)
        strCurrentMethod_ = "openTest"
        strOpenTest_ = strPath
        on error resume next
        object.open strPath, false, false
        onOpenTest.fire me
    End sub

    public sub saveTest (strDestination)
        strCurrentMethod_ = "saveTest"
        strSaveTest_ = strDestination
        on error resume next
        qtApp.object.Test.SaveAs  strDestination, false, false
        onSaveTest.fire me
    end sub

    public sub importSheet (strLocalSheetName, strFileFullPath)
        strCurrentMethod_ = "importSheet"
        strImportSheet_ = strLocalSheetName & vbNewLine & strFileFullPath
        on error resume next
        object.test.datatable.AddSheet strLocalSheetName
        qtApp.object.test.dataTable.importSheet strFileFullPath, 1, strLocalSheetName
        onImportSheet.fire me
    end sub

End Class


'@   C u s t o m   F i l e   S y s t e m   O b j e c t   C l a s s

Class clsFileSystem

    Public onMoveFolder, object, onCreateFolder, onDeleteFolder, onCopyFile, onGetYearMonthDay
    Private strCurrentMethod_, strMoveFolder_, strCreateFolder_, strDeleteFolder_, strCopyFile_, strGetYearMonthDay_

    private sub class_initialize ()
        set object = createobject("scripting.filesystemobject")
        set onMoveFolder = new clsHandlers '@ create event object (each event object is a collection of function refferences with an ability to be executed (fired))
        set onCreateFolder = new clsHandlers                      
        set onDeleteFolder = new clsHandlers
        set onCopyFile = new clsHandlers
        set onGetYearMonthDay = new clsHandlers                      '@ create event object (each event object is a collection of function refferences with an ability to be executed (fired))
    end sub

    private sub class_terminate ()
        set object = nothing
    end sub

    public property get properties ()
        set dictProperties = createObject ("scripting.dictionary")
        dictProperties.add "method", strCurrentMethod_
        dictProperties.add "moveFolder", strMoveFolder_
        dictProperties.add "createFolder", strCreateFolder_
        dictProperties.add "deleteFolder", strDeleteFolder_
        dictProperties.add "copyFile", strCopyFile_
        dictProperties.add "getYearMonthDay", strGetYearMonthDay_
        set properties = dictProperties
    end property

    public sub moveFolder (strFolderToMove, strFolderNew)
        strCurrentMethod_ = "moveFolder"            '@ note the method that will be executed - for logging
        strMoveFolder_ = strFolderToMove & vbNewLine & strFolderNew
        on error resume next
        'fs.object.moveFolder strFolderToMove, strFolderNew
        object.copyFolder strFolderToMove, strFolderNew
        object.deleteFolder strFolderToMove, true
        onMoveFolder.fire Me
    end sub

    public sub copyFile (strFileToCopy, strFileNew)
        strCurrentMethod_ = "copyFile"            '@ note the method that will be executed - for logging
        strCopyFile_ = strFileToCopy & vbNewLine & strFileNew
        on error resume next
        'fs.object.moveFolder strFolderToMove, strFolderNew
        object.copyFile strFileToCopy, strFileNew
        onCopyFile.fire Me
    end sub

    public sub createFolder (strFolderToCreate)
        strCurrentMethod_ = "createFolder"            '@ note the method that will be executed - for logging
        strCreateFolder_ = strFolderToCreate
        on error resume next
        object.createFolder strFolderToCreate
        
        onCreateFolder.fire Me
    end sub

    public sub deleteFolder (strFolderToDelete)
        strCurrentMethod_ = "deleteFolder"           
        strDeleteFolder_ = strFolderToDelete
        on error resume next
        object.deleteFolder strFolderToDelete
        
        onDeleteFolder.fire Me
    end sub

    public function getYearMonthDay (datDate)
        strCurrentMethod_   = "getYearMonthDay"            '@ note the method that will be executed - for logging
        strGetYearMonthDay_ = datDate
        on error resume next
        Dim strDay
        Dim strMonth
        Dim strYear

        strDay   = Cstr(Day(datDate))
        If Len(strDay) = 1 Then
            strDay = "0" & strDay
        End If
        strMonth = Cstr(Month(datDate))
        If Len(strMonth) = 1 Then
            strMonth = "0" & strMonth
        End If
        strYear  = Cstr(Year(datDate))

        getYearMonthDay = strYear & strMonth & strDay 

        onGetYearMonthDay.fire Me
    end Function 'getYearMonthDay


End Class


'@   E v e n t s   Cl a s s   c l s E v e n t s

Class clsHandlers

    '@ declare variables that will only be used within the class
    Private arrHandlers_ ()

    '@ this function runs each time object is initialized from this class
    Private Sub Class_Initialize ()
        ReDim arrHandlers_ (-1) '@ initiate a dynamic array with no elements in it
    End Sub

    '@ add an array of handler function raferences to local storage array
    Public Sub addHandler ( arrFunctionNames )
        '@ iterate through the array of function names
        for each strFunctionName in arrFunctionNames
            ReDim Preserve arrHandlers_ ( UBound ( arrHandlers_ ) +1)                 '@ add an emty element to local storage array
            Set arrHandlers_ ( UBound ( arrHandlers_ ) ) = GetRef ( strFunctionName ) '@ set a reference of the current function name to the last added element
        next
    End Sub

    '@ execute the handler functions
    Public Sub fire ( args )
        '@ run the handlers stored in local array one by one
        for each refHandler in arrHandlers_
            refHandler args
        next
    End Sub

End Class



'@   Quality Center O b j e c t   C l a s s

Class clsQC

    '@ declare variables that will be accessed from the global script
    Public onBase64Decode, onSubConnectToQC, onSubSetTestSet, onSubSetTest, _
           onGetTestStatus, onSubInitialiseRunInQC, onSubUpdateQC
    Private strCurrentMethod_, strBase64Decode_, ts_CurrentTestSet, t_CurrentTest, strSubSetTest_, QCConnection, _
            strSubConnectToQC_, strSubSetTestSet_, _
            strGetTestStatus_, strSubInitialiseRunInQC_, strSubUpdateQC_, strUserName_

    private sub class_initialize ()
        set object            = createobject("scripting.filesystemobject")
        set onBase64Decode   = new clsHandlers '@ create event object (each event object is a collectistr of functistr refferences with an ability to be executed (fired))
        set onSubConnectToQC = new clsHandlers '@ create event object (each event object is a collectistr of functistr refferences with an ability to be executed (fired))
        set onSubSetTestSet  = new clsHandlers '@ create event object (each event object is a collectistr of functistr refferences with an ability to be executed (fired))
        set onSubSetTest     = new clsHandlers '@ create event object (each event object is a collectistr of functistr refferences with an ability to be executed (fired))
        set onGetTestStatus  = new clsHandlers '@ create event object (each event object is a collectistr of functistr refferences with an ability to be executed (fired))
        set onSubInitialiseRunInQC = new clsHandlers '@ create event object (each event object is a collectistr of functistr refferences with an ability to be executed (fired))
        set onSubUpdateQC    = new clsHandlers '@ create event object (each event object is a collectistr of functistr refferences with an ability to be executed (fired))
    end sub

    Public Property Get properties ()

        set dictProperties = createObject ("scripting.dictionary")
        dictProperties.add "method"              , strCurrentMethod_
        dictProperties.add "base64Decode"        , strBase64Decode_
        dictProperties.add "subConnectToQC"      , strSubConnectToQC_
        dictProperties.add "subSetTestSet"       , strSubSetTestSet_
        dictProperties.add "subSetTest"          , strSubSetTest_
        dictProperties.add "getTestStatus"       , strGetTestStatus_
        dictProperties.add "subInitialiseRunInQC", strSubInitialiseRunInQC_
        dictProperties.add "subUpdateQC"         , strSubUpdateQC_
        set properties = dictProperties

    End Property

    '@ Connect to a QC Project
    Public Sub subConnectToQC(strQCServerAddress, strDomain, strProject, strUserName, strPassword)
        strCurrentMethod_   = "subConnectToQC"            '@ note the method that will be executed - for logging
        strSubConnectToQC_  = strQCServerAddress & ", " & _
                              strDomain          & ", " & _
                              strProject         & ", " & _
                              strUserName        & ", " & _
                              strPassword
        strUserName_ = strUserName
        on error resume next
        Set QCConnection = CreateObject("TDAPIOLE80.TDConnection")
        QCConnection.InitConnectionEx strQCServerAddress
        QCConnection.ConnectProjectEx strDomain, strProject, strUserName, strPassword
        onSubConnectToQC.fire Me

    End Sub

                '@ Find the specified test set in QC
    Public Sub subSetTestSet(strTestSetName, strTestSetFolderName)
        strCurrentMethod_     = "subSetTestSet"            '@ note the method that will be executed - for logging
        strSubSetTestSet_     = strTestSetName & ", " & strTestSetFolderName
        str_TestSetName = strTestSetName
        on error resume next
        str_TestSetFolderName = strTestSetFolderName
        '@ The record set last field strTestSetName has a carriage return as the last character
        '@Not definitely true - removed although might be needed in future
        '@ which prevents TestSetFactory finding the test set
        'intCarriageReturn = 13
        'If AscB(RightB(strTestSetName, 2 )) = intCarriageReturn Then
        '    intStringLength = LenB(strTestSetName)
        '    str_TestSetName = LeftB(strTestSetName, (intStringLength - 2))
        'Else
        '    str_TestSetName = strTestSetName
        'End If

        Set tsFac = QCConnection.TestSetFactory
        Set tsFacList = tsFac.NewList("") '@ Get a list of all the test sets in QC project

        '@ Search the list
        For i = 1 to tsFacList.count

            If tsFacList.item(i).name = str_TestSetName Then
                '@Check the parent folder matches the expected given as an argument to this function
                If tsFacList.item(i).TestSetFolder.Name = strTestSetFolderName Then
                    blnFound = true
                    Exit For
                End If
            End If
        Next

                                '@ Raise an error for the handling to report
        If Not(blnFound)then
            On Error Resume Next
            Err.Raise 1, , "Test <" & strTestName & "> or parent Test Set <" & strTestSetName & "> not found in Test Plan"
            Exit Sub
        End If

        '@ Set found test set to be current one for class
        Set ts_CurrentTestSet = tsFacList.item(i)
        onSubSetTestSet.fire Me

    End Sub

    '@ Find the specified test, using the test set above
    Public Sub subSetTest(strTestName)
        strCurrentMethod_ = "subSetTest"            '@ note the method that will be executed - for logging
        strSubSetTest_    = strTestName
        on error resume next
        '@ Create a filter
        Set CurrentTSTestFactory = ts_CurrentTestSet.TSTestFactory
        Set CurrentTSFilter = CurrentTSTestFactory.Filter

        '@ Set the Filter text for the Test name equal to the supplied parameter
        CurrentTSFilter.Filter("TS_NAME") = strSubSetTest_
        CurrentTSFilter.Refresh

        '@ Find a test with the supplied name
        Set TestList = CurrentTSTestFactory.NewList(CurrentTSFilter.Text)
    
        If Err.Number = 0 Or Err.Number = -2147467260 Then
                '@Set found test to be current one for class if no error
                Set t_CurrentTest = TestList.Item(1)
        End If
        onSubSetTest.fire Me

    End Sub

    '@ Get the current status displayed in a test set for the test 
    Public Property Get getTestStatus
        strCurrentMethod_   = "getTestStatus"            '@ note the method that will be executed - for logging
        strGetTestStatus_   = "strGetTestStatus_"
        On Error Resume Next
        '@ Retrieve the filter from the run factory object related to current test
        Set TSTestRunFactory = t_CurrentTest.RunFactory
        Set CurrentTSRunFilter = TSTestRunFactory.Filter
        '@ Refresh the status from QC
        CurrentTSRunFilter.Refresh
        Set TestRunList = TSTestRunFactory.NewList(CurrentTSRunFilter.Text) 

        '@ See if any runs exist for this test
        Set objCurrentRun = TestRunList.Item(TestRunList.Count)

        '@ Return the status, or no run if no status can be found
        If (Err.Number = 0) Then
            getTestStatus = objCurrentRun.Field("RN_STATUS")
        Else
            getTestStatus = "No Run"
        End If
        onGetTestStatus.fire Me

    End Property

    '@ Create a set of run details to update in QC
    Public Sub subInitialiseRunInQC
        strCurrentMethod_        = "subInitialiseRunInQC"            '@ note the method that will be executed - for logging
        strSubInitialiseRunInQC_ = "strSubInitialiseRunInQC_"
        On Error Resume Next
        Dim arrNewRunDetails(2), strRunName

        '@ Retrieve QC created run name
        Set TSTestRunFactory    = t_CurrentTest.RunFactory
        strRunName = TSTestRunFactory.UniqueRunName
        strLocalHost = createObject ("WScript.Network").ComputerName

        '@ Create array to place into QC
        arrNewRunDetails(0) = strRunName                             
        arrNewRunDetails(1) = strUserName_
        arrNewRunDetails(2) = strLocalHost

        Set objCurrentRun = TSTestRunFactory.AddItem(arrNewRunDetails)

        '@ Set data back to QC for an initialised run
        objCurrentRun.Field("RN_DURATION")                = 0
        objCurrentRun.Field("RN_RUN_NAME")              = strRunName
        objCurrentRun.Field("RN_STATUS")            = "Not Completed"
        objCurrentRun.Field("RN_HOST")              = strLocalHost
        objCurrentRun.Field("RN_USER_05")           = strUserName_

        objCurrentRun.post '@ Post to QC

        '@ Raise error for error handling
        If Err.Number <> 0 Then
            Err.Raise 1, , "Unable to create new test run <" & strTestName & "> in parent Test Set <" & strTestSetName & ">"
        End If
        onSubInitialiseRunInQC.fire Me

    End Sub

    '@ Update a set of run details in QC with a given status
    Public Sub subUpdateQC(strScenarioStatus)
        strCurrentMethod_  = "subUpdateQC"            '@ note the method that will be executed - for logging
        strSubUpdateQC_    = strScenarioStatus
        On Error Resume Next
        '@ Returns the filter for the current test and refreshes it from QC
        Set TSTestRunFactory    = t_CurrentTest.RunFactory
        Set CurrentTSRunFilter = TSTestRunFactory.Filter
        CurrentTSRunFilter.Refresh

        '@ Uses the filter to retrieve a test to update
        Set TestRunList = TSTestRunFactory.NewList(CurrentTSRunFilter.Text)
        Set objCurrentRun = TestRunList.Item(TestRunList.Count)

        '@The field in the test that needs to be updated
        objCurrentRun.Field("RN_STATUS") = strScenarioStatus

        objCurrentRun.Post '@ Post to QC
        onSubUpdateQC.fire Me

    End Sub

'@   F u n c t i o n s

'@ String decoder
    public function base64Decode(ByVal base64String)
      'rfc1521
      '1999 Antonin Foller, Motobit Software, http://Motobit.cz
      Const Base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
      Dim dataLength, sOut, groupBegin
      strCurrentMethod_   = "base64Decode"            '@ note the method that will be executed - for logging
      strbase64Decode_    = base64String
      on error resume next
      
      'remove white spaces, If any
      base64String = Replace(base64String, vbCrLf, "")
      base64String = Replace(base64String, vbTab, "")
      base64String = Replace(base64String, " ", "")
      
      'The source must consists from groups with Len of 4 chars
      dataLength = Len(base64String)
      If dataLength Mod 4 <> 0 Then
        Err.Raise 1, "base64Decode", "Bad Base64 string."
        Exit Function
      End If
    
      
      ' Now decode each group:
      For groupBegin = 1 To dataLength Step 4
        Dim numDataBytes, CharCounter, thisChar, thisData, nGroup, pOut
        ' Each data group encodes up To 3 actual bytes.
        numDataBytes = 3
        nGroup = 0
    
        For CharCounter = 0 To 3
          ' Convert each character into 6 bits of data, And add it To
          ' an integer For temporary storage.  If a character is a '=', there
          ' is one fewer data byte.  (There can only be a maximum of 2 '=' In
          ' the whole string.)
    
          thisChar = Mid(base64String, groupBegin + CharCounter, 1)
    
          If thisChar = "=" Then
            numDataBytes = numDataBytes - 1
            thisData = 0
          Else
            thisData = InStr(1, Base64, thisChar, vbBinaryCompare) - 1
          End If
          If thisData = -1 Then
            Err.Raise 2, "base64Decode", "Bad character In Base64 string."
            Exit Function
          End If
    
          nGroup = 64 * nGroup + thisData
        Next
        
        'Hex splits the long To 6 groups with 4 bits
        nGroup = Hex(nGroup)
        
        'Add leading zeros
        nGroup = String(6 - Len(nGroup), "0") & nGroup
        
        'Convert the 3 byte hex integer (6 chars) To 3 characters
        pOut = Chr(CByte("&H" & Mid(nGroup, 1, 2))) + _
          Chr(CByte("&H" & Mid(nGroup, 3, 2))) + _
          Chr(CByte("&H" & Mid(nGroup, 5, 2)))
        
        'add numDataBytes characters To out string
        sOut = sOut & Left(pOut, numDataBytes)
      Next
    
      base64Decode = sOut
'      onBase64Decode.fire Me
    End Function 'base64Decode(ByVal base64String)

End Class 'clsQC







'@    E V E N T   H A N D L E R S
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'@   E r r o r   H a n d l e r s

'@ quit the script in case an error was raised (either in one of the user defined objects, or in handler functions, that are meant to be checkpoints)
Sub quitScriptOnError (objCaller)
    if err.number <> 0 then : wscript.quit
End Sub

'@ check if any of the current recordset fields are empty and raise error if so
Sub raiseErrorForEmptyFieldValue (objCaller)
    for each objField in objCaller.object.fields
        if objField.value = "" Then
            on error resume next              
            err.raise 1, , "the required field "& objField.name &" is empty"
        end if
    next
End Sub

'@ check if raised error is due denied permissions
Sub quitOnPermissionDeniedError (objCaller)
    if err.description = "Permission denied" then : wscript.quit
End Sub

'@ check if current recordset is empty
Sub raiseErrorForEmptyRecordset (objCaller)
    '@ switch off WSH error handling (custom error handling will be used) and raise a user error if no records found
    if objCaller.object.recordCount = 0 then : on error resume next : err.raise 1, , "no scheduled records found"
End sub

'@ log methods to txt
Sub logEventToHtml (objCaller)
    const READ = 1, WRITE = 2, APPEND = 8
    
    set fso = createobject ("scripting.filesystemobject")
    set file = fs.object.OpenTextFile (fs.object.buildPath (createobject ("wscript.shell").CurrentDirectory, createObject ("WScript.Network").ComputerName &"-"& wscript.scriptname &".html"), APPEND, true)

    if err.number <> 0 then : file.writeline " <table><tr class='err'>"& err.description  &"</tr></table>"
    
    file.writeline "<table>"
    file.writeline "<tr>"
    file.write "<td class='date'>" : file.write now : file.write "</td>"
    file.write "<td class='class'>" : file.write typeName (objCaller) : file.write "</td>"
    file.write "<td class='method'>" : file.write objCaller.properties () ("method") : file.write "</td>"
    file.write "<td class='content'>" : file.write replace (objCaller.properties () (objCaller.properties () ("method")), vbNewLine, "<br />")  : file.write "</td>"
    file.writeline "</tr>"
    file.writeline "</table>"
    file.writeline "<link rel='stylesheet' type='text/css' href='mystyle.css' />"
End Sub


'@   L o g   H a n d l e r s

'@ log caller properties to Application Events log
Sub logCallerPropertiesAsApplicationEvent (objCaller)
    const EVNT_TYPE = 2                                       '@ warning type of an event
    set dictProperties = objCaller.properties
    strMsg = TypeName ( objCaller ) & vbNewLine
    '@ get caller property names and their current values
    for each strProperty in dictProperties.keys
        strMsg = strMsg & vbNewLine & strProperty &": "& dictProperties.Item ( strProperty )
    next
    createobject ("WScript.Shell").LogEvent EVNT_TYPE, strMsg '@ send the message to Application Events log
End Sub

'@ log err object details to Application Events log
Sub logErrorAsApplicationEvent (objCaller)
    const EVNT_TYPE = 2                                                                                            '@ warning type of an event
    if err.number = 0 then : exit sub                                                                              '@ check if there is a raised error, if not - exit procedure
    strMsg = TypeName ( objCaller ) & vbNewLine & objCaller.properties () ("method") & vbNewLine & err.description '@ create the message to be logged
    createobject ("WScript.Shell").LogEvent EVNT_TYPE, strMsg                                                      '@ send the message to Application Events log
End Sub

'@ updateField status field of the scheduled recordset with current date and time
Sub updateTestScheduleRecordStatus (objCaller)
    if typename ( objCaller ) = "clsRecordSet" Then : rsTestSchedule.updateField "STATUS", "selected" : exit sub
    if typename ( objCaller ) = "clsQuickTestApplication" and objCaller.properties ()("method") = "run" Then : rsTestSchedule.updateField "STATUS", qtApp.object.test.lastRunResults.status
End Sub


'@--'@---------------------------
'@4

'    I N F O
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'
'    FRIENDS LIFE DORKING TEST AUTOMATION TEAM
'    11/05/2011











'    S C R I P T                                                                            
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'@   G e t   f r a m e w o r k   c o r e   p a r a m e t e r s

    Set rsProjectParameters = new clsRecordSet '@ initialize an RS object from a user-defined class
    '@ add an array of function references (handlers in Event Handling section) to objects' event objects (events)
    '@ each event object is a collection of function refferences with an ability to be executed (fired)
    rsProjectParameters.onAddRecord.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")
    rsProjectParameters.onAddRecord.addHandler array ("raiseErrorForEmptyFieldValue", _
                                        "logEventToHtml", _
                                        "quitScriptOnError")

    rsProjectParameters.addFields array ("HOST_NAME", _
                                "PROJECT_ROOT_PATH", _
                                "PROJECT_DB_NAME")
    rsProjectParameters.open ""

    '@ add first record to recordset (values to headers) (number of values has to match the number of headers as there is a direct relation between them)
      rsProjectParameters.addRecord rsProjectParameters.listHeaders, array (createObject ("WScript.Network").ComputerName, _
													createObject ("WScript.Shell").Environment ("USER") ("AF_PROJECT_ROOT_PATH"), _
                                                    createObject ("WScript.Shell").Environment ("USER") ("PROJECT_DB_NAME"))



'@   C o m b i n e   p a t h   l o g i c   i n to   l a y o u t   r e co r d s e t

    set rsProjectLayout = new clsRecordSet
    rsProjectLayout.onAddFields.addHandler array ("logEventToHtml")
    rsProjectLayout.onAddRecord.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")
    rsProjectLayout.onUpdateField.addHandler array ("logEventToHtml")

    '@ create recordset headers, and empty record
    rsProjectLayout.addFields array ("PROJECT_DATABASE_PATH", _
                            "PROJECT_SOURCE_WORKSPACE_PATH", _
                            "PROJECT_BUILD_WORKSPACE_PATH", _
                            "SOURCE_BASELINE_PATH", _
                            "BUILD_BASELINE_PATH", _
                            "TEST_VAULT_BASELINE_PATH", _
                            "REPORT_VAULT_BASELINE_PATH",_
                            "REPORT_TEST_VAULT_PATH",_
                            "REPORT_PATH", _
                            "TEST_PATH")
    rsProjectLayout.open ""
    rsProjectLayout.addRecord rsProjectLayout.listHeaders, array ("", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "")

    set fs = new clsFileSystem
    fs.onCreateFolder.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")
    fs.onGetYearMonthDay.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")

    rsProjectLayout.updateField "PROJECT_DATABASE_PATH", fs.object.buildPath (rsProjectParameters.object ("PROJECT_ROOT_PATH").value, _
                                rsProjectParameters.object ("PROJECT_DB_NAME").value)



'@   R e t r i e v e   t e s t   s c h e d u l e   r e c o r d s   f r o m   p r o j e c t   d a t a b a s e

    set rsTestSchedule = new clsRecordSet
    rsTestSchedule.onConnect.addHandler array ("logEventToHtml", _
                                    "quitScriptOnError")
    rsTestSchedule.onOpen.addHandler array ("logEventToHtml", _
                                    "quitScriptOnError")
    rsTestSchedule.onOpen.addHandler array ("raiseErrorForEmptyRecordset", _
                                    "quitScriptOnError")
    rsTestSchedule.onOpen.addHandler array ("updateTestScheduleRecordStatus")
    rsTestSchedule.onupdateField.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")


    '@ connect to scheduler and get a recordset with the first record that matches the conditional statement
    rsTestSchedule.connect rsProjectLayout.object ("PROJECT_DATABASE_PATH").value
    rsTestSchedule.open "SELECT TOP 1 RELEASE, " +_ 
                                "TEST, " +_
                                "HOST, " +_
                                "TIME, " +_
                                "STATUS, " +_
                                "DEPENDENCY, " +_
								"QCTESTSETFOLDER, " +_
                                "QCTESTSET, " +_
                                "QCDOMAIN, " +_
                                "QCPROJECT " +_
                    "FROM A_SCHEDULE "+_
                    "WHERE HOST='"& rsProjectParameters.object ("HOST_NAME").value &"' "+_
                        "AND DATEDIFF(""n"", TIME, now()) < 500 "+_
                        "AND STATUS='run';"



'@   C h e c k   t h e   s t a t u s   o f   t h e   d e p e n d e n t   t e s t   a n d   q u i t   i f   n o t   p a s s e d


    '@Take the dependency text from selected record - which is a unique and relatively non-moving part of the test name
    '@If there is no dependency none of the searching is necessary, nor the objects

    If Not(IsNull(rsTestSchedule.object.fields("DEPENDENCY").Value)) Then
        strDependency  = rsTestSchedule.object.fields("DEPENDENCY").Value

        set rsTestDependency = new clsRecordSet
        rsTestDependency.onConnect.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")
        rsTestDependency.onOpen.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")
        rsTestDependency.connect rsProjectLayout.object ("PROJECT_DATABASE_PATH").value

        rsTestDependency.open "SELECT STATUS FROM A_SCHEDULE WHERE InStr(TEST, '" & strDependency & "') AND STATUS = 'Passed'"

        If rsTestDependency.object.recordcount = 0 Then 

            '@change test schedule record to waiting
            rsTestSchedule.updateField "STATUS", "waiting"

            '@Quit the script
            wscript.quit
        End If
    End If



'@   C o n s t r  u c t   p r o j e c t   w o r k s p a c e   p a t h   m a p

    rsProjectLayout.updateField "PROJECT_SOURCE_WORKSPACE_PATH", fs.object.buildPath (rsProjectParameters.object ("PROJECT_ROOT_PATH").value, "source")
    rsProjectLayout.updateField "SOURCE_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("PROJECT_SOURCE_WORKSPACE_PATH"), rsTestSchedule.object ("RELEASE").value)

    rsProjectLayout.updateField "PROJECT_BUILD_WORKSPACE_PATH", fs.object.buildPath (rsProjectParameters.object ("PROJECT_ROOT_PATH").value, "build")
    rsProjectLayout.updateField "BUILD_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("PROJECT_BUILD_WORKSPACE_PATH").value, rsTestSchedule.object ("RELEASE").value)

    rsProjectLayout.updateField "TEST_VAULT_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("BUILD_BASELINE_PATH").value, "tests")
    rsProjectLayout.updateField "REPORT_VAULT_BASELINE_PATH", fs.object.buildPath (rsProjectLayout.object ("BUILD_BASELINE_PATH").value, "reports")

    rsProjectLayout.updateField "REPORT_TEST_VAULT_PATH", fs.object.buildPath (rsProjectLayout.object ("REPORT_VAULT_BASELINE_PATH").value, rsTestSchedule.object ("TEST").value)
    rsProjectLayout.updateField "REPORT_PATH", fs.object.buildPath (rsProjectLayout.object ("REPORT_TEST_VAULT_PATH").value, CStr(fs.getYearMonthDay (now) & hour (now) & minute (now)))
    rsProjectLayout.updateField "TEST_PATH", fs.object.buildPath (rsProjectLayout.object ("TEST_VAULT_BASELINE_PATH").value, rsTestSchedule.object ("TEST").value)

'@   L a u n c h   Q T P

    set qtApp = new clsQuickTestApplication

    qtApp.onOpen.addHandler array ("logEventToHtml", _
                            "quitScriptOnError")
    qtApp.onOpenTest.addHandler array ("logEventToHtml")
    qtApp.onRun.addHandler array ("logEventToHtml", "updateTestScheduleRecordStatus")

    qtApp.close : qtApp.open



'@   R u n   t e s t

    '@ Create report vault path map if it does not exist
    if not fs.object.folderExists (rsProjectLayout.object ("REPORT_VAULT_BASELINE_PATH").value) then : fs.createFolder (rsProjectLayout.object ("REPORT_VAULT_BASELINE_PATH").value)
    if not fs.object.folderExists (rsProjectLayout.object ("REPORT_TEST_VAULT_PATH").value) then : fs.createFolder (rsProjectLayout.object ("REPORT_TEST_VAULT_PATH").value)
    if not fs.object.folderExists (rsProjectLayout.object ("REPORT_PATH").value) then : fs.createFolder (rsProjectLayout.object ("REPORT_PATH").value)

    '@ Open scheduled AT and run it
    qtApp.openTest rsProjectLayout.object ("TEST_PATH").value
    qtApp.run rsProjectLayout.object ("REPORT_PATH").value


'@   L o g    s c h e d u l e d   t e s t   r e c o  r d


    set rsLog = new clsRecordSet
    rsLog.onOpen.addHandler array ("logEventToHtml")
    rsLog.onAddRecord.addHandler array ("logEventToHtml")
    rsLog.onUpdateField.addHandler array ("logEventToHtml")

    rsLog.connect rsProjectLayout.object ("PROJECT_DATABASE_PATH").value
    rsLog.open "SELECT * FROM A_SCHEDULE_HISTORY"
    rsLog.addRecord rsTestSchedule.listHeaders, split (rsTestSchedule.object.GetString (, 1, ","), ",")
    rsLog.updateField "RESULTS", rsProjectLayout.object ("REPORT_PATH").value



'@   U p d a t e   Q u a l i t y   C e n t e r   w i t h   T e s t   R e s u l t 

'@   If project database table A_Schedule, QCTestSetFolderUpdate contains
'@   a value then update the test in Quality Center

    'If Not IsEmpty(rsLog.object ("QCTestSetFolder").value) Then
'        Set objUpdateTestResult = new clsQC
'        '@Not logging event as displays hardcoded password
'        objUpdateTestResult.onSubConnectToQC.addHandler array ("logEventToHtml", _
'                                              "quitScriptOnError")
'        objUpdateTestResult.onSubSetTestSet.addHandler array ("logEventToHtml", _
'                                              "quitScriptOnError")
'        objUpdateTestResult.onSubSetTest.addHandler array ("logEventToHtml", _
'                                              "quitScriptOnError")
'        objUpdateTestResult.onGetTestStatus.addHandler array ("logEventToHtml", _
'                                              "quitScriptOnError")
'        objUpdateTestResult.onSubInitialiseRunInQC.addHandler array ("logEventToHtml", _
'                                              "quitScriptOnError")
'        objUpdateTestResult.onSubUpdateQC.addHandler array ("logEventToHtml", _
'                                              "quitScriptOnError")
'        rsLog.object.fields("QCPROJECT").value = Replace(rsLog.object.fields("QCPROJECT").value, VBNewLine, "")
'        objUpdateTestResult.subConnectToQC "http://sdora255/qcbin", rsLog.object.fields("QCDOMAIN").value, "NGS_Release2", "kavang", "tnUmxjiW"
'
'        objUpdateTestResult.subSetTestSet rsLog.object.fields("QCTestSet").value, _
'                                          rsLog.object.fields("QCTestSetFolder").value
'
'        objUpdateTestResult.subSetTest rsLog.object.fields("TEST").value
'
'         objUpdateTestResult.subInitialiseRunInQC
'
'         objUpdateTestResult.subUpdateQC qtApp.object.test.lastRunResults.status
'   '     objUpdateTestResult.subUpdateQC "Passed"
'   '     objUpdateTestResult.subUpdateQC "Failed"
    'End If








'    U S E R - D E F I N E D   C L A S S E S                                                    
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'@   C o n n e c t e d   R e c o r d s e t   C l a s s   c l s C o n n e c t e d R e c o r d S e t

Class clsRecordSet

    '@ declare variables that will be accessed from the global script
    Public object, onConnect, onOpen, onupdateField, onAddRecord, onExport, onAddFields
    
    '@ declare variables that will only be used within the class
    Private strCurrentMethod_, arrHeaders_, strConnect_, strOpen_, strupdateField_, strAddRecord_, strExport_, strAddFields_
    
    '@ this function runs each time object is initialized from this class
    Private Sub Class_Initialize ()
        set object =  createObject ("ADODB.RecordSet") '@ create an object that will be an interface to Recordset class of ADODB library (COM)
        '@ create event objects (each event object is a collection of function refferences with an ability to be executed (fired))
        set onConnect = new clsHandlers
        set onOpen = new clsHandlers
        set onupdateField = new clsHandlers
        set onAddRecord = new clsHandlers
        set onExport = new clsHandlers
        set onAddFields = new clsHandlers
    End Sub
    
    '@ this function runs each time the object  is released
    Private Sub Class_Terminate ()
        on error resume next '@ switch off the WSH error handling (in case when the object is released before the connection to DB is made)
        object.close         '@ close a recordset
    End Sub
    
    '@ a class property, that collects most important object properties and class variables into one object - for logging
    Public Property Get properties ()
        set dictProperties = createObject ("scripting.dictionary")
        dictProperties.add "method", strCurrentMethod_
        dictProperties.add "connect", strConnect_
        dictProperties.add "open", strOpen_
        dictProperties.add "updateField", strupdateField_
        dictProperties.add "addRecord", strAddRecord_
        dictProperties.add "export", strExport_
        dictProperties.add "addFields", strAddFields_
        set properties = dictProperties
    End Property
    
    '@ set recordset connection to DB
    Public Sub connect (strDataBaseFullPath)
        strCurrentMethod_ = "connect" '@ note the method that will be executed - for logging
        strConnect_ = strDataBaseFullPath
        on error resume next '@ switch off WSH error handling (custom error handling will be used)
        object.ActiveConnection = "Provider = Microsoft.Jet.OLEDB.4.0; Data Source = "& strDataBaseFullPath '@ set DB connection string, that automatically creates the connection object
        onConnect.fire Me '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End sub

    '@ open a recordset by executing an sql query
    Public Sub open (strSql)
        strCurrentMethod_ = "open" '@ note the method that will be executed - for logging
        strOpen_ = strSql
        on error resume next '@ switch off WSH error handling (custom error handling will be used)
            '@ set recordset parameters before openning it (these parameters are properties of ADODB Recordset class and can be found in MSDN for reference)
            object.cursorType = 3 '@ a static cursor allowing forward and backward scrolling of a fixed, unchangeable set of records
            object.lockType = 3 '@ multiple users can modify the data which is not locked until updateField method is called
            object.open strSql '@ return (open) a recordset by executing SQL
            onOpen.fire Me '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End Sub
    
    '@ updateField a recordset field with new value
    Public Sub updateField (strField, strNewValue)
        strCurrentMethod_ = "updateField"
        strupdateField_ = strField & vbNewLine & strNewValue
        on error resume next
            object (strField) = strNewValue '@ assign new value to a field
            object.update '@ updateField a recordset (save)
            onupdateField.fire Me
    End Sub
    
    '@ add a new record of values to recordset
    Public Sub addRecord (arrHeaders, arrValues)
        strCurrentMethod_ = "addRecord"
        on error resume next
            strAddRecord_ = join (arrHeaders, vbNewLine) & vbNewLine & vbNewLine & join (arrValues, vbNewLine)
            object.AddNew arrHeaders, arrValues '@ add a new record of values to a pre-set array of recordset fields
            onAddRecord.fire Me
    End Sub

    public sub export (intIterations, strFilePath)
        strCurrentMethod_ = "export"
        strExport_ = intIterations & vbNewLine & strFilePath
        set myFile = createObject ("scripting.FileSystemObject").createTextFile (strFilePath)
        myFile.WriteLine join (listHeaders, vbTab)
        a = intIterations \ object.recordCount
        b = intIterations mod object.recordCount
        for i = 1 to a
            myFile.Write object.getString (2,, vbTab,, "")
            object.moveFirst
        next
        if b <> 0 then : myFile.WriteLine object.getString (2, b, vbTab,, "")
        myFile.Close
        onExport.fire me
    end sub

    public function listHeaders ()
        ReDim arrHeaders (-1)
        for each field in object.fields
            Redim Preserve arrHeaders (UBound (arrHeaders) +1)
            arrHeaders (UBound(arrHeaders)) = field.name
        next
        listHeaders = arrHeaders
    end function

    public function listValues ()
        ReDim arrValues (-1)
        for each fld in object.Fields
            ReDim preserve arrValues (UBound (arrValues) +1)
            arrValues (UBound (arrValues)) = fld.value
        next
    listValues = arrValues
    end function

    '@ set up a disconnected recordset with array of fields and pre-set (constant) field parameters
    public Sub addFields (arrHeaders)
        strCurrentMethod_ = "addFields"
        strAddFields_ = arrHeaders '@ note the array of recordset headers as an internal variable
        const FIELD_TYPE = 200 '@ numeric value for a recordset field (string type)
        const MAX_CHAR = 1024 '@ recordset field size
        on error resume next
            '@ add fields to recordset with pre-set parameters
            For Each strHeader in arrHeaders
                object.fields.append strHeader, FIELD_TYPE, MAX_CHAR
            Next
            onAddFields.fire Me
    end Sub

End Class


'@   Q t p   C l a s s   c l s Q u i c k T e st A p p l i c a t i o n

Class clsQuickTestApplication

    '@ declare variables that will be accessed from the global script
    Public object, onAddCodeToAction, onOpen, onConnect, onRun, onSetFolders, onGenerateEnvironmentConfigurationCode, onGenerateWorkflowExecutionCode, onOpenTest, onSaveTest, onImportSheet

    '@ declare variables that will only be used within the class
    Private strCurrentMethod_, strConnect_, strAddCodeToAction_, strSetFolders_, strGenerateEnvironmentConfigurationCode_, strOpenTest_, strSaveTest_, strImportSheet_, strRun_

    '@ this function runs each time object is initialized from this class
    Private Sub Class_Initialize ()
        '@ create event objects (each event object is a collection of function refferences with an ability to be executed (fired))
        set onAddCodeToAction = new clsHandlers
        set onOpen = new clsHandlers
        set onConnect = new clsHandlers
        set onRun = new clsHandlers
        set onSetFolders = new clsHandlers
        set onGenerateEnvironmentConfigurationCode = new clsHandlers
        set onGenerateWorkflowExecutionCode = new clsHandlers
        set onOpenTest = new clsHandlers
        set onSaveTest = new clsHandlers
        set onImportSheet = new clsHandlers
    End Sub

    '@ a class property, that collects most important object properties and class variables into one object - for logging
    Public Property Get properties ()
        set dictProperties = createObject ("scripting.dictionary")
        dictProperties.add "method", strCurrentMethod_
        dictProperties.add "open", strOpen_
        dictProperties.add "connect", strConnect_
        dictProperties.add "setFolders", strSetFolders_
        dictProperties.add "addCodeToAction", strAddCodeToAction_
        dictproperties.add "generateEnvironmentConfigurationCode", strGenerateEnvironmentConfigurationCode_
        dictProperties.add "openTest", strOpenTest_
        dictProperties.add "saveTest", strSaveTest_
        dictProperties.add "importSheet", strImportSheet_
        dictProperties.add "run", strRun_
        set properties = dictProperties
    End Property

    '@ launch QTP
    Public Sub open ()
        strCurrentMethod_ = "open"                          '@ note the method that will be executed - for logging
        on error resume next                                '@ switch off WSH error handling (custom error handling will be used)
        set object = createObject ("QuickTest.Application") '@ create an object that will be an interface to Application class of QuickTest library (COM)
'msgBox(Err.Description)
        object.Launch                                       '@ launch application
'msgBox(Err.Description)
        object.Visible = TRUE                               '@ make application UI visible
'msgBox(Err.Description)
        onOpen.fire Me                                      '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End Sub

    '@ force close QTP
    Public Sub close ()
        strCurrentMethod_ = "close"
        on error resume next '@ switch off WSH error handling (custom error handling will be used)
        object.quit          '@ quit application
        wscript.sleep 2000   '@ allow 2 seconds before checking if application is closed
        '@ kill all qtp related processes if they are still in the process list
        for each objProcess in getObject ("winmgmts:").InstancesOf ("Win32_process")
            if objProcess.name = "QTPro.exe" or objProcess.name = "QTReport.exe" then : objProcess.terminate
        next
    End Sub

    '@ initiate a connection between QTP and QC
    Public Sub connect (strUrl, strDomain, strProject, strUserName, strPassword, blnEncrypted)
        strCurrentMethod_ = "connect"                                                                     '@ note the method that will be executed - for logging
        strConnect_ = strUrl & vbNewLine & strDomain & vbNewLine &  strProject & vbNewLine &  strUserName & vbNewLine &  strPassword & vbNewLine &  blnEncrypted
        on error resume next                                                                              '@ switch off WSH error handling (custom error handling will be used)
        if object.TDConnection.IsConnected then : object.TDConnection.disconnect
        object.TDConnection.connect strUrl, strDomain, strProject, strUserName, strPassword, blnEncrypted '@ connect to QC project
        onConnect.fire Me                                                                                 '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End Sub

    '@ add any string to an action by action index
    Public Sub addCodeToAction ( intActionIndex, strCode )
        strCurrentMethod_ = "addCodeToAction"                   '@ note the method that will be executed - for logging
        strAddCodeToAction_ =  intActionIndex & vbNewLine & strCode
        on error resume next                                    '@ switch off WSH error handling (custom error handling will be used)
        object.Test.Actions( intActionIndex ).setScript object.Test.Actions( intActionIndex ).getScript & vbNewLine & strCode '@ set code to action
        onAddCodeToAction.fire Me                               '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End Sub

    '@ add an array of lookup folders to QTP options
    Public Sub setFolders ( arrFolderPaths )
        strCurrentMethod_ = "setFolders"                   '@ note the method that will be executed - for logging
        strSetFolders_ = join(arrFolderPaths, vbNewLine)
        on error resume next     '@ switch off WSH error handling (custom error handling will be used)
        object.folders.removeAll '@ clear pre-set folder list
        '@ add folder paths to the list one by one
        for each strPath in arrFolderPaths
            object.folders.add( strPath )
        next
        onSetFolders.fire Me
    End Sub

    '@ combine data received from environment xml with QTP statements to get an Environment variable setup code
    Public Function generateEnvironmentConfigurationCode ( objEnvironmentSettingsNode )
        strCurrentMethod_ = "generateEnvironmentConfigurationCode"                   '@ note the method that will be executed - for logging
        strGenerateEnvironmentConfigurationCode_ = objEnvironmentSettingsNode.nodeName
        generateEnvironmentConfigurationCode = ""      '@ return an empty string on error
        on error resume next                           '@ switch off WSH error handling (custom error handling will be used)
        '@ add a new line of code for each child node
        for each xmlEnvSetting in objEnvironmentSettingsNode.ChildNodes
            strCode = strCode &"Environment.Value ( "& Chr(34) & xmlEnvSetting.nodeName & Chr(34) &" ) = "& Chr(34) & xmlEnvSetting.text & Chr(34) & vbNewLine
        next
        generateEnvironmentConfigurationCode = strCode '@ pass the result back to caller
        onGenerateEnvironmentConfigurationCode.fire Me
    End Function


    Public Function generateWorkflowExecutionCode ( objScenarioRecordset )
        strCurrentMethod_ = "generateWorkflowExecutionCode"                   '@ note the method that will be executed - for logging
        generateWorkflowExecutionCode = ""
            on error resume next
            objScenarioRecordset.movefirst
            while not objScenarioRecordset.EOF
'Chr(34) & rsTestDefinition.object ("STARTROW").value &"-"& rsTestDefinition.object ("ENDROW").value & Chr(34)
                strCode = strCode & "loadAndRunAction "& Chr(34) & objScenarioRecordset ("test") & Chr(34) &", "& Chr(34) & objScenarioRecordset ("action") & Chr(34) &", "& 0 & vbNewLine '&", "& _
                                    'Chr(34) & objScenarioRecordset ("data") & Chr(34) &", "& Chr (34) & replace ( rsProjectParameters.object ("DATABASE_CON_STRING").value, "Data Source=", "Data Source="& rsProjectLayout.object ("TEST_INPUT_DATABASE_PATH").value ) & Chr (34) & vbNewLine
                objScenarioRecordset.movenext
        wend

        objScenarioRecordset.moveFirst
        generateWorkflowExecutionCode = strCode
        onGenerateWorkflowExecutionCode.fire Me
    End Function
    

    Public sub run (strResultsLocation)
        strCurrentMethod_ = "run"
        strRun_ = strResultsLocation
        on error resume next
        set qtResultsopt = createObject ("quickTest.runResultsOptions")
        qtResultsopt.resultsLocation = strResultsLocation
        object.test.run qtResultsopt
        onRun.fire Me
    End sub

    Public sub openTest (strPath)
        strCurrentMethod_ = "openTest"
        strOpenTest_ = strPath
        on error resume next
        object.open strPath, false, false
        onOpenTest.fire me
    End sub

    public sub saveTest (strDestination)
        strCurrentMethod_ = "saveTest"
        strSaveTest_ = strDestination
        on error resume next
        qtApp.object.Test.SaveAs  strDestination, false, false
        onSaveTest.fire me
    end sub

    public sub importSheet (strLocalSheetName, strFileFullPath)
        strCurrentMethod_ = "importSheet"
        strImportSheet_ = strLocalSheetName & vbNewLine & strFileFullPath
        on error resume next
        object.test.datatable.AddSheet strLocalSheetName
        qtApp.object.test.dataTable.importSheet strFileFullPath, 1, strLocalSheetName
        onImportSheet.fire me
    end sub

End Class


'@   C u s t o m   F i l e   S y s t e m   O b j e c t   C l a s s

Class clsFileSystem

    Public onMoveFolder, object, onCreateFolder, onDeleteFolder, onCopyFile, onGetYearMonthDay
    Private strCurrentMethod_, strMoveFolder_, strCreateFolder_, strDeleteFolder_, strCopyFile_, strGetYearMonthDay_

    private sub class_initialize ()
        set object = createobject("scripting.filesystemobject")
        set onMoveFolder = new clsHandlers '@ create event object (each event object is a collection of function refferences with an ability to be executed (fired))
        set onCreateFolder = new clsHandlers                      
        set onDeleteFolder = new clsHandlers
        set onCopyFile = new clsHandlers
        set onGetYearMonthDay = new clsHandlers                      '@ create event object (each event object is a collection of function refferences with an ability to be executed (fired))
    end sub

    private sub class_terminate ()
        set object = nothing
    end sub

    public property get properties ()
        set dictProperties = createObject ("scripting.dictionary")
        dictProperties.add "method", strCurrentMethod_
        dictProperties.add "moveFolder", strMoveFolder_
        dictProperties.add "createFolder", strCreateFolder_
        dictProperties.add "deleteFolder", strDeleteFolder_
        dictProperties.add "copyFile", strCopyFile_
        dictProperties.add "getYearMonthDay", strGetYearMonthDay_
        set properties = dictProperties
    end property

    public sub moveFolder (strFolderToMove, strFolderNew)
        strCurrentMethod_ = "moveFolder"            '@ note the method that will be executed - for logging
        strMoveFolder_ = strFolderToMove & vbNewLine & strFolderNew
        on error resume next
        'fs.object.moveFolder strFolderToMove, strFolderNew
        object.copyFolder strFolderToMove, strFolderNew
        object.deleteFolder strFolderToMove, true
        onMoveFolder.fire Me
    end sub

    public sub copyFile (strFileToCopy, strFileNew)
        strCurrentMethod_ = "copyFile"            '@ note the method that will be executed - for logging
        strCopyFile_ = strFileToCopy & vbNewLine & strFileNew
        on error resume next
        'fs.object.moveFolder strFolderToMove, strFolderNew
        object.copyFile strFileToCopy, strFileNew
        onCopyFile.fire Me
    end sub

    public sub createFolder (strFolderToCreate)
        strCurrentMethod_ = "createFolder"            '@ note the method that will be executed - for logging
        strCreateFolder_ = strFolderToCreate
        on error resume next
        object.createFolder strFolderToCreate
        
        onCreateFolder.fire Me
    end sub

    public sub deleteFolder (strFolderToDelete)
        strCurrentMethod_ = "deleteFolder"           
        strDeleteFolder_ = strFolderToDelete
        on error resume next
        object.deleteFolder strFolderToDelete
        
        onDeleteFolder.fire Me
    end sub

    public function getYearMonthDay (datDate)
        strCurrentMethod_   = "getYearMonthDay"            '@ note the method that will be executed - for logging
        strGetYearMonthDay_ = datDate
        on error resume next
        Dim strDay
        Dim strMonth
        Dim strYear

        strDay   = Cstr(Day(datDate))
        If Len(strDay) = 1 Then
            strDay = "0" & strDay
        End If
        strMonth = Cstr(Month(datDate))
        If Len(strMonth) = 1 Then
            strMonth = "0" & strMonth
        End If
        strYear  = Cstr(Year(datDate))

        getYearMonthDay = strYear & strMonth & strDay 

        onGetYearMonthDay.fire Me
    end Function 'getYearMonthDay


End Class


'@   E v e n t s   Cl a s s   c l s E v e n t s

Class clsHandlers

    '@ declare variables that will only be used within the class
    Private arrHandlers_ ()

    '@ this function runs each time object is initialized from this class
    Private Sub Class_Initialize ()
        ReDim arrHandlers_ (-1) '@ initiate a dynamic array with no elements in it
    End Sub

    '@ add an array of handler function raferences to local storage array
    Public Sub addHandler ( arrFunctionNames )
        '@ iterate through the array of function names
        for each strFunctionName in arrFunctionNames
            ReDim Preserve arrHandlers_ ( UBound ( arrHandlers_ ) +1)                 '@ add an emty element to local storage array
            Set arrHandlers_ ( UBound ( arrHandlers_ ) ) = GetRef ( strFunctionName ) '@ set a reference of the current function name to the last added element
        next
    End Sub

    '@ execute the handler functions
    Public Sub fire ( args )
        '@ run the handlers stored in local array one by one
        for each refHandler in arrHandlers_
            refHandler args
        next
    End Sub

End Class



'@   Quality Center O b j e c t   C l a s s

Class clsQC

    '@ declare variables that will be accessed from the global script
    Public onBase64Decode, onSubConnectToQC, onSubSetTestSet, onSubSetTest, _
           onGetTestStatus, onSubInitialiseRunInQC, onSubUpdateQC
    Private strCurrentMethod_, strBase64Decode_, ts_CurrentTestSet, t_CurrentTest, strSubSetTest_, QCConnection, _
            strSubConnectToQC_, strSubSetTestSet_, _
            strGetTestStatus_, strSubInitialiseRunInQC_, strSubUpdateQC_, strUserName_

    private sub class_initialize ()
        set object            = createobject("scripting.filesystemobject")
        set onBase64Decode   = new clsHandlers '@ create event object (each event object is a collectistr of functistr refferences with an ability to be executed (fired))
        set onSubConnectToQC = new clsHandlers '@ create event object (each event object is a collectistr of functistr refferences with an ability to be executed (fired))
        set onSubSetTestSet  = new clsHandlers '@ create event object (each event object is a collectistr of functistr refferences with an ability to be executed (fired))
        set onSubSetTest     = new clsHandlers '@ create event object (each event object is a collectistr of functistr refferences with an ability to be executed (fired))
        set onGetTestStatus  = new clsHandlers '@ create event object (each event object is a collectistr of functistr refferences with an ability to be executed (fired))
        set onSubInitialiseRunInQC = new clsHandlers '@ create event object (each event object is a collectistr of functistr refferences with an ability to be executed (fired))
        set onSubUpdateQC    = new clsHandlers '@ create event object (each event object is a collectistr of functistr refferences with an ability to be executed (fired))
    end sub

    Public Property Get properties ()

        set dictProperties = createObject ("scripting.dictionary")
        dictProperties.add "method"              , strCurrentMethod_
        dictProperties.add "base64Decode"        , strBase64Decode_
        dictProperties.add "subConnectToQC"      , strSubConnectToQC_
        dictProperties.add "subSetTestSet"       , strSubSetTestSet_
        dictProperties.add "subSetTest"          , strSubSetTest_
        dictProperties.add "getTestStatus"       , strGetTestStatus_
        dictProperties.add "subInitialiseRunInQC", strSubInitialiseRunInQC_
        dictProperties.add "subUpdateQC"         , strSubUpdateQC_
        set properties = dictProperties

    End Property

    '@ Connect to a QC Project
    Public Sub subConnectToQC(strQCServerAddress, strDomain, strProject, strUserName, strPassword)
        strCurrentMethod_   = "subConnectToQC"            '@ note the method that will be executed - for logging
        strSubConnectToQC_  = strQCServerAddress & ", " & _
                              strDomain          & ", " & _
                              strProject         & ", " & _
                              strUserName        & ", " & _
                              strPassword
        strUserName_ = strUserName
        on error resume next
        Set QCConnection = CreateObject("TDAPIOLE80.TDConnection")
        QCConnection.InitConnectionEx strQCServerAddress
        QCConnection.ConnectProjectEx strDomain, strProject, strUserName, strPassword
        onSubConnectToQC.fire Me

    End Sub

                '@ Find the specified test set in QC
    Public Sub subSetTestSet(strTestSetName, strTestSetFolderName)
        strCurrentMethod_     = "subSetTestSet"            '@ note the method that will be executed - for logging
        strSubSetTestSet_     = strTestSetName & ", " & strTestSetFolderName
        str_TestSetName = strTestSetName
        on error resume next
        str_TestSetFolderName = strTestSetFolderName
        '@ The record set last field strTestSetName has a carriage return as the last character
        '@Not definitely true - removed although might be needed in future
        '@ which prevents TestSetFactory finding the test set
        'intCarriageReturn = 13
        'If AscB(RightB(strTestSetName, 2 )) = intCarriageReturn Then
        '    intStringLength = LenB(strTestSetName)
        '    str_TestSetName = LeftB(strTestSetName, (intStringLength - 2))
        'Else
        '    str_TestSetName = strTestSetName
        'End If

        Set tsFac = QCConnection.TestSetFactory
        Set tsFacList = tsFac.NewList("") '@ Get a list of all the test sets in QC project

        '@ Search the list
        For i = 1 to tsFacList.count

            If tsFacList.item(i).name = str_TestSetName Then
                '@Check the parent folder matches the expected given as an argument to this function
                If tsFacList.item(i).TestSetFolder.Name = strTestSetFolderName Then
                    blnFound = true
                    Exit For
                End If
            End If
        Next

                                '@ Raise an error for the handling to report
        If Not(blnFound)then
            On Error Resume Next
            Err.Raise 1, , "Test <" & strTestName & "> or parent Test Set <" & strTestSetName & "> not found in Test Plan"
            Exit Sub
        End If

        '@ Set found test set to be current one for class
        Set ts_CurrentTestSet = tsFacList.item(i)
        onSubSetTestSet.fire Me

    End Sub

    '@ Find the specified test, using the test set above
    Public Sub subSetTest(strTestName)
        strCurrentMethod_ = "subSetTest"            '@ note the method that will be executed - for logging
        strSubSetTest_    = strTestName
        on error resume next
        '@ Create a filter
        Set CurrentTSTestFactory = ts_CurrentTestSet.TSTestFactory
        Set CurrentTSFilter = CurrentTSTestFactory.Filter

        '@ Set the Filter text for the Test name equal to the supplied parameter
        CurrentTSFilter.Filter("TS_NAME") = strSubSetTest_
        CurrentTSFilter.Refresh

        '@ Find a test with the supplied name
        Set TestList = CurrentTSTestFactory.NewList(CurrentTSFilter.Text)
    
        If Err.Number = 0 Or Err.Number = -2147467260 Then
                '@Set found test to be current one for class if no error
                Set t_CurrentTest = TestList.Item(1)
        End If
        onSubSetTest.fire Me

    End Sub

    '@ Get the current status displayed in a test set for the test 
    Public Property Get getTestStatus
        strCurrentMethod_   = "getTestStatus"            '@ note the method that will be executed - for logging
        strGetTestStatus_   = "strGetTestStatus_"
        On Error Resume Next
        '@ Retrieve the filter from the run factory object related to current test
        Set TSTestRunFactory = t_CurrentTest.RunFactory
        Set CurrentTSRunFilter = TSTestRunFactory.Filter
        '@ Refresh the status from QC
        CurrentTSRunFilter.Refresh
        Set TestRunList = TSTestRunFactory.NewList(CurrentTSRunFilter.Text) 

        '@ See if any runs exist for this test
        Set objCurrentRun = TestRunList.Item(TestRunList.Count)

        '@ Return the status, or no run if no status can be found
        If (Err.Number = 0) Then
            getTestStatus = objCurrentRun.Field("RN_STATUS")
        Else
            getTestStatus = "No Run"
        End If
        onGetTestStatus.fire Me

    End Property

    '@ Create a set of run details to update in QC
    Public Sub subInitialiseRunInQC
        strCurrentMethod_        = "subInitialiseRunInQC"            '@ note the method that will be executed - for logging
        strSubInitialiseRunInQC_ = "strSubInitialiseRunInQC_"
        On Error Resume Next
        Dim arrNewRunDetails(2), strRunName

        '@ Retrieve QC created run name
        Set TSTestRunFactory    = t_CurrentTest.RunFactory
        strRunName = TSTestRunFactory.UniqueRunName
        strLocalHost = createObject ("WScript.Network").ComputerName

        '@ Create array to place into QC
        arrNewRunDetails(0) = strRunName                             
        arrNewRunDetails(1) = strUserName_
        arrNewRunDetails(2) = strLocalHost

        Set objCurrentRun = TSTestRunFactory.AddItem(arrNewRunDetails)

        '@ Set data back to QC for an initialised run
        objCurrentRun.Field("RN_DURATION")                = 0
        objCurrentRun.Field("RN_RUN_NAME")              = strRunName
        objCurrentRun.Field("RN_STATUS")            = "Not Completed"
        objCurrentRun.Field("RN_HOST")              = strLocalHost
        objCurrentRun.Field("RN_USER_05")           = strUserName_

        objCurrentRun.post '@ Post to QC

        '@ Raise error for error handling
        If Err.Number <> 0 Then
            Err.Raise 1, , "Unable to create new test run <" & strTestName & "> in parent Test Set <" & strTestSetName & ">"
        End If
        onSubInitialiseRunInQC.fire Me

    End Sub

    '@ Update a set of run details in QC with a given status
    Public Sub subUpdateQC(strScenarioStatus)
        strCurrentMethod_  = "subUpdateQC"            '@ note the method that will be executed - for logging
        strSubUpdateQC_    = strScenarioStatus
        On Error Resume Next
        '@ Returns the filter for the current test and refreshes it from QC
        Set TSTestRunFactory    = t_CurrentTest.RunFactory
        Set CurrentTSRunFilter = TSTestRunFactory.Filter
        CurrentTSRunFilter.Refresh

        '@ Uses the filter to retrieve a test to update
        Set TestRunList = TSTestRunFactory.NewList(CurrentTSRunFilter.Text)
        Set objCurrentRun = TestRunList.Item(TestRunList.Count)

        '@The field in the test that needs to be updated
        objCurrentRun.Field("RN_STATUS") = strScenarioStatus

        objCurrentRun.Post '@ Post to QC
        onSubUpdateQC.fire Me

    End Sub

'@   F u n c t i o n s

'@ String decoder
    public function base64Decode(ByVal base64String)
      'rfc1521
      '1999 Antonin Foller, Motobit Software, http://Motobit.cz
      Const Base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"
      Dim dataLength, sOut, groupBegin
      strCurrentMethod_   = "base64Decode"            '@ note the method that will be executed - for logging
      strbase64Decode_    = base64String
      on error resume next
      
      'remove white spaces, If any
      base64String = Replace(base64String, vbCrLf, "")
      base64String = Replace(base64String, vbTab, "")
      base64String = Replace(base64String, " ", "")
      
      'The source must consists from groups with Len of 4 chars
      dataLength = Len(base64String)
      If dataLength Mod 4 <> 0 Then
        Err.Raise 1, "base64Decode", "Bad Base64 string."
        Exit Function
      End If
    
      
      ' Now decode each group:
      For groupBegin = 1 To dataLength Step 4
        Dim numDataBytes, CharCounter, thisChar, thisData, nGroup, pOut
        ' Each data group encodes up To 3 actual bytes.
        numDataBytes = 3
        nGroup = 0
    
        For CharCounter = 0 To 3
          ' Convert each character into 6 bits of data, And add it To
          ' an integer For temporary storage.  If a character is a '=', there
          ' is one fewer data byte.  (There can only be a maximum of 2 '=' In
          ' the whole string.)
    
          thisChar = Mid(base64String, groupBegin + CharCounter, 1)
    
          If thisChar = "=" Then
            numDataBytes = numDataBytes - 1
            thisData = 0
          Else
            thisData = InStr(1, Base64, thisChar, vbBinaryCompare) - 1
          End If
          If thisData = -1 Then
            Err.Raise 2, "base64Decode", "Bad character In Base64 string."
            Exit Function
          End If
    
          nGroup = 64 * nGroup + thisData
        Next
        
        'Hex splits the long To 6 groups with 4 bits
        nGroup = Hex(nGroup)
        
        'Add leading zeros
        nGroup = String(6 - Len(nGroup), "0") & nGroup
        
        'Convert the 3 byte hex integer (6 chars) To 3 characters
        pOut = Chr(CByte("&H" & Mid(nGroup, 1, 2))) + _
          Chr(CByte("&H" & Mid(nGroup, 3, 2))) + _
          Chr(CByte("&H" & Mid(nGroup, 5, 2)))
        
        'add numDataBytes characters To out string
        sOut = sOut & Left(pOut, numDataBytes)
      Next
    
      base64Decode = sOut
'      onBase64Decode.fire Me
    End Function 'base64Decode(ByVal base64String)

End Class 'clsQC







'@    E V E N T   H A N D L E R S
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'@   E r r o r   H a n d l e r s

'@ quit the script in case an error was raised (either in one of the user defined objects, or in handler functions, that are meant to be checkpoints)
Sub quitScriptOnError (objCaller)
    if err.number <> 0 then : wscript.quit
End Sub

'@ check if any of the current recordset fields are empty and raise error if so
Sub raiseErrorForEmptyFieldValue (objCaller)
    for each objField in objCaller.object.fields
        if objField.value = "" Then
            on error resume next              
            err.raise 1, , "the required field "& objField.name &" is empty"
        end if
    next
End Sub

'@ check if raised error is due denied permissions
Sub quitOnPermissionDeniedError (objCaller)
    if err.description = "Permission denied" then : wscript.quit
End Sub

'@ check if current recordset is empty
Sub raiseErrorForEmptyRecordset (objCaller)
    '@ switch off WSH error handling (custom error handling will be used) and raise a user error if no records found
    if objCaller.object.recordCount = 0 then : on error resume next : err.raise 1, , "no scheduled records found"
End sub

'@ log methods to txt
Sub logEventToHtml (objCaller)
    const READ = 1, WRITE = 2, APPEND = 8
    
    set fso = createobject ("scripting.filesystemobject")
    set file = fs.object.OpenTextFile (fs.object.buildPath (createobject ("wscript.shell").CurrentDirectory, createObject ("WScript.Network").ComputerName &"-"& wscript.scriptname &".html"), APPEND, true)

    if err.number <> 0 then : file.writeline " <table><tr class='err'>"& err.description  &"</tr></table>"
    
    file.writeline "<table>"
    file.writeline "<tr>"
    file.write "<td class='date'>" : file.write now : file.write "</td>"
    file.write "<td class='class'>" : file.write typeName (objCaller) : file.write "</td>"
    file.write "<td class='method'>" : file.write objCaller.properties () ("method") : file.write "</td>"
    file.write "<td class='content'>" : file.write replace (objCaller.properties () (objCaller.properties () ("method")), vbNewLine, "<br />")  : file.write "</td>"
    file.writeline "</tr>"
    file.writeline "</table>"
    file.writeline "<link rel='stylesheet' type='text/css' href='mystyle.css' />"
End Sub


'@   L o g   H a n d l e r s

'@ log caller properties to Application Events log
Sub logCallerPropertiesAsApplicationEvent (objCaller)
    const EVNT_TYPE = 2                                       '@ warning type of an event
    set dictProperties = objCaller.properties
    strMsg = TypeName ( objCaller ) & vbNewLine
    '@ get caller property names and their current values
    for each strProperty in dictProperties.keys
        strMsg = strMsg & vbNewLine & strProperty &": "& dictProperties.Item ( strProperty )
    next
    createobject ("WScript.Shell").LogEvent EVNT_TYPE, strMsg '@ send the message to Application Events log
End Sub

'@ log err object details to Application Events log
Sub logErrorAsApplicationEvent (objCaller)
    const EVNT_TYPE = 2                                                                                            '@ warning type of an event
    if err.number = 0 then : exit sub                                                                              '@ check if there is a raised error, if not - exit procedure
    strMsg = TypeName ( objCaller ) & vbNewLine & objCaller.properties () ("method") & vbNewLine & err.description '@ create the message to be logged
    createobject ("WScript.Shell").LogEvent EVNT_TYPE, strMsg                                                      '@ send the message to Application Events log
End Sub

'@ updateField status field of the scheduled recordset with current date and time
Sub updateTestScheduleRecordStatus (objCaller)
    if typename ( objCaller ) = "clsRecordSet" Then : rsTestSchedule.updateField "STATUS", "selected" : exit sub
    if typename ( objCaller ) = "clsQuickTestApplication" and objCaller.properties ()("method") = "run" Then : rsTestSchedule.updateField "STATUS", qtApp.object.test.lastRunResults.status
End Sub


'@-----
'@5


'    I N F O
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'
'    FRIENDS LIFE DORKING TEST AUTOMATION TEAM
'    11/05/2011











'    S C R I P T                                                                            
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'@   G e t   f r a m e w o r k   c o r e   p a r a m e t e r s

    Set rsProjectParameters = new clsRecordSet '@ initialize an RS object from a user-defined class
    '@ add an array of function references (handlers in Event Handling section) to objects' event objects (events)
    '@ each event object is a collection of function refferences with an ability to be executed (fired)
    rsProjectParameters.onAddRecord.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")
    rsProjectParameters.onAddRecord.addHandler array ("raiseErrorForEmptyFieldValue", _
                                        "logEventToHtml", _
                                        "quitScriptOnError")

    rsProjectParameters.addFields array ("HOST_NAME", _
                                "PROJECT_ROOT_PATH")
    rsProjectParameters.open ""
    '@ add first record to recordset (values to headers) (number of values has to match the number of headers as there is a direct relation between them)
    rsProjectParameters.addRecord rsProjectParameters.listHeaders, array (createObject ("WScript.Network").ComputerName, _
                                                    createObject ("WScript.Shell").Environment ("USER") ("AF_PROJECT_ROOT_PATH"))


'@   C o m b i n e   p a t h   l o g i c   i n to   l a y o u t   r e co r d s e t

    set rsProjectLayout = new clsRecordSet
    rsProjectLayout.onAddFields.addHandler array ("logEventToHtml")
    rsProjectLayout.onAddRecord.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")
    rsProjectLayout.onUpdateField.addHandler array ("logEventToHtml")

    '@ create recordset headers, and empty record
    rsProjectLayout.addFields array ("PROJECT_DATABASE_PATH", _
                            "PROJECT_SOURCE_WORKSPACE_PATH", _
                            "PROJECT_BUILD_WORKSPACE_PATH", _
                            "SOURCE_BASELINE_PATH", _
                            "BUILD_BASELINE_PATH", _
                            "TEST_VAULT_BASELINE_PATH", _
                            "REPORT_VAULT_BASELINE_PATH",_
                            "REPORT_TEST_VAULT_PATH",_
                            "REPORT_PATH", _
                            "TEST_PATH")
    rsProjectLayout.open ""
    rsProjectLayout.addRecord rsProjectLayout.listHeaders, array ("", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "")

    set fs = new clsFileSystem
    fs.onCreateFolder.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")
    fs.onGetYearMonthDay.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")

    rsProjectLayout.updateField "PROJECT_DATABASE_PATH", fs.object.buildPath (rsProjectParameters.object ("PROJECT_ROOT_PATH").value, "project.mdb")


'@   R e t r i e v e   t e s t   s c h e d u l e   r e c o r d s   f r o m   p r o j e c t   d a t a b a s e

    set rsTestSchedule = new clsRecordSet
    rsTestSchedule.onConnect.addHandler array ("logEventToHtml", _
                                    "quitScriptOnError")
    rsTestSchedule.onOpen.addHandler array ("logEventToHtml", _
                                    "quitScriptOnError")
    rsTestSchedule.onOpen.addHandler array ("raiseErrorForEmptyRecordset", _
                                    "quitScriptOnError")
    rsTestSchedule.onupdateField.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")


    '@ connect to scheduler and get a recordset with the first record that matches the conditional statement
    rsTestSchedule.connect rsProjectLayout.object ("PROJECT_DATABASE_PATH").value
    rsTestSchedule.open "SELECT RELEASE, "+_ 
                                "TEST, "+_
                                "HOST, "+_
                                "TIME, "+_
                                "STATUS, "+_
                                "DEPENDENCY " +_
                    "FROM A_SCHEDULE "+_
                    "WHERE STATUS='waiting';"



'@   C h e c k   t h e   s t a t u s   o f   t h e   d e p e n d e n t   t e s t   a n d   r e s e t   t o   r u n   i f   i t   i s   p a s s e d


    For i = 1 to rsTestSchedule.object.recordcount

        '@Take the dependency text from selected record - which is a unique and relatively non-moving part of the test name
        '@If there is no dependency none of the searching is necessary, nor the objects
    
        If Not(IsNull(rsTestSchedule.object.fields("DEPENDENCY").Value)) Then
            strDependency  = rsTestSchedule.object.fields("DEPENDENCY").Value
    
            set rsTestDependency = new clsRecordSet
            rsTestDependency.onConnect.addHandler array ("logEventToHtml", _
                                            "quitScriptOnError")
            rsTestDependency.onOpen.addHandler array ("logEventToHtml", _
                                            "quitScriptOnError")
            rsTestDependency.connect rsProjectLayout.object ("PROJECT_DATABASE_PATH").value
    
            rsTestDependency.open "SELECT STATUS FROM A_SCHEDULE WHERE InStr(TEST, '" & strDependency & "') AND STATUS = 'Passed'"
    
            If rsTestDependency.object.recordcount <> 0 Then 
    
                '@change test schedule record to run, as the dependent test has now passed
                rsTestSchedule.updateField "STATUS", "run"
    
                
            End If
        rsTestSchedule.object.MoveNext
        End If
    Next



'    U S E R - D E F I N E D   C L A S S E S                                                    
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'@   C o n n e c t e d   R e c o r d s e t   C l a s s   c l s C o n n e c t e d R e c o r d S e t

Class clsRecordSet

    '@ declare variables that will be accessed from the global script
    Public object, onConnect, onOpen, onupdateField, onAddRecord, onExport, onAddFields
    
    '@ declare variables that will only be used within the class
    Private strCurrentMethod_, arrHeaders_, strConnect_, strOpen_, strupdateField_, strAddRecord_, strExport_, strAddFields_
    
    '@ this function runs each time object is initialized from this class
    Private Sub Class_Initialize ()
        set object =  createObject ("ADODB.RecordSet") '@ create an object that will be an interface to Recordset class of ADODB library (COM)
        '@ create event objects (each event object is a collection of function refferences with an ability to be executed (fired))
        set onConnect = new clsHandlers
        set onOpen = new clsHandlers
        set onupdateField = new clsHandlers
        set onAddRecord = new clsHandlers
        set onExport = new clsHandlers
        set onAddFields = new clsHandlers
    End Sub
    
    '@ this function runs each time the object  is released
    Private Sub Class_Terminate ()
        on error resume next '@ switch off the WSH error handling (in case when the object is released before the connection to DB is made)
        object.close         '@ close a recordset
    End Sub
    
    '@ a class property, that collects most important object properties and class variables into one object - for logging
    Public Property Get properties ()
        set dictProperties = createObject ("scripting.dictionary")
        dictProperties.add "method", strCurrentMethod_
        dictProperties.add "connect", strConnect_
        dictProperties.add "open", strOpen_
        dictProperties.add "updateField", strupdateField_
        dictProperties.add "addRecord", strAddRecord_
        dictProperties.add "export", strExport_
        dictProperties.add "addFields", strAddFields_
        set properties = dictProperties
    End Property
    
    '@ set recordset connection to DB
    Public Sub connect (strDataBaseFullPath)
        strCurrentMethod_ = "connect" '@ note the method that will be executed - for logging
        strConnect_ = strDataBaseFullPath
        on error resume next '@ switch off WSH error handling (custom error handling will be used)
        object.ActiveConnection = "Provider = Microsoft.Jet.OLEDB.4.0; Data Source = "& strDataBaseFullPath '@ set DB connection string, that automatically creates the connection object
        onConnect.fire Me '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End sub

    '@ open a recordset by executing an sql query
    Public Sub open (strSql)
        strCurrentMethod_ = "open" '@ note the method that will be executed - for logging
        strOpen_ = strSql
        on error resume next '@ switch off WSH error handling (custom error handling will be used)
            '@ set recordset parameters before openning it (these parameters are properties of ADODB Recordset class and can be found in MSDN for reference)
            object.cursorType = 3 '@ a static cursor allowing forward and backward scrolling of a fixed, unchangeable set of records
            object.lockType = 3 '@ multiple users can modify the data which is not locked until updateField method is called
            object.open strSql '@ return (open) a recordset by executing SQL
            onOpen.fire Me '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End Sub
    
    '@ updateField a recordset field with new value
    Public Sub updateField (strField, strNewValue)
        strCurrentMethod_ = "updateField"
        strupdateField_ = strField & vbNewLine & strNewValue
        on error resume next
            object (strField) = strNewValue '@ assign new value to a field
            object.update '@ updateField a recordset (save)
            onupdateField.fire Me
    End Sub
    
    '@ add a new record of values to recordset
    Public Sub addRecord (arrHeaders, arrValues)
        strCurrentMethod_ = "addRecord"
        on error resume next
            strAddRecord_ = join (arrHeaders, vbNewLine) & vbNewLine & vbNewLine & join (arrValues, vbNewLine)
            object.AddNew arrHeaders, arrValues '@ add a new record of values to a pre-set array of recordset fields
            onAddRecord.fire Me
    End Sub

    public sub export (intIterations, strFilePath)
        strCurrentMethod_ = "export"
        strExport_ = intIterations & vbNewLine & strFilePath
        set myFile = createObject ("scripting.FileSystemObject").createTextFile (strFilePath)
        myFile.WriteLine join (listHeaders, vbTab)
        a = intIterations \ object.recordCount
        b = intIterations mod object.recordCount
        for i = 1 to a
            myFile.Write object.getString (2,, vbTab,, "")
            object.moveFirst
        next
        if b <> 0 then : myFile.WriteLine object.getString (2, b, vbTab,, "")
        myFile.Close
        onExport.fire me
    end sub

    public function listHeaders ()
        ReDim arrHeaders (-1)
        for each field in object.fields
            Redim Preserve arrHeaders (UBound (arrHeaders) +1)
            arrHeaders (UBound(arrHeaders)) = field.name
        next
        listHeaders = arrHeaders
    end function

    public function listValues ()
        ReDim arrValues (-1)
        for each fld in object.Fields
            ReDim preserve arrValues (UBound (arrValues) +1)
            arrValues (UBound (arrValues)) = fld.value
        next
    listValues = arrValues
    end function

    '@ set up a disconnected recordset with array of fields and pre-set (constant) field parameters
    public Sub addFields (arrHeaders)
        strCurrentMethod_ = "addFields"
        strAddFields_ = arrHeaders '@ note the array of recordset headers as an internal variable
        const FIELD_TYPE = 200 '@ numeric value for a recordset field (string type)
        const MAX_CHAR = 1024 '@ recordset field size
        on error resume next
            '@ add fields to recordset with pre-set parameters
            For Each strHeader in arrHeaders
                object.fields.append strHeader, FIELD_TYPE, MAX_CHAR
            Next
            onAddFields.fire Me
    end Sub

End Class


'@   Q t p   C l a s s   c l s Q u i c k T e st A p p l i c a t i o n

Class clsQuickTestApplication

    '@ declare variables that will be accessed from the global script
    Public object, onAddCodeToAction, onOpen, onConnect, onRun, onSetFolders, onGenerateEnvironmentConfigurationCode, onGenerateWorkflowExecutionCode, onOpenTest, onSaveTest, onImportSheet

    '@ declare variables that will only be used within the class
    Private strCurrentMethod_, strConnect_, strAddCodeToAction_, strSetFolders_, strGenerateEnvironmentConfigurationCode_, strOpenTest_, strSaveTest_, strImportSheet_, strRun_

    '@ this function runs each time object is initialized from this class
    Private Sub Class_Initialize ()
        '@ create event objects (each event object is a collection of function refferences with an ability to be executed (fired))
        set onAddCodeToAction = new clsHandlers
        set onOpen = new clsHandlers
        set onConnect = new clsHandlers
        set onRun = new clsHandlers
        set onSetFolders = new clsHandlers
        set onGenerateEnvironmentConfigurationCode = new clsHandlers
        set onGenerateWorkflowExecutionCode = new clsHandlers
        set onOpenTest = new clsHandlers
        set onSaveTest = new clsHandlers
        set onImportSheet = new clsHandlers
    End Sub

    '@ a class property, that collects most important object properties and class variables into one object - for logging
    Public Property Get properties ()
        set dictProperties = createObject ("scripting.dictionary")
        dictProperties.add "method", strCurrentMethod_
        dictProperties.add "open", strOpen_
        dictProperties.add "connect", strConnect_
        dictProperties.add "setFolders", strSetFolders_
        dictProperties.add "addCodeToAction", strAddCodeToAction_
        dictproperties.add "generateEnvironmentConfigurationCode", strGenerateEnvironmentConfigurationCode_
        dictProperties.add "openTest", strOpenTest_
        dictProperties.add "saveTest", strSaveTest_
        dictProperties.add "importSheet", strImportSheet_
        dictProperties.add "run", strRun_
        set properties = dictProperties
    End Property

    '@ launch QTP
    Public Sub open ()
        strCurrentMethod_ = "open"                          '@ note the method that will be executed - for logging
        on error resume next                                '@ switch off WSH error handling (custom error handling will be used)
        set object = createObject ("QuickTest.Application") '@ create an object that will be an interface to Application class of QuickTest library (COM)
        object.Launch                                       '@ launch application
        object.Visible = TRUE                               '@ make application UI visible
        onOpen.fire Me                                      '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End Sub

    '@ force close QTP
    Public Sub close ()
        strCurrentMethod_ = "close"
        on error resume next '@ switch off WSH error handling (custom error handling will be used)
        object.quit          '@ quit application
        wscript.sleep 2000   '@ allow 2 seconds before checking if application is closed
        '@ kill all qtp related processes if they are still in the process list
        for each objProcess in getObject ("winmgmts:").InstancesOf ("Win32_process")
            if objProcess.name = "QTPro.exe" or objProcess.name = "QTReport.exe" then : objProcess.terminate
        next
    End Sub

    '@ initiate a connection between QTP and QC
    Public Sub connect (strUrl, strDomain, strProject, strUserName, strPassword, blnEncrypted)
        strCurrentMethod_ = "connect"                                                                     '@ note the method that will be executed - for logging
        strConnect_ = strUrl & vbNewLine & strDomain & vbNewLine &  strProject & vbNewLine &  strUserName & vbNewLine &  strPassword & vbNewLine &  blnEncrypted
        on error resume next                                                                              '@ switch off WSH error handling (custom error handling will be used)
        if object.TDConnection.IsConnected then : object.TDConnection.disconnect
        object.TDConnection.connect strUrl, strDomain, strProject, strUserName, strPassword, blnEncrypted '@ connect to QC project
        onConnect.fire Me                                                                                 '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End Sub

    '@ add any string to an action by action index
    Public Sub addCodeToAction ( intActionIndex, strCode )
        strCurrentMethod_ = "addCodeToAction"                   '@ note the method that will be executed - for logging
        strAddCodeToAction_ =  intActionIndex & vbNewLine & strCode
        on error resume next                                    '@ switch off WSH error handling (custom error handling will be used)
        object.Test.Actions( intActionIndex ).setScript object.Test.Actions( intActionIndex ).getScript & vbNewLine & strCode '@ set code to action
        onAddCodeToAction.fire Me                               '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End Sub

    '@ add an array of lookup folders to QTP options
    Public Sub setFolders ( arrFolderPaths )
        strCurrentMethod_ = "setFolders"                   '@ note the method that will be executed - for logging
        strSetFolders_ = join(arrFolderPaths, vbNewLine)
        on error resume next     '@ switch off WSH error handling (custom error handling will be used)
        object.folders.removeAll '@ clear pre-set folder list
        '@ add folder paths to the list one by one
        for each strPath in arrFolderPaths
            object.folders.add( strPath )
        next
        onSetFolders.fire Me
    End Sub

    '@ combine data received from environment xml with QTP statements to get an Environment variable setup code
    Public Function generateEnvironmentConfigurationCode ( objEnvironmentSettingsNode )
        strCurrentMethod_ = "generateEnvironmentConfigurationCode"                   '@ note the method that will be executed - for logging
        strGenerateEnvironmentConfigurationCode_ = objEnvironmentSettingsNode.nodeName
        generateEnvironmentConfigurationCode = ""      '@ return an empty string on error
        on error resume next                           '@ switch off WSH error handling (custom error handling will be used)
        '@ add a new line of code for each child node
        for each xmlEnvSetting in objEnvironmentSettingsNode.ChildNodes
            strCode = strCode &"Environment.Value ( "& Chr(34) & xmlEnvSetting.nodeName & Chr(34) &" ) = "& Chr(34) & xmlEnvSetting.text & Chr(34) & vbNewLine
        next
        generateEnvironmentConfigurationCode = strCode '@ pass the result back to caller
        onGenerateEnvironmentConfigurationCode.fire Me
    End Function


    Public Function generateWorkflowExecutionCode ( objScenarioRecordset )
        strCurrentMethod_ = "generateWorkflowExecutionCode"                   '@ note the method that will be executed - for logging
        generateWorkflowExecutionCode = ""
            on error resume next
            objScenarioRecordset.movefirst
            while not objScenarioRecordset.EOF
'Chr(34) & rsTestDefinition.object ("STARTROW").value &"-"& rsTestDefinition.object ("ENDROW").value & Chr(34)
                strCode = strCode & "loadAndRunAction "& Chr(34) & objScenarioRecordset ("test") & Chr(34) &", "& Chr(34) & objScenarioRecordset ("action") & Chr(34) &", "& 0 & vbNewLine '&", "& _
                                    'Chr(34) & objScenarioRecordset ("data") & Chr(34) &", "& Chr (34) & replace ( rsProjectParameters.object ("DATABASE_CON_STRING").value, "Data Source=", "Data Source="& rsProjectLayout.object ("TEST_INPUT_DATABASE_PATH").value ) & Chr (34) & vbNewLine
                objScenarioRecordset.movenext
        wend

        objScenarioRecordset.moveFirst
        generateWorkflowExecutionCode = strCode
        onGenerateWorkflowExecutionCode.fire Me
    End Function
    

    Public sub run (strResultsLocation)
        strCurrentMethod_ = "run"
        strRun_ = strResultsLocation
        on error resume next
        set qtResultsopt = createObject ("quickTest.runResultsOptions")
        qtResultsopt.resultsLocation = strResultsLocation
        object.test.run qtResultsopt
        onRun.fire Me
    End sub

    Public sub openTest (strPath)
        strCurrentMethod_ = "openTest"
        strOpenTest_ = strPath
        on error resume next
        object.open strPath, false, false
        onOpenTest.fire me
    End sub

    public sub saveTest (strDestination)
        strCurrentMethod_ = "saveTest"
        strSaveTest_ = strDestination
        on error resume next
        qtApp.object.Test.SaveAs  strDestination, false, false
        onSaveTest.fire me
    end sub

    public sub importSheet (strLocalSheetName, strFileFullPath)
        strCurrentMethod_ = "importSheet"
        strImportSheet_ = strLocalSheetName & vbNewLine & strFileFullPath
        on error resume next
        object.test.datatable.AddSheet strLocalSheetName
        qtApp.object.test.dataTable.importSheet strFileFullPath, 1, strLocalSheetName
        onImportSheet.fire me
    end sub

End Class


'@   C u s t o m   F i l e   S y s t e m   O b j e c t   C l a s s

Class clsFileSystem

    Public onMoveFolder, object, onCreateFolder, onDeleteFolder, onCopyFile, onGetYearMonthDay
    Private strCurrentMethod_, strMoveFolder_, strCreateFolder_, strDeleteFolder_, strCopyFile_, strGetYearMonthDay_

    private sub class_initialize ()
        set object = createobject("scripting.filesystemobject")
        set onMoveFolder = new clsHandlers '@ create event object (each event object is a collection of function refferences with an ability to be executed (fired))
        set onCreateFolder = new clsHandlers                      
        set onDeleteFolder = new clsHandlers
        set onCopyFile = new clsHandlers
        set onGetYearMonthDay = new clsHandlers                      '@ create event object (each event object is a collection of function refferences with an ability to be executed (fired))
    end sub

    private sub class_terminate ()
        set object = nothing
    end sub

    public property get properties ()
        set dictProperties = createObject ("scripting.dictionary")
        dictProperties.add "method", strCurrentMethod_
        dictProperties.add "moveFolder", strMoveFolder_
        dictProperties.add "createFolder", strCreateFolder_
        dictProperties.add "deleteFolder", strDeleteFolder_
        dictProperties.add "copyFile", strCopyFile_
        dictProperties.add "getYearMonthDay", strGetYearMonthDay_
        set properties = dictProperties
    end property

    public sub moveFolder (strFolderToMove, strFolderNew)
        strCurrentMethod_ = "moveFolder"            '@ note the method that will be executed - for logging
        strMoveFolder_ = strFolderToMove & vbNewLine & strFolderNew
        on error resume next
        'fs.object.moveFolder strFolderToMove, strFolderNew
        object.copyFolder strFolderToMove, strFolderNew
        object.deleteFolder strFolderToMove, true
        onMoveFolder.fire Me
    end sub

    public sub copyFile (strFileToCopy, strFileNew)
        strCurrentMethod_ = "copyFile"            '@ note the method that will be executed - for logging
        strCopyFile_ = strFileToCopy & vbNewLine & strFileNew
        on error resume next
        'fs.object.moveFolder strFolderToMove, strFolderNew
        object.copyFile strFileToCopy, strFileNew
        onCopyFile.fire Me
    end sub

    public sub createFolder (strFolderToCreate)
        strCurrentMethod_ = "createFolder"            '@ note the method that will be executed - for logging
        strCreateFolder_ = strFolderToCreate
        on error resume next
        object.createFolder strFolderToCreate
        
        onCreateFolder.fire Me
    end sub

    public sub deleteFolder (strFolderToDelete)
        strCurrentMethod_ = "deleteFolder"           
        strDeleteFolder_ = strFolderToDelete
        on error resume next
        object.deleteFolder strFolderToDelete
        
        onDeleteFolder.fire Me
    end sub

    public function getYearMonthDay (datDate)
        strCurrentMethod_   = "getYearMonthDay"            '@ note the method that will be executed - for logging
        strGetYearMonthDay_ = datDate
        on error resume next
        Dim strDay
        Dim strMonth
        Dim strYear

        strDay   = Cstr(Day(datDate))
        If Len(strDay) = 1 Then
            strDay = "0" & strDay
        End If
        strMonth = Cstr(Month(datDate))
        If Len(strMonth) = 1 Then
            strMonth = "0" & strMonth
        End If
        strYear  = Cstr(Year(datDate))

        getYearMonthDay = strYear & strMonth & strDay 

        onGetYearMonthDay.fire Me
    end Function 'getYearMonthDay


End Class


'@   E v e n t s   Cl a s s   c l s E v e n t s

Class clsHandlers

    '@ declare variables that will only be used within the class
    Private arrHandlers_ ()

    '@ this function runs each time object is initialized from this class
    Private Sub Class_Initialize ()
        ReDim arrHandlers_ (-1) '@ initiate a dynamic array with no elements in it
    End Sub

    '@ add an array of handler function raferences to local storage array
    Public Sub addHandler ( arrFunctionNames )
        '@ iterate through the array of function names
        for each strFunctionName in arrFunctionNames
            ReDim Preserve arrHandlers_ ( UBound ( arrHandlers_ ) +1)                 '@ add an emty element to local storage array
            Set arrHandlers_ ( UBound ( arrHandlers_ ) ) = GetRef ( strFunctionName ) '@ set a reference of the current function name to the last added element
        next
    End Sub

    '@ execute the handler functions
    Public Sub fire ( args )
        '@ run the handlers stored in local array one by one
        for each refHandler in arrHandlers_
            refHandler args
        next
    End Sub

End Class










'@    E V E N T   H A N D L E R S
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'@   E r r o r   H a n d l e r s

'@ quit the script in case an error was raised (either in one of the user defined objects, or in handler functions, that are meant to be checkpoints)
Sub quitScriptOnError (objCaller)
    if err.number <> 0 then : wscript.quit
End Sub

'@ check if any of the current recordset fields are empty and raise error if so
Sub raiseErrorForEmptyFieldValue (objCaller)
    for each objField in objCaller.object.fields
        if objField.value = "" Then
            on error resume next              
            err.raise 1, , "the required field "& objField.name &" is empty"
        end if
    next
End Sub

'@ check if raised error is due denied permissions
Sub quitOnPermissionDeniedError (objCaller)
    if err.description = "Permission denied" then : wscript.quit
End Sub

'@ check if current recordset is empty
Sub raiseErrorForEmptyRecordset (objCaller)
    '@ switch off WSH error handling (custom error handling will be used) and raise a user error if no records found
    if objCaller.object.recordCount = 0 then : on error resume next : err.raise 1, , "no scheduled records found"
End sub

'@ log methods to txt
Sub logEventToHtml (objCaller)
    const READ = 1, WRITE = 2, APPEND = 8
    
    set fso = createobject ("scripting.filesystemobject")
    set file = fs.object.OpenTextFile (fs.object.buildPath (createobject ("wscript.shell").CurrentDirectory, createObject ("WScript.Network").ComputerName &"-"& wscript.scriptname &".html"), APPEND, true)

    if err.number <> 0 then : file.writeline " <table><tr class='err'>"& err.description  &"</tr></table>"
    
    file.writeline "<table>"
    file.writeline "<tr>"
    file.write "<td class='date'>" : file.write now : file.write "</td>"
    file.write "<td class='class'>" : file.write typeName (objCaller) : file.write "</td>"
    file.write "<td class='method'>" : file.write objCaller.properties () ("method") : file.write "</td>"
    file.write "<td class='content'>" : file.write replace (objCaller.properties () (objCaller.properties () ("method")), vbNewLine, "<br />")  : file.write "</td>"
    file.writeline "</tr>"
    file.writeline "</table>"
    file.writeline "<link rel='stylesheet' type='text/css' href='mystyle.css' />"
End Sub


'@   L o g   H a n d l e r s

'@ log caller properties to Application Events log
Sub logCallerPropertiesAsApplicationEvent (objCaller)
    const EVNT_TYPE = 2                                       '@ warning type of an event
    set dictProperties = objCaller.properties
    strMsg = TypeName ( objCaller ) & vbNewLine
    '@ get caller property names and their current values
    for each strProperty in dictProperties.keys
        strMsg = strMsg & vbNewLine & strProperty &": "& dictProperties.Item ( strProperty )
    next
    createobject ("WScript.Shell").LogEvent EVNT_TYPE, strMsg '@ send the message to Application Events log
End Sub

'@ log err object details to Application Events log
Sub logErrorAsApplicationEvent (objCaller)
    const EVNT_TYPE = 2                                                                                            '@ warning type of an event
    if err.number = 0 then : exit sub                                                                              '@ check if there is a raised error, if not - exit procedure
    strMsg = TypeName ( objCaller ) & vbNewLine & objCaller.properties () ("method") & vbNewLine & err.description '@ create the message to be logged
    createobject ("WScript.Shell").LogEvent EVNT_TYPE, strMsg                                                      '@ send the message to Application Events log
End Sub

'@ updateField status field of the scheduled recordset with current date and time
Sub updateTestScheduleRecordStatus (objCaller)
    if typename ( objCaller ) = "clsRecordSet" Then : rsTestSchedule.updateField "STATUS", "selected" : exit sub
    if typename ( objCaller ) = "clsQuickTestApplication" and objCaller.properties ()("method") = "run" Then : rsTestSchedule.updateField "STATUS", qtApp.object.test.lastRunResults.status
End Sub


'@-----
'@6

'    I N F O
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'
'    FRIENDS LIFE DORKING TEST AUTOMATION TEAM
'    11/05/2011











'    S C R I P T                                                                            
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'@   G e t   f r a m e w o r k   c o r e   p a r a m e t e r s

    Set rsProjectParameters = new clsRecordSet '@ initialize an RS object from a user-defined class
    '@ add an array of function references (handlers in Event Handling section) to objects' event objects (events)
    '@ each event object is a collection of function refferences with an ability to be executed (fired)
    rsProjectParameters.onAddRecord.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")
    rsProjectParameters.onAddRecord.addHandler array ("raiseErrorForEmptyFieldValue", _
                                        "logEventToHtml", _
                                        "quitScriptOnError")

    rsProjectParameters.addFields array ("HOST_NAME", _
                                "PROJECT_ROOT_PATH", _
                                "PROJECT_DB_NAME")
    rsProjectParameters.open ""

    '@ add first record to recordset (values to headers) (number of values has to match the number of headers as there is a direct relation between them)
      rsProjectParameters.addRecord rsProjectParameters.listHeaders, array (createObject ("WScript.Network").ComputerName, _
													createObject ("WScript.Shell").Environment ("USER") ("AF_PROJECT_ROOT_PATH"), _
                                                    createObject ("WScript.Shell").Environment ("USER") ("PROJECT_DB_NAME"))



'@   C o m b i n e   p a t h   l o g i c   i n to   l a y o u t   r e co r d s e t

    set rsProjectLayout = new clsRecordSet
    rsProjectLayout.onAddFields.addHandler array ("logEventToHtml")
    rsProjectLayout.onAddRecord.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")
    rsProjectLayout.onUpdateField.addHandler array ("logEventToHtml")

    '@ create recordset headers, and empty record
    rsProjectLayout.addFields array ("PROJECT_DATABASE_PATH", _
                            "PROJECT_SOURCE_WORKSPACE_PATH", _
                            "PROJECT_BUILD_WORKSPACE_PATH", _
                            "SOURCE_BASELINE_PATH", _
                            "BUILD_BASELINE_PATH", _
                            "TEST_VAULT_BASELINE_PATH", _
                            "REPORT_VAULT_BASELINE_PATH",_
                            "REPORT_TEST_VAULT_PATH",_
                            "REPORT_PATH", _
                            "TEST_PATH")
    rsProjectLayout.open ""
    rsProjectLayout.addRecord rsProjectLayout.listHeaders, array ("", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "", _
                                                "")

    set fs = new clsFileSystem
    fs.onCreateFolder.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")
    fs.onGetYearMonthDay.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")

    rsProjectLayout.updateField "PROJECT_DATABASE_PATH", fs.object.buildPath (rsProjectParameters.object ("PROJECT_ROOT_PATH").value, _
                                rsProjectParameters.object ("PROJECT_DB_NAME").value)



'@   R e t r i e v e   t e s t   s c h e d u l e   r e c o r d s   f r o m   p r o j e c t   d a t a b a s e

    set rsTestSchedule = new clsRecordSet
    rsTestSchedule.onConnect.addHandler array ("logEventToHtml", _
                                    "quitScriptOnError")
    rsTestSchedule.onOpen.addHandler array ("logEventToHtml", _
                                    "quitScriptOnError")
    rsTestSchedule.onOpen.addHandler array ("raiseErrorForEmptyRecordset", _
                                    "quitScriptOnError")
    rsTestSchedule.onupdateField.addHandler array ("logEventToHtml", _
                                        "quitScriptOnError")


    '@ connect to scheduler and get a recordset with the first record that matches the conditional statement
    rsTestSchedule.connect rsProjectLayout.object ("PROJECT_DATABASE_PATH").value
    rsTestSchedule.open "SELECT * FROM A_SCHEDULE "+_
                    "WHERE STATUS='Failed' " & _
                    "AND REPEATONFAILURE " & _
                    "AND NOT(ISNULL(NUMBEROFREPETITIONS));"



'@   R e s e t   t h e   t e s t s   t h a t   a r e   s e t   t o   r e p e a t


    For i = 1 to rsTestSchedule.object.recordcount

        If rsTestSchedule.object.fields("NUMBEROFREPETITIONS").Value <> 0 Then
            '@Remove one repetition, set the test back to being ready to run
            rsTestSchedule.updateField "NUMBEROFREPETITIONS", rsTestSchedule.object.fields("NUMBEROFREPETITIONS").Value - 1
            rsTestSchedule.updateField "STATUS", "run"
        End If

        rsTestSchedule.object.MoveNext
    Next



'    U S E R - D E F I N E D   C L A S S E S                                                    
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'@   C o n n e c t e d   R e c o r d s e t   C l a s s   c l s C o n n e c t e d R e c o r d S e t

Class clsRecordSet

    '@ declare variables that will be accessed from the global script
    Public object, onConnect, onOpen, onupdateField, onAddRecord, onExport, onAddFields
    
    '@ declare variables that will only be used within the class
    Private strCurrentMethod_, arrHeaders_, strConnect_, strOpen_, strupdateField_, strAddRecord_, strExport_, strAddFields_
    
    '@ this function runs each time object is initialized from this class
    Private Sub Class_Initialize ()
        set object =  createObject ("ADODB.RecordSet") '@ create an object that will be an interface to Recordset class of ADODB library (COM)
        '@ create event objects (each event object is a collection of function refferences with an ability to be executed (fired))
        set onConnect = new clsHandlers
        set onOpen = new clsHandlers
        set onupdateField = new clsHandlers
        set onAddRecord = new clsHandlers
        set onExport = new clsHandlers
        set onAddFields = new clsHandlers
    End Sub
    
    '@ this function runs each time the object  is released
    Private Sub Class_Terminate ()
        on error resume next '@ switch off the WSH error handling (in case when the object is released before the connection to DB is made)
        object.close         '@ close a recordset
    End Sub
    
    '@ a class property, that collects most important object properties and class variables into one object - for logging
    Public Property Get properties ()
        set dictProperties = createObject ("scripting.dictionary")
        dictProperties.add "method", strCurrentMethod_
        dictProperties.add "connect", strConnect_
        dictProperties.add "open", strOpen_
        dictProperties.add "updateField", strupdateField_
        dictProperties.add "addRecord", strAddRecord_
        dictProperties.add "export", strExport_
        dictProperties.add "addFields", strAddFields_
        set properties = dictProperties
    End Property
    
    '@ set recordset connection to DB
    Public Sub connect (strDataBaseFullPath)
        strCurrentMethod_ = "connect" '@ note the method that will be executed - for logging
        strConnect_ = strDataBaseFullPath
        on error resume next '@ switch off WSH error handling (custom error handling will be used)
        object.ActiveConnection = "Provider = Microsoft.Jet.OLEDB.4.0; Data Source = "& strDataBaseFullPath '@ set DB connection string, that automatically creates the connection object
        onConnect.fire Me '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End sub

    '@ open a recordset by executing an sql query
    Public Sub open (strSql)
        strCurrentMethod_ = "open" '@ note the method that will be executed - for logging
        strOpen_ = strSql
        on error resume next '@ switch off WSH error handling (custom error handling will be used)
            '@ set recordset parameters before openning it (these parameters are properties of ADODB Recordset class and can be found in MSDN for reference)
            object.cursorType = 3 '@ a static cursor allowing forward and backward scrolling of a fixed, unchangeable set of records
            object.lockType = 3 '@ multiple users can modify the data which is not locked until updateField method is called
            object.open strSql '@ return (open) a recordset by executing SQL
            onOpen.fire Me '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End Sub
    
    '@ updateField a recordset field with new value
    Public Sub updateField (strField, strNewValue)
        strCurrentMethod_ = "updateField"
        strupdateField_ = strField & vbNewLine & strNewValue
        on error resume next
            object (strField) = strNewValue '@ assign new value to a field
            object.update '@ updateField a recordset (save)
            onupdateField.fire Me
    End Sub
    
    '@ add a new record of values to recordset
    Public Sub addRecord (arrHeaders, arrValues)
        strCurrentMethod_ = "addRecord"
        on error resume next
            strAddRecord_ = join (arrHeaders, vbNewLine) & vbNewLine & vbNewLine & join (arrValues, vbNewLine)
            object.AddNew arrHeaders, arrValues '@ add a new record of values to a pre-set array of recordset fields
            onAddRecord.fire Me
    End Sub

    public sub export (intIterations, strFilePath)
        strCurrentMethod_ = "export"
        strExport_ = intIterations & vbNewLine & strFilePath
        set myFile = createObject ("scripting.FileSystemObject").createTextFile (strFilePath)
        myFile.WriteLine join (listHeaders, vbTab)
        a = intIterations \ object.recordCount
        b = intIterations mod object.recordCount
        for i = 1 to a
            myFile.Write object.getString (2,, vbTab,, "")
            object.moveFirst
        next
        if b <> 0 then : myFile.WriteLine object.getString (2, b, vbTab,, "")
        myFile.Close
        onExport.fire me
    end sub

    public function listHeaders ()
        ReDim arrHeaders (-1)
        for each field in object.fields
            Redim Preserve arrHeaders (UBound (arrHeaders) +1)
            arrHeaders (UBound(arrHeaders)) = field.name
        next
        listHeaders = arrHeaders
    end function

    public function listValues ()
        ReDim arrValues (-1)
        for each fld in object.Fields
            ReDim preserve arrValues (UBound (arrValues) +1)
            arrValues (UBound (arrValues)) = fld.value
        next
    listValues = arrValues
    end function

    '@ set up a disconnected recordset with array of fields and pre-set (constant) field parameters
    public Sub addFields (arrHeaders)
        strCurrentMethod_ = "addFields"
        strAddFields_ = arrHeaders '@ note the array of recordset headers as an internal variable
        const FIELD_TYPE = 200 '@ numeric value for a recordset field (string type)
        const MAX_CHAR = 1024 '@ recordset field size
        on error resume next
            '@ add fields to recordset with pre-set parameters
            For Each strHeader in arrHeaders
                object.fields.append strHeader, FIELD_TYPE, MAX_CHAR
            Next
            onAddFields.fire Me
    end Sub

End Class


'@   Q t p   C l a s s   c l s Q u i c k T e st A p p l i c a t i o n

Class clsQuickTestApplication

    '@ declare variables that will be accessed from the global script
    Public object, onAddCodeToAction, onOpen, onConnect, onRun, onSetFolders, onGenerateEnvironmentConfigurationCode, onGenerateWorkflowExecutionCode, onOpenTest, onSaveTest, onImportSheet

    '@ declare variables that will only be used within the class
    Private strCurrentMethod_, strConnect_, strAddCodeToAction_, strSetFolders_, strGenerateEnvironmentConfigurationCode_, strOpenTest_, strSaveTest_, strImportSheet_, strRun_

    '@ this function runs each time object is initialized from this class
    Private Sub Class_Initialize ()
        '@ create event objects (each event object is a collection of function refferences with an ability to be executed (fired))
        set onAddCodeToAction = new clsHandlers
        set onOpen = new clsHandlers
        set onConnect = new clsHandlers
        set onRun = new clsHandlers
        set onSetFolders = new clsHandlers
        set onGenerateEnvironmentConfigurationCode = new clsHandlers
        set onGenerateWorkflowExecutionCode = new clsHandlers
        set onOpenTest = new clsHandlers
        set onSaveTest = new clsHandlers
        set onImportSheet = new clsHandlers
    End Sub

    '@ a class property, that collects most important object properties and class variables into one object - for logging
    Public Property Get properties ()
        set dictProperties = createObject ("scripting.dictionary")
        dictProperties.add "method", strCurrentMethod_
        dictProperties.add "open", strOpen_
        dictProperties.add "connect", strConnect_
        dictProperties.add "setFolders", strSetFolders_
        dictProperties.add "addCodeToAction", strAddCodeToAction_
        dictproperties.add "generateEnvironmentConfigurationCode", strGenerateEnvironmentConfigurationCode_
        dictProperties.add "openTest", strOpenTest_
        dictProperties.add "saveTest", strSaveTest_
        dictProperties.add "importSheet", strImportSheet_
        dictProperties.add "run", strRun_
        set properties = dictProperties
    End Property

    '@ launch QTP
    Public Sub open ()
        strCurrentMethod_ = "open"                          '@ note the method that will be executed - for logging
        on error resume next                                '@ switch off WSH error handling (custom error handling will be used)
        set object = createObject ("QuickTest.Application") '@ create an object that will be an interface to Application class of QuickTest library (COM)
        object.Launch                                       '@ launch application
        object.Visible = TRUE                               '@ make application UI visible
        onOpen.fire Me                                      '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End Sub

    '@ force close QTP
    Public Sub close ()
        strCurrentMethod_ = "close"
        on error resume next '@ switch off WSH error handling (custom error handling will be used)
        object.quit          '@ quit application
        wscript.sleep 2000   '@ allow 2 seconds before checking if application is closed
        '@ kill all qtp related processes if they are still in the process list
        for each objProcess in getObject ("winmgmts:").InstancesOf ("Win32_process")
            if objProcess.name = "QTPro.exe" or objProcess.name = "QTReport.exe" then : objProcess.terminate
        next
    End Sub

    '@ initiate a connection between QTP and QC
    Public Sub connect (strUrl, strDomain, strProject, strUserName, strPassword, blnEncrypted)
        strCurrentMethod_ = "connect"                                                                     '@ note the method that will be executed - for logging
        strConnect_ = strUrl & vbNewLine & strDomain & vbNewLine &  strProject & vbNewLine &  strUserName & vbNewLine &  strPassword & vbNewLine &  blnEncrypted
        on error resume next                                                                              '@ switch off WSH error handling (custom error handling will be used)
        if object.TDConnection.IsConnected then : object.TDConnection.disconnect
        object.TDConnection.connect strUrl, strDomain, strProject, strUserName, strPassword, blnEncrypted '@ connect to QC project
        onConnect.fire Me                                                                                 '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End Sub

    '@ add any string to an action by action index
    Public Sub addCodeToAction ( intActionIndex, strCode )
        strCurrentMethod_ = "addCodeToAction"                   '@ note the method that will be executed - for logging
        strAddCodeToAction_ =  intActionIndex & vbNewLine & strCode
        on error resume next                                    '@ switch off WSH error handling (custom error handling will be used)
        object.Test.Actions( intActionIndex ).setScript object.Test.Actions( intActionIndex ).getScript & vbNewLine & strCode '@ set code to action
        onAddCodeToAction.fire Me                               '@ use fire method of the Event object; all functions (handlers) that are referenced by this object will be executed (Me object represents a current class)
    End Sub

    '@ add an array of lookup folders to QTP options
    Public Sub setFolders ( arrFolderPaths )
        strCurrentMethod_ = "setFolders"                   '@ note the method that will be executed - for logging
        strSetFolders_ = join(arrFolderPaths, vbNewLine)
        on error resume next     '@ switch off WSH error handling (custom error handling will be used)
        object.folders.removeAll '@ clear pre-set folder list
        '@ add folder paths to the list one by one
        for each strPath in arrFolderPaths
            object.folders.add( strPath )
        next
        onSetFolders.fire Me
    End Sub

    '@ combine data received from environment xml with QTP statements to get an Environment variable setup code
    Public Function generateEnvironmentConfigurationCode ( objEnvironmentSettingsNode )
        strCurrentMethod_ = "generateEnvironmentConfigurationCode"                   '@ note the method that will be executed - for logging
        strGenerateEnvironmentConfigurationCode_ = objEnvironmentSettingsNode.nodeName
        generateEnvironmentConfigurationCode = ""      '@ return an empty string on error
        on error resume next                           '@ switch off WSH error handling (custom error handling will be used)
        '@ add a new line of code for each child node
        for each xmlEnvSetting in objEnvironmentSettingsNode.ChildNodes
            strCode = strCode &"Environment.Value ( "& Chr(34) & xmlEnvSetting.nodeName & Chr(34) &" ) = "& Chr(34) & xmlEnvSetting.text & Chr(34) & vbNewLine
        next
        generateEnvironmentConfigurationCode = strCode '@ pass the result back to caller
        onGenerateEnvironmentConfigurationCode.fire Me
    End Function


    Public Function generateWorkflowExecutionCode ( objScenarioRecordset )
        strCurrentMethod_ = "generateWorkflowExecutionCode"                   '@ note the method that will be executed - for logging
        generateWorkflowExecutionCode = ""
            on error resume next
            objScenarioRecordset.movefirst
            while not objScenarioRecordset.EOF
'Chr(34) & rsTestDefinition.object ("STARTROW").value &"-"& rsTestDefinition.object ("ENDROW").value & Chr(34)
                strCode = strCode & "loadAndRunAction "& Chr(34) & objScenarioRecordset ("test") & Chr(34) &", "& Chr(34) & objScenarioRecordset ("action") & Chr(34) &", "& 0 & vbNewLine '&", "& _
                                    'Chr(34) & objScenarioRecordset ("data") & Chr(34) &", "& Chr (34) & replace ( rsProjectParameters.object ("DATABASE_CON_STRING").value, "Data Source=", "Data Source="& rsProjectLayout.object ("TEST_INPUT_DATABASE_PATH").value ) & Chr (34) & vbNewLine
                objScenarioRecordset.movenext
        wend

        objScenarioRecordset.moveFirst
        generateWorkflowExecutionCode = strCode
        onGenerateWorkflowExecutionCode.fire Me
    End Function
    

    Public sub run (strResultsLocation)
        strCurrentMethod_ = "run"
        strRun_ = strResultsLocation
        on error resume next
        set qtResultsopt = createObject ("quickTest.runResultsOptions")
        qtResultsopt.resultsLocation = strResultsLocation
        object.test.run qtResultsopt
        onRun.fire Me
    End sub

    Public sub openTest (strPath)
        strCurrentMethod_ = "openTest"
        strOpenTest_ = strPath
        on error resume next
        object.open strPath, false, false
        onOpenTest.fire me
    End sub

    public sub saveTest (strDestination)
        strCurrentMethod_ = "saveTest"
        strSaveTest_ = strDestination
        on error resume next
        qtApp.object.Test.SaveAs  strDestination, false, false
        onSaveTest.fire me
    end sub

    public sub importSheet (strLocalSheetName, strFileFullPath)
        strCurrentMethod_ = "importSheet"
        strImportSheet_ = strLocalSheetName & vbNewLine & strFileFullPath
        on error resume next
        object.test.datatable.AddSheet strLocalSheetName
        qtApp.object.test.dataTable.importSheet strFileFullPath, 1, strLocalSheetName
        onImportSheet.fire me
    end sub

End Class


'@   C u s t o m   F i l e   S y s t e m   O b j e c t   C l a s s

Class clsFileSystem

    Public onMoveFolder, object, onCreateFolder, onDeleteFolder, onCopyFile, onGetYearMonthDay
    Private strCurrentMethod_, strMoveFolder_, strCreateFolder_, strDeleteFolder_, strCopyFile_, strGetYearMonthDay_

    private sub class_initialize ()
        set object = createobject("scripting.filesystemobject")
        set onMoveFolder = new clsHandlers '@ create event object (each event object is a collection of function refferences with an ability to be executed (fired))
        set onCreateFolder = new clsHandlers                      
        set onDeleteFolder = new clsHandlers
        set onCopyFile = new clsHandlers
        set onGetYearMonthDay = new clsHandlers                      '@ create event object (each event object is a collection of function refferences with an ability to be executed (fired))
    end sub

    private sub class_terminate ()
        set object = nothing
    end sub

    public property get properties ()
        set dictProperties = createObject ("scripting.dictionary")
        dictProperties.add "method", strCurrentMethod_
        dictProperties.add "moveFolder", strMoveFolder_
        dictProperties.add "createFolder", strCreateFolder_
        dictProperties.add "deleteFolder", strDeleteFolder_
        dictProperties.add "copyFile", strCopyFile_
        dictProperties.add "getYearMonthDay", strGetYearMonthDay_
        set properties = dictProperties
    end property

    public sub moveFolder (strFolderToMove, strFolderNew)
        strCurrentMethod_ = "moveFolder"            '@ note the method that will be executed - for logging
        strMoveFolder_ = strFolderToMove & vbNewLine & strFolderNew
        on error resume next
        'fs.object.moveFolder strFolderToMove, strFolderNew
        object.copyFolder strFolderToMove, strFolderNew
        object.deleteFolder strFolderToMove, true
        onMoveFolder.fire Me
    end sub

    public sub copyFile (strFileToCopy, strFileNew)
        strCurrentMethod_ = "copyFile"            '@ note the method that will be executed - for logging
        strCopyFile_ = strFileToCopy & vbNewLine & strFileNew
        on error resume next
        'fs.object.moveFolder strFolderToMove, strFolderNew
        object.copyFile strFileToCopy, strFileNew
        onCopyFile.fire Me
    end sub

    public sub createFolder (strFolderToCreate)
        strCurrentMethod_ = "createFolder"            '@ note the method that will be executed - for logging
        strCreateFolder_ = strFolderToCreate
        on error resume next
        object.createFolder strFolderToCreate
        
        onCreateFolder.fire Me
    end sub

    public sub deleteFolder (strFolderToDelete)
        strCurrentMethod_ = "deleteFolder"           
        strDeleteFolder_ = strFolderToDelete
        on error resume next
        object.deleteFolder strFolderToDelete
        
        onDeleteFolder.fire Me
    end sub

    public function getYearMonthDay (datDate)
        strCurrentMethod_   = "getYearMonthDay"            '@ note the method that will be executed - for logging
        strGetYearMonthDay_ = datDate
        on error resume next
        Dim strDay
        Dim strMonth
        Dim strYear

        strDay   = Cstr(Day(datDate))
        If Len(strDay) = 1 Then
            strDay = "0" & strDay
        End If
        strMonth = Cstr(Month(datDate))
        If Len(strMonth) = 1 Then
            strMonth = "0" & strMonth
        End If
        strYear  = Cstr(Year(datDate))

        getYearMonthDay = strYear & strMonth & strDay 

        onGetYearMonthDay.fire Me
    end Function 'getYearMonthDay


End Class


'@   E v e n t s   Cl a s s   c l s E v e n t s

Class clsHandlers

    '@ declare variables that will only be used within the class
    Private arrHandlers_ ()

    '@ this function runs each time object is initialized from this class
    Private Sub Class_Initialize ()
        ReDim arrHandlers_ (-1) '@ initiate a dynamic array with no elements in it
    End Sub

    '@ add an array of handler function raferences to local storage array
    Public Sub addHandler ( arrFunctionNames )
        '@ iterate through the array of function names
        for each strFunctionName in arrFunctionNames
            ReDim Preserve arrHandlers_ ( UBound ( arrHandlers_ ) +1)                 '@ add an emty element to local storage array
            Set arrHandlers_ ( UBound ( arrHandlers_ ) ) = GetRef ( strFunctionName ) '@ set a reference of the current function name to the last added element
        next
    End Sub

    '@ execute the handler functions
    Public Sub fire ( args )
        '@ run the handlers stored in local array one by one
        for each refHandler in arrHandlers_
            refHandler args
        next
    End Sub

End Class










'@    E V E N T   H A N D L E R S
'////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


'@   E r r o r   H a n d l e r s

'@ quit the script in case an error was raised (either in one of the user defined objects, or in handler functions, that are meant to be checkpoints)
Sub quitScriptOnError (objCaller)
    if err.number <> 0 then : wscript.quit
End Sub

'@ check if any of the current recordset fields are empty and raise error if so
Sub raiseErrorForEmptyFieldValue (objCaller)
    for each objField in objCaller.object.fields
        if objField.value = "" Then
            on error resume next              
            err.raise 1, , "the required field "& objField.name &" is empty"
        end if
    next
End Sub

'@ check if raised error is due denied permissions
Sub quitOnPermissionDeniedError (objCaller)
    if err.description = "Permission denied" then : wscript.quit
End Sub

'@ check if current recordset is empty
Sub raiseErrorForEmptyRecordset (objCaller)
    '@ switch off WSH error handling (custom error handling will be used) and raise a user error if no records found
    if objCaller.object.recordCount = 0 then : on error resume next : err.raise 1, , "no scheduled records found"
End sub

'@ log methods to txt
Sub logEventToHtml (objCaller)
    const READ = 1, WRITE = 2, APPEND = 8
    
    set fso = createobject ("scripting.filesystemobject")
    set file = fs.object.OpenTextFile (fs.object.buildPath (createobject ("wscript.shell").CurrentDirectory, createObject ("WScript.Network").ComputerName &"-"& wscript.scriptname &".html"), APPEND, true)

    if err.number <> 0 then : file.writeline " <table><tr class='err'>"& err.description  &"</tr></table>"
    
    file.writeline "<table>"
    file.writeline "<tr>"
    file.write "<td class='date'>" : file.write now : file.write "</td>"
    file.write "<td class='class'>" : file.write typeName (objCaller) : file.write "</td>"
    file.write "<td class='method'>" : file.write objCaller.properties () ("method") : file.write "</td>"
    file.write "<td class='content'>" : file.write replace (objCaller.properties () (objCaller.properties () ("method")), vbNewLine, "<br />")  : file.write "</td>"
    file.writeline "</tr>"
    file.writeline "</table>"
    file.writeline "<link rel='stylesheet' type='text/css' href='mystyle.css' />"
End Sub


'@   L o g   H a n d l e r s

'@ log caller properties to Application Events log
Sub logCallerPropertiesAsApplicationEvent (objCaller)
    const EVNT_TYPE = 2                                       '@ warning type of an event
    set dictProperties = objCaller.properties
    strMsg = TypeName ( objCaller ) & vbNewLine
    '@ get caller property names and their current values
    for each strProperty in dictProperties.keys
        strMsg = strMsg & vbNewLine & strProperty &": "& dictProperties.Item ( strProperty )
    next
    createobject ("WScript.Shell").LogEvent EVNT_TYPE, strMsg '@ send the message to Application Events log
End Sub

'@ log err object details to Application Events log
Sub logErrorAsApplicationEvent (objCaller)
    const EVNT_TYPE = 2                                                                                            '@ warning type of an event
    if err.number = 0 then : exit sub                                                                              '@ check if there is a raised error, if not - exit procedure
    strMsg = TypeName ( objCaller ) & vbNewLine & objCaller.properties () ("method") & vbNewLine & err.description '@ create the message to be logged
    createobject ("WScript.Shell").LogEvent EVNT_TYPE, strMsg                                                      '@ send the message to Application Events log
End Sub

'@ updateField status field of the scheduled recordset with current date and time
Sub updateTestScheduleRecordStatus (objCaller)
    if typename ( objCaller ) = "clsRecordSet" Then : rsTestSchedule.updateField "STATUS", "selected" : exit sub
    if typename ( objCaller ) = "clsQuickTestApplication" and objCaller.properties ()("method") = "run" Then : rsTestSchedule.updateField "STATUS", qtApp.object.test.lastRunResults.status
End Sub

'@
